{
  "articles": {
    "api-reference/authentication": {
      "metadata": {
        "title": "Authentication",
        "description": "Learn what it takes to authenticate to the Square Cloud API.",
        "sidebarIcon": "lock"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "First you need to get an API key from the [Developer Dashboard](https://squarecloud.app/account). You can use this API key to authenticate to the Square Cloud API.\n\n```bash\n'Authorization': '<api_key>'\n```\n\n## API Usage\n\nYou can use the API key to authenticate to the Square Cloud API. You can use the API key in the `Authorization` header.\nRemembering that the use of the API is subject to the [Terms of Service](https://squarecloud.app/legal) and the [Acceptable Use Policy](https://squarecloud.app/legal/policy).\n\n<Card title=\"Limits and Restrictions\" href=\"./limitations-and-restrictions\">\n  Learn about the limits and restrictions of the Square Cloud API.\n</Card>\n"
    },
    "api-reference/limitations-and-restrictions": {
      "metadata": {
        "title": "Limitations and Restrictions",
        "description": "There are some limitations and restrictions on the use of the Square Cloud API.",
        "sidebarIcon": "shield"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "Due to regulations, local laws, security and privacy issues, certain countries may be blocked from accessing our services and APIs. We are constantly working to expand our services to more countries, but we cannot guarantee that we will be able to provide services in your country.\n\n## Blocked Countries by Sanctions or Regulatory Restrictions\n\nThe following countries are currently blocked from accessing our services and APIs due to sanctions and regulatory restrictions:\n\n| Country      | Code   | Reason                              |\n| :----------- | :----  | :---------------------------------  |\n| Afghanistan  | AF     | Regulatory restrictions             |\n| Belarus      | BY     | Regulatory restrictions             |\n| Cuba         | CU     | Regulatory restrictions             |\n| China        | CN     | Regulatory restrictions             |\n| Iran         | IR     | Regulatory restrictions             |\n| North Korea  | KP     | Regulatory restrictions             |\n| Russia       | RU     | Regulatory restrictions             |\n| Syria        | SY     | Regulatory restrictions             |\n| Antartica    | AN     | Regulatory restrictions             |\n| All TOR IP's | T1     | Regulatory restrictions             |\n\n## Captcha Countries\n\nThe following countries are required to solve a captcha before accessing our services and APIs:\n\n| Country      | Code   | Reason                              |\n| :----------- | :----  | :---------------------------------  |\n| Bangladesh   | BD     | Security reasons                    |\n| India        | IN     | Security reasons                    |\n| Iraq         | IQ     | Security reasons                    |\n| Philippines  | PH     | Security reasons                    |\n| Ukraine      | UA     | Security reasons                    |\n| Venezuela    | VE     | Security reasons                    |\n| Vietnam      | VN     | Security reasons                    |\n| Indonesia    | ID     | Security reasons                    |\n| Malaysia     | MY     | Security reasons                    |\n\n## API Limits\n\n<Warning>Illegal or abusive use of our API may result in your account being blocked.</Warning>\n<Warning>If you are rate limited, you will receive a `429 Too Many Requests` response. If you receive this response, you should wait **30 minutes before making another request**. </Warning>\n<Warning>Applications hosted **outside of Square Cloud** have a **maximum** rate limit of **300 requests per minute**.</Warning>\n\nThe API is subject to rate limits (subject to change). The current rate limits are:\n\n| Account Plan          | Rate Limit (60s)     | Max daily requests   |\n| :-------------------- | :------------------: | :------------------: |\n| HOBBY                 | 60 requests          | 86,400 requests      |\n| STANDARD              | 100 requests         | 144,000 requests     |\n| ADVANCED              | 150 requests         | 216,000 requests     |\n| PRO                   | 300 requests         | 432,000 requests     |\n| ENTERPRISE-24         | 600 requests         | 864,000 requests     |\n| ENTERPRISE-32         | 800 requests         | 1,152,000 requests   |\n| ENTERPRISE-48         | 1,200 requests       | 1,728,000 requests   |\n| ENTERPRISE-64         | 1,600 requests       | 2,304,000 requests   |\n| ENTERPRISE-96         | 2,400 requests       | 3,456,000 requests   |\n| ENTERPRISE-128        | 3,200 requests       | 4,608,000 requests   |\n| ENTERPRISE-160        | 4,000 requests       | 5,760,000 requests   |\n| ENTERPRISE-192        | 4,800 requests       | 6,912,000 requests   |\n| ENTERPRISE-224        | 5,600 requests       | 8,064,000 requests   |\n| ENTERPRISE-256        | 6,400 requests       | 9,216,000 requests   |\n| ENTERPRISE-288        | 7,200 requests       | 10,368,000 requests  |\n| ENTERPRISE-320        | 8,000 requests       | 11,520,000 requests  |\n| ENTERPRISE-384        | 9,600 requests       | 13,824,000 requests  |\n| ENTERPRISE-448        | 11,200 requests      | 16,128,000 requests  |\n| ENTERPRISE-512        | 12,800 requests      | 18,432,000 requests  |\n| ENTERPRISE-640        | 16,000 requests      | 23,040,000 requests  |\n| ENTERPRISE-768        | 19,200 requests      | 27,648,000 requests  |\n| ENTERPRISE-1024       | 25,600 requests      | 36,864,000 requests  |\n\nIt is important to note that these API usage limits are set to ensure that the Square Cloud platform can be used equitably by all users and to protect the integrity of the systems. If you need more requests per minute or other broader limitations, it may be possible to upgrade to a higher tier plan that offers these additional features.\n"
    },
    "articles/getting-started-with-csharp": {
      "metadata": {
        "title": "Getting Started on Square Cloud with Csharp",
        "description": "Learn how to get started on Square Cloud with Elixir",
        "sidebarTitle": "Csharp",
        "sidebarIcon": "c"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## üöÄ Introduction\n\n- Before you begin, make sure you have Dotnet on your system. If you don't have them yet, you can download them from the [official Dotnet website](https://dotnet.microsoft.com/pt-br/download).\n- Next, you will need to create an account on Square Cloud, which can be done through the [login page](https://squarecloud.app/login). You can use either your email or Discord, or both, to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n## ‚öôÔ∏è Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to\n  configure your application; it will be used to define the name, description,\n  version, main file, among other things.\n</Card>\n\n## üìÑ Required Files\n\n- **project/project.csproj** (Example of main file).\n  <Note>In the example above, the main application file is inside a folder. If your configuration file is also inside a folder, it's necessary to define its path in the `MAIN` field, for example: `MAIN=folder/file.csproj`</Note>\n- [squarecloud.app](/getting-started/config-file) (file that contains the Square Cloud configuration).\n\n## ‚ñ∂Ô∏è Start Application\n\n- If the `START` field is not defined in the configuration file, Square Cloud will by default uses `restore & run` to start your application. If the `START` field is defined in the configuration file, the value in the `START` field will be executed directly. For more information on configuration file parameters, visit [configuration parameters](https://docs.squarecloud.app/getting-started/config-file#configuration-parameters).\n\n- Square Cloud uses `dotnet restore` to restore project dependencies and `dotnet run --project MAIN` to build and run the project specified by `MAIN`.\n\n## üñ•Ô∏è Preparing Project for Upload\n\nBefore hosting your project on Square Cloud, you must first have the files of your project properly configured, so that you can host it later.\n\n<Warning>The configuration (`squarecloud.app/.config`) file must be located in the root of the zip file. Otherwise, Square Cloud will not be able to find it during deployment.</Warning>\n\n## üì§ Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "articles/getting-started-with-elixir": {
      "metadata": {
        "title": "Getting Started on Square Cloud with Elixir",
        "description": "Learn how to get started on Square Cloud with Elixir",
        "sidebarTitle": "Elixir",
        "sidebarIcon": "flask"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## üöÄ Introduction\n\n- Before you begin, make sure you have Elixir on your system. If you don't have them yet, you can download them from the [official Elixir website](https://elixir-lang.org/install.html).\n- Next, you will need to create an account on Square Cloud, which can be done through the [login page](https://squarecloud.app/login). You can use either your email or Discord, or both, to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n## ‚öôÔ∏è Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to\n  configure your application; it will be used to define the name, description,\n  version, main file, among other things.\n</Card>\n\n## üìÑ Required Files\n\n- main.ex (Example of main file).\n- mix.exs (Dependency file).\n- [squarecloud.app](/getting-started/config-file) (file that contains the Square Cloud configuration).\n\n## ‚ñ∂Ô∏è Start Application\n\n- If the `START` field is not defined in the configuration file, Square Cloud will run `mix run --no-halt` to start the project. If the `START` field is defined in the configuration file, the value in the `START` field will be executed directly. For more information on configuration file parameters, visit [configuration parameters](https://docs.squarecloud.app/getting-started/config-file#configuration-parameters).\n\n- Square Cloud performs a local installation of the `hex` and `rebar` tools and obtains project dependencies with `mix deps.get`.\n\n## üñ•Ô∏è Preparing Project for Upload\n\nBefore hosting your project on Square Cloud, you must first have the files of your project properly configured, so that you can host it later.\n\n<Warning>The configuration (`squarecloud.app/.config`) file must be located in the root of the zip file. Otherwise, Square Cloud will not be able to find it during deployment.</Warning>\n\n## üì§ Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "articles/getting-started-with-go": {
      "metadata": {
        "title": "Getting Started on Square Cloud with Go",
        "description": "Learn how to get started on Square Cloud with Go",
        "sidebarTitle": "Go",
        "sidebarIcon": "golang"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## üöÄ Introduction\n\n- Before you begin, make sure you have Go on your system. If you don't have them yet, you can download them from the [official Go website](https://go.dev/doc/install).\n- Next, you will need to create an account on Square Cloud, which can be done through the [login page](https://squarecloud.app/login). You can use either your email or Discord, or both, to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n## ‚öôÔ∏è Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to\n  configure your application; it will be used to define the name, description,\n  version, main file, among other things.\n</Card>\n\n## üìÑ Required Files\n\n- main.go (Example of main file).\n- go.mod (Dependency file).\n- OR go.work (Dependency file).\n- go.sum (Checksum file, optional).\n- [squarecloud.app](/getting-started/config-file) (file that contains the Square Cloud configuration).\n\n## ‚ñ∂Ô∏è Start Application\n\n- If the `START` field is not defined in the configuration file, Square Cloud will run `go run MAIN` to compile and execute the Go file specified in the `MAIN` field. If the `START` field is defined in the configuration file, the value in the `START` field will be executed directly. For more information on configuration file parameters, visit [configuration parameters](https://docs.squarecloud.app/getting-started/config-file#configuration-parameters).\n\n- Square Cloud runs the `go mod tidy` command to update your project's dependencies.\n\n## üñ•Ô∏è Preparing Project for Upload\n\nBefore hosting your project on Square Cloud, you must first have the files of your project properly configured, so that you can host it later.\n\n<Warning>The configuration (`squarecloud.app/.config`) file must be located in the root of the zip file. Otherwise, Square Cloud will not be able to find it during deployment.</Warning>\n\n## üì§ Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "articles/getting-started-with-java": {
      "metadata": {
        "title": "Getting Started on Square Cloud with Java",
        "description": "Learn how to get started on Square Cloud with Java",
        "sidebarTitle": "Java",
        "sidebarIcon": "java"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## üöÄ Introduction\n\n- Before you begin, make sure you have Java on your system. If you don't have them yet, you can download them from the [official Java website](https://www.java.com/download/manual.jsp).\n- Next, you will need to create an account on Square Cloud, which can be done through the [login page](https://squarecloud.app/login). You can use either your email or Discord, or both, to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n## ‚öôÔ∏è Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to\n  configure your application; it will be used to define the name, description,\n  version, main file, among other things.\n</Card>\n\n## üìÑ Required Files\n\n- project.jar (Example of main file).\n- MANIFEST.MF (Dependency file).\n- [squarecloud.app](/getting-started/config-file) (file that contains the Square Cloud configuration).\n\n## ‚ñ∂Ô∏è Start Application\n\n- If the `START` field is not defined in the configuration file, Square Cloud will run `java -jar MAIN`, where the file specified in the `MAIN` field is the `JAR` file. If the `START` field is defined in the configuration file, the value in the `START` field will be executed directly. For more information on configuration file parameters, visit [configuration parameters](https://docs.squarecloud.app/getting-started/config-file#configuration-parameters).\n\n## üñ•Ô∏è Preparing Project for Upload\n\nBefore hosting your project on Square Cloud, you must first have the files of your project properly configured, so that you can host it later.\n\n<Warning>The configuration (`squarecloud.app/.config`) file must be located in the root of the zip file. Otherwise, Square Cloud will not be able to find it during deployment.</Warning>\n\n## üì§ Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "articles/getting-started-with-nodejs": {
      "metadata": {
        "title": "Getting Started on Square Cloud with Node.js",
        "description": "Learn how to get started on Square Cloud with Node.js",
        "sidebarTitle": "Getting Started with Node.js"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## üöÄ Introduction\n\n- Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [login page](https://squarecloud.app/login). You can use either your email or Discord, or both, to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n## ‚öôÔ∏è Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to\n  configure your application; it will be used to define the name, description,\n  version, main file, among other things.\n</Card>\n\n## ‚ñ∂Ô∏è Start Application\n\n<Tabs>\n  <Tab title=\"Javascript\">\n    - If the `START` field is not defined in the configuration file, Square Cloud will by default run `node` with optimization options and specific parameters. If the `START` field is defined in the configuration file, the value in the `START` field will be executed directly. For more information on configuration file parameters, visit [configuration parameters](https://docs.squarecloud.app/getting-started/config-file#configuration-parameters).\n  </Tab>\n\n  <Tab title=\"Typescript\">\n    - If the `START` field is not defined in the configuration file, Square Cloud will by default run `npx tsx MAIN` to compile and execute the main TypeScript file specified by `MAIN` field. If the `START` field is defined in the configuration file, the value in the `START` field will be executed directly. For more information on configuration file parameters, visit [configuration parameters](https://docs.squarecloud.app/getting-started/config-file#configuration-parameters).\n  </Tab>\n</Tabs>\n\n- If the `node_modules` folder does not exist, Square Cloud will run `npm install --no-package-lock --no-audit --no-fund` to install dependencies and clean the `.npm` folder.\n\n## üñ•Ô∏è Preparing Your Node.js Project\n\n### üìÅ Essential Configuration Files\n\nWhen preparing your Node.js project for deployment on Square Cloud, ensure that you include your configuration file (`squarecloud.app/.config`) and the essential files of your application in a zip file.\n\n<Warning>The configuration (`squarecloud.app/.config`) file must be located in the root of the zip file. Otherwise, Square Cloud will not be able to find it during deployment.</Warning>\n\n#### üóëÔ∏è Files to Exclude Before Uploading\n\n- `node_modules`: This folder is not required to be sent as it will be created during the installation process in the production environment.\n- `package-lock.json`: This file is not necessary because the production environment will install dependencies based on `package.json`.\n\n### ü§î Why Exclude These Files?\n\nThere are several reasons to exclude `node_modules` and `package-lock.json` before uploading your project:\n\n1. **Installation Consistency:** Not sending the `node_modules` folder ensures that dependencies are installed by the production environment, resulting in a consistent build free from local system discrepancies.\n\n2. **Updated Installations:** The production environment will install the latest compatible versions of the dependencies listed in `package.json`, providing a clean start for your application.\n\n3. **Reduced Upload Size:** Leaving out these files decreases the size of your upload file, which speeds up the upload process and makes deployment more efficient.\n\nBy doing this, you can ensure that your Node.js application is optimally prepared and secure for deployment to Square Cloud.\n\n### üìÑ Required Files\n\nThree files are required to host your Node project:\n\n- [squarecloud.app/.config](/getting-started/config-file)\n- mainFile.js/.ts (Example of main file)\n- [package.json](./how-to-create-your-package-json.mdx) (Dependency file)\n\n<Note>\n  Square Cloud natively supports `TypeScript`, running your project through\n  ts-node, but it is recommended to always compile to `JavaScript` since we are\n  a production platform.\n</Note>\n\n## üí° Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"The main file is invalid or corrupted\" icon=\"file\" iconType=\"solid\">\n    This error occurs when the file defined as \"main\" for your application in\n    the configuration file does not exist, is written incorrectly, or the path\n    is incorrect. If your main file is inside a folder, for example, you should\n    enter `folder/file.js`.\n  </Accordion>\n\n  <Accordion title=\"Bad Memory\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a bot is 256MB, and for a\n    website/API, it's 512MB. However, depending on the size and complexity of\n    your application, it may be advisable to allocate a larger amount of RAM to\n    avoid the\n    [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM)\n    error.\n  </Accordion>\n</AccordionGroup>\n\n## üì§ Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "articles/getting-started-with-php": {
      "metadata": {
        "title": "Getting Started on Square Cloud with PHP",
        "description": "Learn how to get started on Square Cloud with PHP",
        "sidebarTitle": "PHP",
        "sidebarIcon": "php"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## üöÄ Introduction\n\n- Before you begin, make sure you have PHP on your system. If you don't have them yet, you can download them from the [official PHP website](https://www.php.net/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [login page](https://squarecloud.app/login). You can use either your email or Discord, or both, to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n## ‚öôÔ∏è Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to\n  configure your application; it will be used to define the name, description,\n  version, main file, among other things.\n</Card>\n\n## üìÑ Required Files\n\n- index.php (Example of main file).\n- `composer.json` (\\*Optional dependency file).\n- [squarecloud.app](/getting-started/config-file) (a file containing your Square Cloud configuration).\n\n## ‚ñ∂Ô∏è Start Application\n\n- If the `START` field is not defined in the configuration file, a local PHP server will be started using the `php -S 0.0.0.0:80` command. If the `START` field is defined in the configuration file, the value in the `START` field will be executed directly. For more information on configuration file parameters, visit [configuration parameters](https://docs.squarecloud.app/getting-started/config-file#configuration-parameters).\n\n- If the `composer.json` file exists, all dependencies will be installed using the `php composer.phar install` command.\n\n## üñ•Ô∏è Preparing Project for Upload\n\nBefore you can host your project on Square Cloud, ensure your project files are correctly configured for hosting.\n\nIf your project includes a `composer.json` file, Square Cloud will automatically install dependencies using Composer. However, if your project also has Node dependencies (i.e., a `package.json` file), you should specify the installation process in the `START` field of your `squarecloud.app` file. For example:\n\n```plaintext\nSTART=npm install && php .....\n```\n\n<Warning>The configuration (`squarecloud.app/.config`) file must be located in the root of the zip file. Otherwise, Square Cloud will not be able to find it during deployment.</Warning>\n\n## üì§ Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "articles/getting-started-with-python": {
      "metadata": {
        "title": "Getting Started on Square Cloud with Python",
        "description": "Learn how to get started on Square Cloud with Python",
        "sidebarTitle": "Getting Started with Python"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## üöÄ Introduction\n\n- Before you begin, make sure you have Python on your system. If you don't have them yet, you can download them from the [official Python website](https://www.python.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [login page](https://squarecloud.app/login). You can use either your email or Discord, or both, to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n## ‚öôÔ∏è Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to\n  configure your application; it will be used to define the name, description,\n  version, main file, among other things.\n</Card>\n\n## ‚ñ∂Ô∏è Start Application\n\n- If the `START` field is not defined in the configuration file, Square Cloud will run `python MAIN` to execute the Python file specified in the `MAIN` field. If the `START` field is defined in the configuration file, the value in the `START` field will be executed directly. For more information on configuration file parameters, visit [configuration parameters](https://docs.squarecloud.app/getting-started/config-file#configuration-parameters).\n\n- Square Cloud uses `pip install` to install all dependencies listed in the `requirements.txt`.\n\n## üñ•Ô∏è Preparing Your Python Project\n\n### üìÅ Essential Configuration Files\n\nWhen preparing your Python project for deployment on Square Cloud, ensure that you include your configuration file (`squarecloud.app/.config`) and the essential files of your application in a zip file.\n\n<Warning>The configuration (`squarecloud.app/.config`) file must be located in the root of the zip file. Otherwise, Square Cloud will not be able to find it during deployment.</Warning>\n\n#### üóëÔ∏è Files to Exclude Before Uploading\n\n- `ffmpeg`: This software is pre-installed in the Square Cloud environment, so there's no need to include this folder in your project.\n- `.venv`: This folder contains the virtual environment for your project. Square Cloud provides an isolated environment, so this folder is not required.\n- `poetry.lock`: Since Square Cloud does not currently support Poetry, this file should be excluded to avoid any potential issues during deployment.\n\n### ü§î Why Exclude These Files?\n\nExcluding `ffmpeg`, `.venv` and `poetry.lock` is important for several reasons:\n\n1. **Clean Environment:** Square Cloud creates a fresh environment for your project. Including these files is unnecessary and could lead to conflicts with the cloud environment's configurations.\n\n2. **Efficiency:** Removing these files reduces the size of your upload, making the process faster and more streamlined.\n\n3. **Compatibility:** Excluding `poetry.lock` ensures that there are no compatibility issues, as Square Cloud relies on `requirements.txt` for installing dependencies.\n\nBefore uploading, make sure to zip your project files in **.zip** format, excluding the unnecessary files mentioned above. This will help ensure that your Python application is ready for a successful deployment to Square Cloud.\n\n### üìÑ Required Files\n\n- main.py (Example of main file).\n- [requirements.txt](./how-to-create-your-requirements) (Dependency file).\n- OR \\[pyproject.toml] (Dependency file).\n- [squarecloud.app](/getting-started/config-file) (file that contains the Square Cloud configuration).\n\n## üí° Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"The main file is invalid or corrupted\" icon=\"file\" iconType=\"solid\">\n    This error occurs when the file defined as \"main\" for your application in\n    the configuration file does not exist, is written incorrectly, or the path\n    is incorrect. If your main file is inside a folder, for example, you should\n    enter `folder/file.js`.\n  </Accordion>\n\n  <Accordion title=\"Bad Memory\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a bot is 256MB, and for a\n    website/API, it's 512MB. However, depending on the size and complexity of\n    your application, it may be advisable to allocate a larger amount of RAM to\n    avoid the\n    [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM)\n    error.\n  </Accordion>\n</AccordionGroup>\n\n## üì§ Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "articles/getting-started-with-rust": {
      "metadata": {
        "title": "Getting Started on Square Cloud with Rust",
        "description": "Learn how to get started on Square Cloud with Rust",
        "sidebarTitle": "Rust",
        "sidebarIcon": "rust"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## üöÄ Introduction\n\n- Before you begin, make sure you have Rust on your system. If you don't have them yet, you can download them from the [official Rust website](https://www.rust-lang.org/tools/install).\n- Next, you will need to create an account on Square Cloud, which can be done through the [login page](https://squarecloud.app/login). You can use either your email or Discord, or both, to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n## ‚öôÔ∏è Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to\n  configure your application; it will be used to define the name, description,\n  version, main file, among other things.\n</Card>\n\n## üìÑ Required Files\n\n- main.rs (Example of main file).\n- Cargo.toml (dependency file).\n- [squarecloud.app](/getting-started/config-file) (file that contains the Square Cloud configuration).\n\n## ‚ñ∂Ô∏è Start Application\n\n- If the `START` field is not defined in the configuration file, Square Cloud will run the `cargo run --release` command to build and execute the code in release mode. If the `START` field is defined in the configuration file, the value in the `START` field will be executed directly. For more information on configuration file parameters, visit [configuration parameters](https://docs.squarecloud.app/getting-started/config-file#configuration-parameters).\n\n## üñ•Ô∏è Preparing Project for Upload\n\nBefore hosting your project on Square Cloud, you must first have the files of your project properly configured, so that you can host it later.\n\n<Warning>\n  The configuration (`squarecloud.app/.config`) file must be located in the root\n  of the zip file. Otherwise, Square Cloud will not be able to find it during\n  deployment.\n</Warning>\n\n## üì§ Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "articles/how-to-create-your-package-json": {
      "metadata": {
        "title": "How to create your package.json file",
        "description": "Learn how to create a package.json file for Node.js projects",
        "sidebarTitle": "Create your package.json"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "# Creating Your package.json File\n\nA `package.json` file is a standard way to specify the dependencies of your Node.js project. It lists all the external packages your project relies on, making it easier for others to reproduce your environment and for you to manage your dependencies. Here\"s a step-by-step guide on how to create your `package.json` file.\n\n## Step 1: Initialization\n\nThere are two main paths to kickstart your package.json:\n\n### Automatic (Recommended)\n\nNavigate to your project\"s root directory and run `npm init -y`. This interactive prompt will guide you through filling in the basic details.\n\n### Manual\n\nCreate a file named `package.json` and write the `JSON structure yourself`. While this offers more control, it requires familiarity with the format.\n\n## Step 2: Essential Fields\n\nEvery package.json needs these key landmarks:\n\n- `name:` Your project\"s unique identifier, like \"my-project\".\n- `version:` Your project\"s current stage, typically starting with \"1.0.0\".\n- `description:` A concise overview of what your project does.\n\n## Step 3: Dependencies\n\n<Warning>Specify the exact version (using ==) for each package to ensure consistency and reproducibility</Warning>\n\nList all the external packages your project relies on under the dependencies property. Use the package name followed by the desired version (e.g., \"`discord.js`\": \"`^14.14.1`\").\n\n**Remember:**\n\n- Exact versions (using `==`):  Pin your project to specific versions for predictable behavior.\n- Ranges (using `^` or `~`): Allow for minor or patch updates without manual intervention.\n\n## Step 4: Additional Features\n\nYour package.json can be a treasure trove of other helpful features:\n\n- `scripts:` Define custom commands to automate tasks like testing or deployment.\n- `keywords:` Improve discoverability by specifying relevant keywords.\n- `author:` Share your project\"s creator(s).\n\n## Step 5: Share and Use\n\nYour package.json is a vital part of sharing your project. Include it in your version control system and use it to:\n\n- Install dependencies for newcomers with `npm install <package>`.\n- Deploy your project to Square Cloud.\n\n## Bonus Tips:\n\n- Use tools like `npm audit` to identify and address potential vulnerabilities in your dependencies.\n- Group related dependencies into sub-packages for better organization.\n- Keep your package.json concise and well-documented for future reference.\n- When setting up your package.json, you may also encounter the `devDependencies` property. This is used to list packages that are only needed during development, such as testing libraries or build tools. These dependencies are not included when the project is deployed to production environments, like Square Cloud. This helps to keep the production environment clean and free of unnecessary packages that are not needed for the app to run.\n\nBy following these steps and tips, you\"ll craft a package.json that steers your Node.js project towards smooth sailing and success. Remember, a well-managed dependency landscape is a happy developer\"s landscape!\n"
    },
    "articles/how-to-create-your-requirements": {
      "metadata": {
        "title": "How to create your requirements.txt file",
        "description": "Learn how to create a requirements.txt file for Python projects",
        "sidebarTitle": "Create your requirements.txt"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "# Creating Your requirements.txt File\n\nA `requirements.txt` file is a standard way to specify the dependencies of your Python project. It lists all the external packages your project relies on, making it easier for others to reproduce your environment and for you to manage your dependencies. Here\"s a step-by-step guide on how to create your `requirements.txt` file.\n\n## Step 1: Activate Virtual Environment (optional but recommended)\n\nBefore creating the `requirements.txt` file, it\"s a good practice to work within a virtual environment to keep your project dependencies isolated. Activate your virtual environment using the appropriate command for your operating system.\n\n## Step 2: List Dependencies\n\n<Warning>Specify the exact version (using ==) for each package to ensure consistency and reproducibility</Warning>\n\nManually list all the external packages and their versions that your project depends on in the `requirements.txt` file. For example:\n\n```plaintext requirements.txt\ndiscord.py\n```\n\n## Step 3: Review and Edit\n\nOpen the `requirements.txt` file with a text editor and review the list of packages. You may want to add or remove packages or update their versions as needed.\n\n## Step 4: Share and Use\n\nWith your `requirements.txt` file ready, you can share it with your team or other developers. They can then create a virtual environment and install the exact same packages and versions.\n\nHost your project on Square now to take advantage of our seamless development environment and collaboration tools.\n\n## Bonus Tips:\n\n- Update the `requirements.txt` file regularly as you add or update dependencies in your project.\n- Be cautious with using `pip freeze` with the system-wide Python environment, as it may include packages that are not strictly required for your project.\n\nCreating a `requirements.txt` file is a valuable step in managing your Python project\"s dependencies and ensuring a seamless development experience for you and your collaborators.\n"
    },
    "blob-reference/authentication": {
      "metadata": {
        "title": "Authentication",
        "description": "Learn what it takes to authenticate to the Square Cloud API.",
        "sidebarIcon": "lock"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "First you need to get an API key from the [Developer Dashboard](https://squarecloud.app/account). You can use this API key to authenticate to the Square Cloud API.\n\n```bash\n'Authorization': '<api_key>'\n```\n\n## API Usage\n\nYou can use the API key to authenticate to the Square Cloud API. You can use the API key in the `Authorization` header.\nRemembering that the use of the API is subject to the [Terms of Service](https://squarecloud.app/legal) and the [Acceptable Use Policy](https://squarecloud.app/legal/policy).\n\n<Card title=\"Limits and Restrictions\" href=\"/api-reference/limitations-and-restrictions\">\n  Learn about the limits and restrictions of the Square Cloud API.\n</Card>\n"
    },
    "cli-reference/authentication": {
      "metadata": {
        "title": "Authentication",
        "description": "Learn what it takes to authenticate to the Square Cloud CLI.",
        "sidebarIcon": "lock"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<Steps>\n  <Step title=\"Get API key\">\n    First you need to get an API key from the [Developer Dashboard](https://squarecloud.app/account). You can use this API key to authenticate to the Square Cloud CLI.\n  </Step>\n\n  <Step title=\"Authenticate\">\n    Authenticate to the Square Cloud CLI using the following command:\n\n    ```bash\n    squarecloud auth login\n    ```\n\n    You will be prompted to enter your API key.\n\n    ```bash\n    Your API Token:\n    > Insert your square cloud api token\n    ```\n\n    After entering your API key, you will be authenticated to the Square Cloud CLI.\n\n    You can skip the prompt by passing your API key with the `--token` flag:\n\n    ```bash\n    squarecloud auth login --token=<API key>\n    ```\n  </Step>\n</Steps>\n\n## Next steps\n\nAfter authenticating to the Square Cloud CLI, you can start deploying your applications.\n\n<Card title=\"Deploy your application\" href=\"/cli-reference/commands\">\n  Learn how to deploy your application using the Square Cloud CLI.\n</Card>\n\n<Card title=\"Commands Reference\" href=\"/cli-reference/commands\">\n  Learn about the commands available in the Square Cloud CLI.\n</Card>\n"
    },
    "cli-reference/commands": {
      "metadata": {
        "title": "Commands Reference",
        "description": "Learn about the commands available in the Square Cloud CLI.",
        "sidebarTitle": "Commands",
        "sidebarIcon": "code"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Primary Commands\n\nThe Square Cloud CLI provides the following primary commands:\n\n<Tabs>\n  <Tab title=\"squarecloud help\">\n    Command to get help about any command.\n\n    ```bash\n    squarecloud help\n    ```\n\n    You will see the help information about the command.\n\n    ```bash Output\n    A command line application to manage your Square Cloud applications\n\n    Usage:\n      squarecloud COMMAND [flags]\n      squarecloud [command]\n\n    Available Commands:\n      app         Do some actions with your applications\n      auth        Manage your authentication with Square Cloud\n      backup      Manage your backups\n      commit      Commit your application to Square Cloud\n      help        Help about any command\n      upload      Upload your application to Square Cloud\n      zip         Zip the current folder\n\n    Flags:\n      -h, --help      help for squarecloud\n      -v, --version   Print CLI version\n\n    Use \"squarecloud [command] --help\" for more information about a command.\n    ```\n  </Tab>\n\n  <Tab title=\"squarecloud auth login\">\n    Command to authenticate to the Square Cloud CLI using your API key.\n\n    ```bash\n    squarecloud auth login\n    ```\n\n    You will be prompted to enter your API key.\n\n    ```bash Insert your square cloud api token\n    Your API Token:\n    > Insert your square cloud api token\n    ```\n\n    ```bash Output\t \n    Your API Token has successfuly changed! You are now logged in a <username>\n    With great power comes great responsibility!\n    ```\n\n    After entering your API key, you will be authenticated to the Square Cloud CLI. üòÅ\n  </Tab>\n\n  <Tab title=\"squarecloud auth whoami\">\n    Command to print user information associated with the current Square Cloud Token.\n\n    ```bash\n    squarecloud auth whoami\n    ```\n\n    You will see the user information associated with the current Square Cloud Token.\n\n    ```bash Output\n    Currently logged as <username>\n    ```\n  </Tab>\n\n  <Tab title=\"squarecloud commit\">\n    Command to commit your application to Square Cloud.\n\n    ```bash\n    squarecloud commit\n    ```\n\n    Your application will be committed to Square Cloud.\n\n    ```bash Output\n    ‚úì Your source has successfuly commited to Square Cloud\n    ```\n  </Tab>\n\n  <Tab title=\"squarecloud zip\">\n    Command to zip the current folder.\n\n    ```bash\n    squarecloud zip\n    ```\n\n    The current folder will be zipped.\n\n    ```bash Output\n    ‚úì Your source has successfuly zipped to documentation.zip\n    ```\n  </Tab>\n</Tabs>\n\n## App Commands\n\nThe CLI provides the following commands to manage your applications:\n\n<Tabs>\n  <Tab title=\"squarecloud app list\">\n    Command to list all your Square Cloud applications.\n\n    ```bash\n    squarecloud app list\n    ```\n\n    You will see a list of all your Square Cloud applications.\n\n    ```bash Output\n    NAME                             App ID                              MEMORY    CLUSTER        LANG          WEBSITE\n    Community Bot                    5bbd020326ee4692aba43e0ca0a75454    1024mb    fl-micron-1    javascript    false\n    Management Bot                   5241e2ae060a4735ba672dd4abb7099b    1024mb    fl-micron-2    javascript    false\n    Eval Bot Test                    7845e3b8683a4cb7a323656c09fdafce    1024mb    fl-micron-4    javascript    false\n    Config Web                       9b72fc4efc7748da9c69fe21daab18f4    2048mb    fl-micron-2    javascript    true\n    Proxy System                     a23d130fcc9d4be288ae4599a4292c32    3096mb    fl-micron-1    javascript    true\n    Portfolio                        441fa128793q47adbb7519536eb6f9bc    2048mb    fl-micron-1    static        true\n    ```\n  </Tab>\n\n  <Tab title=\"squarecloud app\">\n    Command to perform actions with your applications.\n\n    ```bash\n    squarecloud app\n    ```\n\n    You will see a list of all available commands to manage your applications.\n\n    ```bash Output\n    Do some actions with your applications\n\n    Usage:\n      squarecloud app [flags]\n      squarecloud app [command]\n\n    Available Commands:\n      backup      Create a backup of you application\n      commit      Commit your application to Square Cloud \n      delete      Delete your application\n      list        List all your applications\n      logs        See your application logs\n      restart     Restart your application\n      start       Start your application\n      status      Show the status of your application\n      stop        Stop your application\n      upload      Upload your application to Square Cloud\n\n    Flags:\n      -h, --help   help for app\n\n    Use \"squarecloud app [command] --help\" for more information about a command.\n    ```\n  </Tab>\n</Tabs>\n\n## Deployment Command\n\nThe CLI provides the following command to deploy your application:\n\n<Tabs>\n  <Tab title=\"squarecloud upload\">\n    Command to upload your application to Square Cloud.\n\n    ```bash\n    squarecloud upload\n    ```\n\n    Your application will be deployed to Square Cloud.\n\n    ```bash Output\n     ‚úì Your application has been uploaded\n    ```\n  </Tab>\n</Tabs>\n"
    },
    "cli-reference/installation": {
      "metadata": {
        "title": "Installation",
        "description": "Learn what it takes to install the Square Cloud CLI.",
        "sidebarIcon": "download"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "The Square Cloud CLI is a command-line tool that allows you to interact with Square Cloud services. You can use the CLI to deploy applications, manage services, and much more.\n\n## Installation\n\nTo use the CLI, you need to install it on your local machine.\n\nYou can install the CLI using the following commands:\n\n<Frame>\n  <img src=\"https://cdn.squarecloud.app/blog/posts/changelog/01-02-2024/square-cli-install.gif\" />\n</Frame>\n\n<br />\n\n<CodeGroup>\n  ```bash macOS, Linux, and WSL \n  curl -fsSL https://cli.squarecloud.app/install | bash\n  ```\n\n  ```bash Windows with npm\n  npm install -g @squarecloud/cli\n  ```\n\n  ```bash Windows with yarn\n  yarn global add @squarecloud/cli\n  ```\n</CodeGroup>\n\n## Update the CLI\n\nTo update the CLI, you can run the following command:\n\n<CodeGroup>\n  ```bash Windows\n  npm update -g @squarecloud/cli\n  ```\n\n  ```bash Linux, macOS, and WSL\n  curl -fsSL https://cli.squarecloud.app/install | bash\n  ```\n</CodeGroup>\n\nAnd that's it! You have successfully updated the Square Cloud CLI. üéâ\n\n## Next steps\n\nAfter installing the CLI, you need to authenticate to the Square Cloud API.\n\n<Card title=\"Authentication\" href=\"/cli-reference/authentication\">\n  Learn what it takes to authenticate to the Square Cloud CLI.\n</Card>\n"
    },
    "company/brand": {
      "metadata": {
        "title": "Brand",
        "description": "Discover the origins, symbolism, and intrinsic connection of our logo at Square Cloud, a flexible cloud infrastructure designed from the ground up for adaptability.",
        "sidebarIcon": "copyright"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Origin of the Logo\n\nThe logo of Square Cloud has been thoughtfully designed to reflect the values and objectives of our company. It consists of two squares positioned at a specific angle, resulting in an appearance that resembles a \"Docker container.\"\n\n### The Meaning Behind the Logo\n\n1. **Two Squares**: The two squares in our logo represent the solid foundation on which we build our cloud infrastructure. Each square symbolizes the robustness and reliability of our services.\n\n2. **Docker Container**: The positioning of the squares was carefully chosen to evoke the image of a Docker container, which is a widely used technology in the world of cloud computing. This visually represents our flexible and adaptable approach to providing efficient and scalable solutions to our clients.\n\n### The Flexible Infrastructure\n\nOur company was born with the vision of creating a highly flexible cloud platform capable of meeting the ever-evolving needs of businesses of all sizes. The Square Cloud logo, with its angular squares, symbolizes this commitment to flexibility.\n\n#### Key Features of Our Infrastructure:\n\n1. **Elasticity**: Our infrastructure is designed to scale vertically and horizontally, allowing you to increase or decrease resources according to your business demands.\n\n2. **Portability**: Just like Docker containers can run in different environments, our services can be easily migrated between public and private clouds, providing greater freedom of choice.\n\n3. **Agility**: With container-based technology as the foundation, we can deploy solutions quickly, ensuring minimal downtime for deployments and updates.\n\n4. **Scalability**: The two squares in our logo also represent the scalability of our services. With automated and optimized resources, we can handle intense and growing workloads.\n\n### Our Online Domains\n\nTo complement our commitment to flexibility, we are proud to provide a range of online domains where you can access our services and resources. These domains are designed to ensure ease of access and use for our valued clients:\n\n- [squarecloud.app](https://squarecloud.app): Our main domain, where you can find detailed information about our services, solutions, and company updates.\n- [dash.squarecloud.app](https://squarecloud.app/dashboard): Aliases to our dashboard, where you can access your Square Cloud account and manage your cloud infrastructure with ease.\n- [api.squarecloud.app](https://api.squarecloud.app): Our API domain, where you can find detailed information about our API and its endpoints.\n- [squareweb.app](https://squarecloud.app): Our official domain that connects our clients' projects with the world.\n\nWe also have the following domains:\n\n- squarecloud.org -> squarecloud.app\n- squarecloud.dev -> squarecloud.app\n- squarecloud.xyz -> squarecloud.app\n- squarecloud.email -> squarecloud.app\n- squarecloud.com.br -> squarecloud.app\n\nCuriosity, we use .org & .email to send emails, like noreply@ emails.\n\n## Conclusion\n\nThe Square Cloud logo is much more than a simple visual representation. It encapsulates our company's philosophy and commitment to providing a flexible and reliable cloud infrastructure.\n"
    },
    "company/legal": {
      "metadata": {
        "title": "Legal",
        "description": "Square Cloud Legal Information, EULA, and Privacy Policy",
        "sidebarIcon": "scales"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## End-User License Agreement (EULA)\n\nWelcome to Square Cloud! Before you proceed to use our services, please carefully read and understand our End-User License Agreement (EULA). By accessing or using any part of our platform, you agree to be bound by the terms and conditions outlined in this agreement.\n\nYou can access the full End-User License Agreement [here](https://squarecloud.app/legal).\n\n## Privacy Policy\n\nProtecting your data and privacy is of utmost importance to us. Our Privacy Policy outlines how we collect, use, and disclose your personal information when you use our services. It also explains the measures we take to safeguard your data.\n\nTo learn more about our Privacy Policy, please visit [https://squarecloud.app/legal/policy](https://squarecloud.app/legal/policy).\n\nIf you have any questions or concerns regarding our legal documents or need assistance, please contact our support team.\n"
    },
    "company/support": {
      "metadata": {
        "title": "Support",
        "description": "Get in touch with Square Cloud Support Team",
        "sidebarIcon": "envelope"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Contact Information\n\n- General Inquiries: contact@squarecloud.app\n- Legal Matters: legal@squarecloud.app\n\n<CardGroup cols={1}>\n  <Card title=\"SAC\" href=\"https://squarecloud.app/dashboard/support\" iconType=\"brands\">\n    Support Center - Customer Service.\n  </Card>\n\n  <Card title=\"Whatsapp\" icon=\"whatsapp\" href=\"https://go.squarecloud.app/whatsapp\" iconType=\"brands\">\n    Text us on Whatsapp.\n  </Card>\n\n  <Card title=\"Telegram\" icon=\"telegram\" href=\"https://go.squarecloud.app/telegram\" iconType=\"brands\">\n    Text us on Telegram.\n  </Card>\n\n  <Card title=\"Discord\" icon=\"discord\" href=\"https://go.squarecloud.app/discord\" iconType=\"brands\">\n    Join our Discord community server.\n  </Card>\n</CardGroup>\n\n## Social Media\n\nConnect with us on social media, but please note that support response times may vary:\n\n<CardGroup cols={3}>\n  <Card title=\"Instagram\" icon=\"instagram\" href=\"https://www.instagram.com/squarecloudofc/\" iconType=\"brands\" color=\"#E1306C\">\n    Follow us on Instagram!\n  </Card>\n\n  <Card title=\"X (or Twitter)\" icon=\"x-twitter\" href=\"https://twitter.com/squarecloudofc\" iconType=\"brands\" color=\"#1DA1F2\">\n    Follow us on Twitter!\n  </Card>\n\n  <Card title=\"Youtube\" icon=\"youtube\" href=\"https://www.youtube.com/@squarecloudofc?sub_confirmation=1\" iconType=\"brands\" color=\"#FF0000\">\n    Subscribe! ü•∞\n  </Card>\n</CardGroup>\n\nFor the quickest and most efficient support, we recommend using our Discord server or contacting the appropriate email addresses mentioned above.\n"
    },
    "faqs/automatic-deletion-files-when-deploying-an-application-to-squarecloud": {
      "metadata": {
        "title": "Automatic Deletion of Files When Deploying an Application to Square Cloud",
        "description": "Learn about the files that are automatically deleted when deploying an application to Square Cloud.",
        "sidebarTitle": "File Whitelisting in Square Cloud"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "When deploying your application to Square Cloud, you might encounter a scenario where certain files are automatically deleted during the deployment process. Understanding the files that are subject to automatic deletion is crucial for ensuring a smooth deployment experience. Here, we provide a list of files that are commonly deleted during deployment and need to be excluded from your deployment package.\n\n## List of Files to Exclude:\n\n- `.cache`\n- `.config`\n- `.composer`\n- `.dockerenv`\n- `.git`\n- `.husky`\n- `.logs`\n- `.local`\n- `.npm`\n- `.next`\n- `.pki`\n- `.replit`\n- `.upm`\n- `.vscode`\n- `__pycache__`\n- `Cargo.lock`\n- `.npmrc`\n- `node_modules`\n- `package-lock.json`\n- `replit.nix`\n- `replit_zip_error_log.txt`\n- `target`\n- `yarn.lock`\n- `.venv`\n- `.breakpoints`\n- `pycache`\n\nThese files are typically related to development environments, build configurations, and dependencies. Square Cloud may automatically remove them during the deployment process to optimize the application's performance and reduce unnecessary data transfer.\n\nIt's important to note that certain development tools and platforms generate these files for local development purposes. However, they are not essential for the application to run in a production environment. Therefore, excluding them during deployment ensures a more efficient and streamlined application deployment process.\n\nTo prevent these files from being deleted during deployment, make sure to exclude them from your deployment package or configure your deployment process accordingly. Understanding and managing these files will help you deploy your application smoothly on Square Cloud while maintaining a clean and efficient deployment package.\n\nFor more information on deploying applications on Square Cloud and managing whitelists, refer to the [Square Cloud documentation](https://docs.squarecloud.app/).\n"
    },
    "faqs/debugging-an-application": {
      "metadata": {
        "title": "How to debug your Application",
        "description": "Learn how to debug your application using discord.py and discord.js."
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Debugging in [**discord.js**](https://old.discordjs.dev/#/docs/discord.js/14.14.1/class/Client?scrollTo=e-debug)\n\nWith discord.js, you can utilize the \"debug\" and \"error\" events for debugging. Here's an example:\n\n```js\n// The client listens for a 'debug' event\nclient.on('debug', (info) => {\n    // Logs the debug info to the console\n    console.log(`Debug Info: ${info}`);\n});\n\n// The client listens for an 'error' event\nclient.on('error', (error) => {\n    // Logs the error message to the console\n    console.error(`Encountered an Error: ${error.message}`);\n});\n```\n\nIn this code, we use the 'debug' event; it is triggered to provide general debugging information, and the debug messages are logged to the console. Similarly, when the 'error' event is triggered, the error message is logged to the console.\n\n## Debugging in [**discord.py**](https://discordpy.readthedocs.io/en/stable/logging.html?highlight=debug)\n\nWith discord.py, you can use the logging module for debugging. Here's an example:\n\n```py\nimport logging\nimport logging.handlers\n\n# Sets up the logger for discord\nlogger = logging.getLogger('discord')\nlogger.setLevel(logging.DEBUG)\nlogging.getLogger('discord.http').setLevel(logging.INFO)\n\n# Sets up the handler for the logger\nhandler = logging.StreamHandler()\ndt_fmt = '%Y-%m-%d %H:%M:%S'\nformatter = logging.Formatter('[{asctime}] [{levelname:<8}] {name}: {message}', dt_fmt, style='{')\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\n\n# Runs the bot\nclient.run(\"your token here\", log_handler=None)\n```\n\nIn this code, all debugging information and errors are logged to the console.\n"
    },
    "faqs/using-autorestart-in-your-squarecloud-application": {
      "metadata": {
        "title": "How to use Auto Restart in Square Cloud",
        "description": "Learn how to use Auto Restart in Square Cloud to automatically restart your application in case it crashes.",
        "sidebarTitle": "How to use Auto Restart"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "A **Square Cloud exclusive technology**, Auto Restart is a powerful feature in Square Cloud that allows your application to **automatically restart in case it crashes**. This ensures that **your app** remains **accessible and functional** even in the **event of unexpected failures**.\n\n## Enabling Auto Restart\n\nWith Auto Restart, follow these steps to enable it in your application's configuration file:\n\n<Steps>\n  <Step title=\"Config file\">\n    Create or edit your `squarecloud.app` or `squarecloud.config` file.\n\n    <Card title=\"How to create a configuration file\" href=\"/getting-started/config-file\">\n      The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n    </Card>\n  </Step>\n\n  <Step title=\"Locate parameter\">\n    Locate the `AUTORESTART` parameter in the configuration file. Or add it if it doesn't exist.\n  </Step>\n\n  <Step title=\"Set value\">\n    Set the value of `AUTORESTART` to `true`.\n\n    Here's an example of how to enable Auto Restart in your configuration file:\n\n    ```systemd squarecloud.app OR squarecloud.config\n    AUTORESTART=true\n    ```\n  </Step>\n</Steps>\n\n## How Auto Restart Works\n\nAuto Restart is a proactive feature that monitors the health of your application. If your application crashes or becomes unresponsive, Auto Restart takes action to get it back up and running.\n\n<Steps>\n  <Step title=\"Application goes down\">\n    When your application crashes or becomes unresponsive, Auto Restart detects the issue if AUTORESTART is enabled in your configuration file.\n  </Step>\n\n  <Step title=\"Application Uptime Verification\">\n    If the **application uptime is > 60 seconds**, will proceed to next step.\n  </Step>\n\n  <Step title=\"Application Exit Status Verification\">\n    If the **application exit status is 1**, will proceed to next step.\n  </Step>\n\n  <Step title=\"Application Recent Restart Verification\">\n    If the **application didn't restart in the last 60 minutes**, will proceed to next step.\n  </Step>\n\n  <Step title=\"Application Exception Verification\">\n    If the application logs contain any of the excluded errors, Auto Restart will not restart the application.\n\n    Examples of excluded errors include:\n\n    <CodeGroup>\n      ```json SyntaxError\n      SyntaxError: Unexpected token 'X'..\n      SyntaxError: Unexpected identifier 'X'..\n      SyntaxError: Invalid or unexpected token 'X'..\n      ```\n\n      ```json Version didn't find\n      npm ERR! notarget No matching version found for\n      ERROR: Could not find a version that satisfies the requirement\n      And variations of this error.\n      ```\n\n      ```json Module not found\n      Error: Cannot find module 'X'\n      Module not found: Can't resolve 'X' in 'Y'\n      And variations of this error.\n      ```\n\n      ```json Invalid dependency file\n      ERROR: Invalid requirement: 'X'\n      ERROR: Could not open requirements file: 'X'\n      npm ERR! code EJSONPARSE... npm ERR! Failed to parse json\n      And variations of this error.\n      ```\n    </CodeGroup>\n\n    If the application logs contain any of these errors, Auto Restart will not restart the application.\n  </Step>\n\n  <Step title=\"Application Restart\">\n    AUTORESTART automatically restarts your application to bring it back. üòâ\n    <Info>Cooldown between restarts is 60 minutes.</Info>\n  </Step>\n</Steps>\n\n## Best Practices\n\nHere are some best practices to make the most of Auto Restart:\n\n- Regularly review your application's logs to understand the reasons for any crashes or restarts. This can help you identify and address underlying issues.\n- Keep your MAIN file and memory allocation parameters up-to-date to ensure optimal performance and resource usage.\n\n## Conclusion\n\nAuto Restart in Square Cloud is a valuable feature that enhances the reliability of your application. By automatically handling crashes and unresponsiveness, it helps maintain a seamless user experience. Ensure that you have a plan with Auto Restart enabled and configure it in your `squarecloud.app` or `squarecloud.config` file to make the most of this feature.\n"
    },
    "getting-started/config-file": {
      "metadata": {
        "title": "How to create your squarecloud.app config file",
        "description": "Learn how to create your Square Cloud configuration file",
        "sidebarTitle": "Config file",
        "sidebarIcon": "gear-six"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Configuration file? What is it? ü§î\n\nThe configuration file is a file that contains the parameters of your application, such as the main file, memory, version, and other parameters. This file is used to configure and deploy your application on the Square Cloud platform.\n\n## Creating the configuration file\n\nIt's very simple to create the configuration file, just create a file with the name `squarecloud.app` or `squarecloud.config` and put the configuration parameters inside it.\n\n<Steps>\n  <Step title=\"Select extension\">\n    The configuration file can have two extensions: **.app** or **.config**. You can choose the extension you prefer. Tip: use **.app** to help promote Square (squarecloud.app). üòÇ\n    <Info>In **macOS**, we recommend using the **.config** extension.</Info>\n    <Warning>Note: **.app** or **.config** is the **file extension**, **not the name**.</Warning>\n  </Step>\n\n  <Step title=\"Create file\">\n    Create a file with the extension you selected and put the configuration parameters inside it.\n  </Step>\n</Steps>\n\n## Configuration parameters\n\nBelow you can see the configuration parameters that you can use in your configuration file.\n\n<Steps>\n  <Step title=\"MAIN [*]\" icon=\"file\">\n    The **MAIN** parameter is used to define the main file of your application.\n\n    ```systemd Example:\n    MAIN=index.js\n    ```\n\n    ```systemd Also, support subdirectories.\n    MAIN=src/loaders/index.js\n    ```\n\n    <Info>This parameter has maximum of **32 characters**.</Info>\n    <Info>This configuration is **IGNORED** if you use START parameter.</Info>\n  </Step>\n\n  <Step title=\"MEMORY [*]\" icon=\"memory\">\n    The **MEMORY** parameter is used to define the amount of memory that your application will use on the Square Cloud platform.\n\n    ```systemd\n    MEMORY=256\n    ```\n\n    <Info>The value is in megabytes (MB).</Info>\n    <Note>The minimum memory for a bot is **256MB** and for a website is **512MB**.</Note>\n  </Step>\n\n  <Step title=\"VERSION [*]\" icon=\"arrow-up-9-1\">\n    The **VERSION** parameter is used to define the version of your application.\n\n    ```systemd\n    VERSION=recommended\n    ```\n\n    <Info>For each language there is a different version, see the table below.</Info>\n    | Language                 | Version `recommended`  | Version `latest` |\n    | ------------------------ | ---------------------- | ---------------- |\n    | JavaScript \\[Node.js]     | 22.15.1                | 24.0.2           |\n    | Python                   | 3.13.3                 | 3.13.3           |\n    | Java                     | JDK 23                 | JDK 25           |\n    | Elixir                   | 1.18.3                 | 1.18.3           |\n    | Rust                     | 1.87.0                 | 1.87.0           |\n    | PHP                      | 8.4.7                  | 8.4.7            |\n    | Go                       | 1.24.3                 | 1.24.3           |\n    | C#                       | 9.0.1                  | 9.0.1            |\n    | HTML/CSS                 | Build 10-02-2025       | Build 10-02-2025 |\n\n    <Tip>We recommend using the `recommended` version as our team has performed extensive testing on all recommended versions.</Tip>\n  </Step>\n\n  <Step title=\"DISPLAY_NAME [*]\" icon=\"text\">\n    The **DISPLAY\\_NAME** parameter is used to define the name of your application.\n\n    ```systemd Example:\n    DISPLAY_NAME=Admin BOT\n    ```\n\n    <Info>This parameter has maximum of **32 characters**.</Info>\n  </Step>\n\n  <Step title=\"DESCRIPTION\" icon=\"text\">\n    The **DESCRIPTION** parameter is used to define the description of your application.\n\n    ```systemd Example:\n    DESCRIPTION=This bot is designed to help you with your daily tasks.\n    ```\n\n    <Info>This parameter has maximum of **280 characters**.</Info>\n  </Step>\n\n  <Step title=\"AUTORESTART\" icon=\"rotate\">\n    The **AUTORESTART** parameter is used to define if your application should restart automatically if it crashes.\n\n    ```systemd Example:\n    AUTORESTART=true\n    ```\n\n    <Info>By default, this parameter is set to `false`.</Info>\n  </Step>\n\n  <Step title=\"SUBDOMAIN\" icon=\"globe\">\n    The **SUBDOMAIN** parameter is used to define the subdomain of your website.\n\n    ```systemd Example:\n    SUBDOMAIN=mysite\n    ```\n\n    <Info>This parameter has maximum of **63 characters**.</Info>\n    <Note>Website url will be: mysite.squareweb.app</Note>\n  </Step>\n\n  <Step title=\"START\" icon=\"play\">\n    The **START** parameter is used to define a custom startup command for your application.\n\n    ```systemd Example:\n    START=npm run start\n    ```\n\n    <Info>This parameter has maximum of **128 characters**.</Info>\n    <Info>This parameter **ignores** the MAIN parameter, which is used to join Square's standardized initialization commands.</Info>\n  </Step>\n</Steps>\n\n## Examples of configuration for bots\n\nWe have some examples of configurations for bots, below you can see some examples.\n\n```systemd This example just use required parameters. (minimum configuration)\nMAIN=index.js\nMEMORY=256\nVERSION=recommended\nDISPLAY_NAME=Robin bot\n```\n\n```systemd This example is a bot with all parameters.\nMAIN=index.js\nMEMORY=256\nVERSION=recommended\nDISPLAY_NAME=Robin bot\nDESCRIPTION=Robin is a bot designed to help you with your daily tasks.\nAUTORESTART=true\n```\n\n```systemd This example use all parameters and CUSTOM STARTUP COMMAND in a bot.\nMAIN=index.js\nMEMORY=512\nVERSION=recommended\nDISPLAY_NAME=Batman force\nSTART=npm run start\n```\n\n## Examples of configuration for websites\n\nWe have some examples of configurations for websites, below you can see some examples.\n\n<Info>Website url will be: mysite.squareweb.app</Info>\n\n```systemd This example use all parameters and CUSTOM STARTUP COMMAND in a website.\nMAIN=index.js\nMEMORY=512\nVERSION=recommended\nDISPLAY_NAME=My website!\nDESCRIPTION=My website is very cool!\nSUBDOMAIN=mysite\nSTART=npm run build && npm run start\nAUTORESTART=true\n```\n\n<Info>MAIN `next.config.js` used only to system recognize the project as a JavaScript project or TypeScript project (another .ts/.tsx file)</Info>\n\n```systemd Next.js website example.\nMAIN=next.config.js\nMEMORY=1024\nVERSION=recommended\nDISPLAY_NAME=Next.js website\nDESCRIPTION=This website is built with Next.js.\nSUBDOMAIN=nextjs\nSTART=npm run build && npm run start\nAUTORESTART=true\n```\n\n## Reforcing the limits\n\nFor security and performance reasons, there are limits on the configuration parameters, below you can see the limits of each parameter.\n\n| Parameter     | Character limit |\n| ------------- | --------------- |\n| MAIN          | 32 characters   |\n| DISPLAY\\_NAME  | 32 characters   |\n| DESCRIPTION   | 280 characters  |\n| START         | 128 characters  |\n| SUBDOMAIN     | 63 characters   |\n"
    },
    "getting-started/overview": {
      "metadata": {
        "title": "üòÅ Welcome to the Square Platform",
        "description": "Square Cloud is a platform that provides hassle-free, user-friendly enterprise hosting services. Get started in minutes. ‚ú®",
        "sidebarTitle": "Overview",
        "sidebarIcon": "book"
      },
      "created_at": "2025-06-12T19:38:09.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<CardGroup>\n  <Card title=\"Quick Start Guide\" icon=\"book\" href=\"/getting-started/quick-start\">\n    Get a fast overview in your first steps with Square Cloud.\n  </Card>\n\n  <Card title=\"Official API\" icon=\"code\" href=\"/api-reference\">\n    Our API documentation for developers (and you're here!).\n  </Card>\n</CardGroup>\n\n## Before you begin\n\nTo get started, create a Square Cloud account. Then you can [select the plan](https://squarecloud.app/plans) that's right for you.\n\n<CardGroup>\n  <Card title=\"Sign Up\" icon=\"user-plus\" href=\"https://squarecloud.app/login\" color=\"#95979b\">\n    If you've never used Square before, sign up to get started.\n  </Card>\n\n  <Card title=\"Log in\" icon=\"right-to-bracket\" href=\"https://squarecloud.app/login\" color=\"#95979b\">\n    If you already have an account, log in to get started.\n  </Card>\n</CardGroup>\n\nOnce you've signed up, you can start deploying your applications on Square Cloud after selected the plan that suits your needs.\n\n## Facilitating your journey with CLI üíª\n\nThis Overview uses a [Square Cloud CLI](/cli) to deploy your applications. The CLI is a command-line tool that allows you to interact with Square Cloud services. You can use the CLI to deploy applications, manage services, and view logs.\n\nTo use the CLI, you need to install it on your local machine. You can install the CLI using the following commands:\n\n<Frame>\n  <img src=\"https://cdn.squarecloud.app/blog/posts/changelog/01-02-2024/square-cli-install.gif\" />\n</Frame>\n\n<br />\n\n<CodeGroup>\n  ```bash macOS, Linux, and WSL \n  curl -fsSL https://cli.squarecloud.app/install | bash\n  ```\n\n  ```bash Windows with npm\n  npm install -g @squarecloud/cli\n  ```\n\n  ```bash Windows with yarn\n  yarn global add @squarecloud/cli\n  ```\n</CodeGroup>\n\n<Steps>\n  <Step title=\"Read the instructions about your language\">\n    <CardGroup cols={4}>\n      <Card title=\"Node.js\" icon=\"js\" href=\"../articles/getting-started-with-nodejs\" />\n\n      <Card title=\"Python\" icon=\"python\" href=\"../articles/getting-started-with-python\" />\n\n      <Card title=\"Java\" icon=\"java\" href=\"../articles/getting-started-with-java\" />\n\n      <Card title=\"Rust\" icon=\"rust\" href=\"../articles/getting-started-with-rust\" />\n\n      <Card title=\"Elixir\" href=\"../articles/getting-started-with-elixir\" />\n\n      <Card title=\"PHP\" href=\"../articles/getting-started-with-php\" />\n\n      <Card title=\"Go\" href=\"../articles/getting-started-with-go\" />\n\n      <Card title=\"C#\" href=\"../articles/getting-started-with-csharp\" />\n\n      <Card title=\"+ üòâ\" />\n    </CardGroup>\n\n    <Info>For this example, we will use the JavaScript (Node.js) language.</Info>\n  </Step>\n\n  <Step title=\"Create your Square Cloud config file\">\n    After installing the CLI, you need to create a configuration file. You can create a [configuration file](/getting-started/config-file) reading this article [here](/getting-started/config-file).\n\n    My configuration file looks like this:\n\n    ```systemd\n    MAIN=index.js\n    MEMORY=512\n    VERSION=recommended\n    DISPLAY_NAME=Robin bot\n    DESCRIPTION=This bot system is designed to help you with your daily tasks.\n    ```\n  </Step>\n\n  <Step title=\"Upload your project\">\n    After this journey, you need to upload your project to Square Cloud. You can do this by running the following command:\n\n    ```bash\n    squarecloud upload\n    ```\n  </Step>\n</Steps>\n\n## Facilitating your journey with web interface üòâ\n\nIf you don't like command lines or prefer to use the web interface, you can upload your project directly to the Square Cloud website. To do this, follow these steps:\n\n<Steps>\n  <Step title=\"Access the Square Cloud website\">\n    Access the [Square Cloud dashboard](https://squarecloud.app/dashboard) using your account.\n  </Step>\n\n  <Step title=\"Create your Square Cloud config file\">\n    After accessing the dashboard, you need to create a configuration file. You can create a [configuration file](/getting-started/config-file) reading this article [here](/getting-started/config-file).\n  </Step>\n\n  <Step title=\"ZIP your project\">\n    After creating the configuration file, you need to zip your project.\n\n    ```bash Using the CLI\n    squarecloud zip\n    ```\n\n    Or you can zip your project manually:\n\n    <CodeGroup>\n      ```bash Windows\n      1. Locate the file or folder that you want to zip.\n      2. Press and hold (or right-click) the file or folder, select (or point to) Send to, and then select Compressed (zipped) folder.\n      3. A new zipped folder with the same name is created in the same location. To rename it, press and hold (or right-click) the folder, select Rename, and then type the new name.\n      ```\n\n      ```bash Linux\n      1. Locate the file or folder that you want to zip.\n      2. Right-click the file or folder, then choose Compress from the shortcut menu.\n      3. A new zipped folder with the same name is created in the same location. To rename it, press and hold (or right-click) the folder, select Rename, and then type the new name.\n      ```\n\n      ```bash macOS\n      1. Locate the file or folder that you want to zip.\n      2. Control-click the file or folder, then choose Compress from the shortcut menu.\n      3. A new zipped folder with the same name is created in the same location. To rename it, press and hold (or right-click) the folder, select Rename, and then type the new name.\n      ```\n    </CodeGroup>\n\n    Or you can use the command line to compress your project folder:\n\n    <CodeGroup>\n      ```bash macOS, Linux, and WSL\n      zip -r my-project.zip .\n      ```\n\n      ```bash Windows (powershell)\n      Compress-Archive -Path . -DestinationPath my-project.zip\n      ```\n    </CodeGroup>\n  </Step>\n\n  <Step title=\"Deploy your project\">\n    After uploading your project, click on the \"Add New\" button to deploy your project.\n  </Step>\n</Steps>\n\n## What's next?\n\nNow that you've learned how to deploy your project, you can explore the Square Cloud platform further. Here are some resources to help you get started:\n\n<CardGroup>\n  <Card title=\"API Reference\" icon=\"server\" href=\"/api-reference\">\n    Learn more about the Square Cloud API.\n  </Card>\n\n  <Card title=\"CLI Reference\" icon=\"code\" href=\"/cli-reference\">\n    Learn more about the Square Cloud CLI.\n  </Card>\n</CardGroup>\n\nJoin our community on [Discord](https://discord.gg/squarecloud) to get help from other developers and share your experiences.\n\n<Card title=\"Square Cloud Community\" icon=\"discord\" href=\"https://discord.gg/squarecloud\" color=\"#7289DA\">\n  Join our community on Discord. We're here to help you!\n</Card>\n\nIf you have any questions or need help, you can reach out to our [support team](https://squarecloud.app/dashboard/support). We're here to help you! üöÄ\n"
    },
    "getting-started/quick-start": {
      "metadata": {
        "title": "Quickstart",
        "description": "Go from zero to hero in minutes with Square Cloud. This guide will help you get started with Square Cloud and understand the power of our platform.",
        "sidebarTitle": "Quickstart",
        "sidebarIcon": "terminal-window"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Square Cloud Services üöÄ\n\nSquare Cloud has been designed from the ground up to be a developer-friendly platform. The platform is composed of various services that can be used to deploy applications quickly and securely.\n\n<Card title=\"Bot hosting.\" href=\"/services/bots\">\n  Deploy your bots to Square Cloud and receive the best solutions for bot hosting.\n  Square offers a strategic location for the most famous platforms, ensuring low latency and high availability.\n</Card>\n\n<Card title=\"Web hosting.\" href=\"/services/web\">\n  Deploy your web applications to Square Cloud and receive the best solutions for web hosting.\n  We provide premium Cloudflare integration, fast DNS, and a Web Application Firewall (WAF) to ensure the best performance and security.\n</Card>\n\n<Card title=\"Serverless Storage, Blob Storage.\" href=\"/services/blob\">\n  Store your data with Square Cloud and enjoy the benefits of serverless storage.\n  Our storage service is designed to be simple, scalable, and cost-effective.\n</Card>\n\n## Before you begin\n\nTo get started, create a Square Cloud account. Then you can [select the plan](https://squarecloud.app/plans) that's right for you.\n\n<CardGroup>\n  <Card title=\"Sign Up\" icon=\"user-plus\" href=\"https://squarecloud.app/login\" color=\"#95979b\">\n    If you've never used Square before, sign up to get started.\n  </Card>\n\n  <Card title=\"Log in\" icon=\"right-to-bracket\" href=\"https://squarecloud.app/login\" color=\"#95979b\">\n    If you already have an account, log in to get started.\n  </Card>\n</CardGroup>\n\n## Upload your project üòÅ\n\nYou can upload your project to Square Cloud in a few simple steps, as shown below:\n\n<Steps>\n  <Step title=\"First, read the instructions about your language:\">\n    <CardGroup cols={4}>\n      <Card title=\"Node.js\" icon=\"js\" href=\"../articles/getting-started-with-nodejs\" />\n\n      <Card title=\"Python\" icon=\"python\" href=\"../articles/getting-started-with-python\" />\n\n      <Card title=\"Java\" icon=\"java\" href=\"../articles/getting-started-with-java\" />\n\n      <Card title=\"Rust\" icon=\"rust\" href=\"../articles/getting-started-with-rust\" />\n\n      <Card title=\"Elixir\" href=\"../articles/getting-started-with-elixir\" />\n\n      <Card title=\"PHP\" href=\"../articles/getting-started-with-php\" />\n\n      <Card title=\"Go\" href=\"../articles/getting-started-with-go\" />\n\n      <Card title=\"C#\" href=\"../articles/getting-started-with-csharp\" />\n\n      <Card title=\"+ üòâ\" />\n    </CardGroup>\n\n    <Info>For this example, we will use the JavaScript (Node.js) language.</Info>\n  </Step>\n\n  <Step title=\"After, create your Square Cloud config file.\">\n    After accessing the dashboard, you need to create a configuration file. You can create a [configuration file](/getting-started/config-file) reading this article [here](/getting-started/config-file).\n\n    ```systemd Example of a config file for a bot\n    MAIN=index.js\n    MEMORY=512\n    VERSION=recommended\n    DISPLAY_NAME=Batman bot\n    DESCRIPTION=This bot is the dark knight of the night.\n    ```\n\n    ```systemd Example of a config file for a web application. (Url configured to be \"batman.squareweb.app\")\n    MAIN=index.js\n    MEMORY=512\n    VERSION=recommended\n    SUBDOMAIN=batman\n    START=npm run build && npm run start\n    DISPLAY_NAME=Batman website\n    DESCRIPTION=This website is the dark knight of the night.\n    ```\n  </Step>\n\n  <Step title=\"And then, ZIP your project.\">\n    After creating the configuration file, you need to zip your project.\n\n    <CodeGroup>\n      ```bash Windows\n      1. Locate the file or folder that you want to zip.\n      2. Press and hold (or right-click) the file or folder, select (or point to) Send to, and then select Compressed (zipped) folder.\n      3. A new zipped folder with the same name is created in the same location. To rename it, press and hold (or right-click) the folder, select Rename, and then type the new name.\n      ```\n\n      ```bash Linux\n      1. Locate the file or folder that you want to zip.\n      2. Right-click the file or folder, then choose Compress from the shortcut menu.\n      3. A new zipped folder with the same name is created in the same location. To rename it, press and hold (or right-click) the folder, select Rename, and then type the new name.\n      ```\n\n      ```bash macOS\n      1. Locate the file or folder that you want to zip.\n      2. Control-click the file or folder, then choose Compress from the shortcut menu.\n      3. A new zipped folder with the same name is created in the same location. To rename it, press and hold (or right-click) the folder, select Rename, and then type the new name.\n      ```\n    </CodeGroup>\n  </Step>\n\n  <Step title=\"Finally, upload your project. üòâ\">\n    After uploading your project, click on the \"Add New\" button to deploy your project.\n  </Step>\n</Steps>\n"
    },
    "platform/limitations-and-restrictions": {
      "metadata": {
        "title": "Limits and Restrictions",
        "description": "Discover the constraints and boundaries of the Square Cloud Platform.",
        "sidebarIcon": "warning"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Minimum Resource Requirements\n\nEvery project hosted on the Square Cloud Platform has specific minimum resource requirements to ensure optimal performance:\n\n- **Bots:** A minimum of **256MB** of RAM is required for hosting.\n- **Websites:** Websites need at least **512MB** of RAM allocated to operate effectively.\n\nPlease note that while Square Cloud offers plans with up to **1TB of RAM**, the **maximum RAM allocation** for any **application is 32GB**. <ins>If you require more than 32GB, please reach out to our support team for assistance.</ins>\n\n## CPU Optimization & Limitation\n\nThe CPU limitation logic aims to optimize performance by dynamically adapting to the application's needs. The code divides the default CPU allocation by two, promoting an efficient resource utilization approach. However, specific conditions alter this behavior:\n\nIf the **application's default CPU allocation** is <ins>1vCPU</ins>, the **CPU is set to 1**. (full release)\n\n**Otherwise**, the CPU **allocation varies based** on the **application's RAM size**:\n\n- If **RAM is less than or equal to 1024**, the CPU is set to the **maximum of half** of CPU or 1.\n- If **RAM is 2048** or <ins>**more**</ins>, the **CPU remains unchanged**. (full release)\n- For **RAM sizes between 1024 and 2048**, the CPU is set to **half of CPU**.\n\nThis strategy aims to balance CPU efficiency with variable system demands, ensuring adequate performance across different scenarios.\n\nThis approach is crucial to promote a high-quality experience, ensuring fair and efficient CPU resource allocation, optimizing application responsiveness, and reducing unnecessary resource consumption.\n\n## Network Limitations\n\nNetwork limitations are essential to ensure fair resource distribution and a high-quality experience for all users.\nThe **network speed increases by 50MB/s** for every **additional 256MB** of RAM allocated.\n\nHere are the network limitations based on RAM allocation:\n\n- **256MB RAM:** 50MB/s network speed.\n- **Up to 512MB RAM:** 100MB/s network speed.\n- **1024MB RAM:** 200MB/s network speed.\n- **2048MB RAM:** 400MB/s network speed.\n- **4096MB RAM:** 800MB/s network speed.\n- **8192MB RAM:** 1.600MB/s network speed.\n- **10240MB RAM:** 2.000MB/s network speed.\n\nFor applications requiring network speeds exceeding 2.000MB/s, please contact our support team to discuss your specific needs.\n\nSquare Cloud is committed to providing a balance between resource availability and performance, ensuring a seamless experience for all users.\n\n## Storage Limitations\n\nStorage limitations are crucial to ensure equitable resource distribution and to provide a high-quality experience for all users.\n\n- **All projects:** Each project is allocated 10GB of storage.\n\n## Service Limits\n\nSquarecloud implements service limits to ensure fair and efficient resource utilization for all users. These limits are categorized as:\n\n### LACK\\_OF\\_RAM\n\nIf an application exceeds the allocated RAM limit as specified in its [squarecloud.app config file](../getting-started/config-file), it will be flagged for violating LACK\\_OF\\_RAM and shut down to preserve its own and everyone else's safety.\n\n### LACK\\_OF\\_CPU\n\nIf an application exceeds and stresses its allocated processing limit, it will be flagged for violating LACK\\_OF\\_CPU and shut down to preserve its own and everyone else's safety. It is important to remember that Square does not allow the hosting of applications that mine cryptocurrencies, for example.\n\nSquare Cloud is dedicated to providing a secure and balanced environment for all users while ensuring compliance with its policies.\n"
    },
    "platform/overview": {
      "metadata": {
        "title": "Platform Overview",
        "description": "How to use the power of Square Cloud to build your own applications",
        "sidebarIcon": "cloud"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## What is Square Cloud platform?\n\nThe Square Cloud platform serves as the bedrock of the Square Cloud ecosystem of products and services, established in partnership with Hivelocity. It serves as a central hub for the seamless management of your applications, websites, and various projects, offering a user-friendly and straightforward approach.\n\n### The Vision Behind Square Cloud\n\nOur company was founded with a clear vision: to create an exceptionally flexible cloud platform capable of addressing the constantly evolving needs of businesses, regardless of their size. The Square Cloud logo, featuring angular squares, serves as a symbol of our unwavering commitment to adaptability.\n\nThe positioning of these squares was meticulously selected to evoke the imagery of a Docker container, a widely utilized technology in the realm of cloud computing. This choice reflects our dedication to providing efficient and scalable solutions to our clients, highlighting our flexible and adaptable approach.\n\n### Our Secure Infrastructure\n\nLocated in Staten Island, New York, our data center offers a highly secure, resilient environment that includes:\n\n**High-Speed Network Infrastructure**\n\n- **10 Gbps Connectivity per Server:** Ensuring high-speed data transfer and reduced latency.\n- **Multi-Layered DDoS Protection:** Guards against potential threats with robust, layered security.\n- **24/7 Monitoring:** Our network is constantly monitored to maintain peak performance and prevent downtime.\n\n**Physical Security and Redundancy**\n\n- **Controlled Access:** Strict biometric and keycard entry controls ensure that only authorized personnel can access the facility.\n- **Fire Protection:** Pre-action sprinklers and FM200 fire suppression systems safeguard against fire risks.\n- **Structural Resilience:** Built with a focus on durability, withstanding extreme weather and other external threats.\n- **Redundant Power Supply:** Backup power systems provide continuous service even in case of primary power disruptions.\n\n**Certifications and Compliance**\n\n- **SSAE-16 SOC 2 Certified:** Assures our commitment to secure management of your data.\n- **HIPAA and PCI Compliance:** Meeting healthcare and payment security standards to ensure comprehensive data protection.\n\nSquare Cloud‚Äôs platform combines powerful features with state-of-the-art infrastructure, ready to support your business‚Äôs unique needs. Discover how Square Cloud can empower your projects with a scalable, secure environment.\n"
    },
    "sdks/introduction": {
      "metadata": {
        "title": "Square Cloud SDKs",
        "description": "Learn how to use the Square Cloud SDKs to interact with the Square Cloud API."
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "### Choose your SDK\n\nAll sdks are open source and available on [Github](https://go.squarecloud.app/github).\n\n<CardGroup cols={2}>\n  <Card title=\"JavaScript\" icon={<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"#2563eb\" d=\"M224 508c-6.7 0-13.5-1.8-19.4-5.2l-61.7-36.5c-9.2-5.2-4.7-7-1.7-8 12.3-4.3 14.8-5.2 27.9-12.7 1.4-.8 3.2-.5 4.6.4l47.4 28.1c1.7 1 4.1 1 5.7 0l184.7-106.6c1.7-1 2.8-3 2.8-5V149.3c0-2.1-1.1-4-2.9-5.1L226.8 37.7c-1.7-1-4-1-5.7 0L36.6 144.3c-1.8 1-2.9 3-2.9 5.1v213.1c0 2 1.1 4 2.9 4.9l50.6 29.2c27.5 13.7 44.3-2.4 44.3-18.7V167.5c0-3 2.4-5.3 5.4-5.3h23.4c2.9 0 5.4 2.3 5.4 5.3V378c0 36.6-20 57.6-54.7 57.6-10.7 0-19.1 0-42.5-11.6l-48.4-27.9C8.1 389.2.7 376.3.7 362.4V149.3c0-13.8 7.4-26.8 19.4-33.7L204.6 9c11.7-6.6 27.2-6.6 38.8 0l184.7 106.7c12 6.9 19.4 19.8 19.4 33.7v213.1c0 13.8-7.4 26.7-19.4 33.7L243.4 502.8c-5.9 3.4-12.6 5.2-19.4 5.2zm149.1-210.1c0-39.9-27-50.5-83.7-58-57.4-7.6-63.2-11.5-63.2-24.9 0-11.1 4.9-25.9 47.4-25.9 37.9 0 51.9 8.2 57.7 33.8.5 2.4 2.7 4.2 5.2 4.2h24c1.5 0 2.9-.6 3.9-1.7s1.5-2.6 1.4-4.1c-3.7-44.1-33-64.6-92.2-64.6-52.7 0-84.1 22.2-84.1 59.5 0 40.4 31.3 51.6 81.8 56.6 60.5 5.9 65.2 14.8 65.2 26.7 0 20.6-16.6 29.4-55.5 29.4-48.9 0-59.6-12.3-63.2-36.6-.4-2.6-2.6-4.5-5.3-4.5h-23.9c-3 0-5.3 2.4-5.3 5.3 0 31.1 16.9 68.2 97.8 68.2 58.4-.1 92-23.2 92-63.4z\"/></svg>} href=\"https://github.com/squarecloudofc/sdk-api-js\">\n    Learn how to use the Square Cloud JavaScript SDK to interact with the Square Cloud API.\n  </Card>\n\n  <Card title=\"Python\" icon={<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"#2563eb\" d=\"M439.8 200.5c-7.7-30.9-22.3-54.2-53.4-54.2h-40.1v47.4c0 36.8-31.2 67.8-66.8 67.8H172.7c-29.2 0-53.4 25-53.4 54.3v101.8c0 29 25.2 46 53.4 54.3 33.8 9.9 66.3 11.7 106.8 0 26.9-7.8 53.4-23.5 53.4-54.3v-40.7H226.2v-13.6h160.2c31.1 0 42.6-21.7 53.4-54.2 11.2-33.5 10.7-65.7 0-108.6zM286.2 404c11.1 0 20.1 9.1 20.1 20.3 0 11.3-9 20.4-20.1 20.4-11 0-20.1-9.2-20.1-20.4.1-11.3 9.1-20.3 20.1-20.3zM167.8 248.1h106.8c29.7 0 53.4-24.5 53.4-54.3V91.9c0-29-24.4-50.7-53.4-55.6-35.8-5.9-74.7-5.6-106.8.1-45.2 8-53.4 24.7-53.4 55.6v40.7h106.9v13.6h-147c-31.1 0-58.3 18.7-66.8 54.2-9.8 40.7-10.2 66.1 0 108.6 7.6 31.6 25.7 54.2 56.8 54.2H101v-48.8c0-35.3 30.5-66.4 66.8-66.4zm-6.7-142.6c-11.1 0-20.1-9.1-20.1-20.3.1-11.3 9-20.4 20.1-20.4 11 0 20.1 9.2 20.1 20.4s-9 20.3-20.1 20.3z\"/></svg>} href=\"https://github.com/squarecloudofc/sdk-api-py\">\n    Learn how to use the Square Cloud Python SDK to interact with the Square Cloud API.\n  </Card>\n</CardGroup>\n\nSquare Cloud is constantly improving and developing SDKs in new languages. If you don't see your language here, please [let us know](https://go.squarecloud.app/github) and we'll add it to our roadmap.\n"
    },
    "services/blob": {
      "metadata": {
        "title": "Blob serverless storage",
        "description": "Discover the innovations and robustness of Square Cloud by exploring the serverless storage capabilities.",
        "sidebarIcon": "database"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<img src=\"/images/services/blob.png\" />\n\n<Note>Blob currently in beta. If you encounter any issues or have any feedback, please [contact us](/contact).</Note>\n\n**Square Cloud**, an advanced technological platform, stands out for providing comprehensive support for various types of solutions. This article delves into the features and capabilities of serverless storage on **Square Cloud**.\n\n## Features and Support\n\n<CardGroup cols={2}>\n  <Card title=\"No Ingress or Egress Fees\" icon=\"money-bill\">\n    Say goodbye to unexpected charges with ZERO fees for ingress and egress traffic. Whether you're uploading or retrieving data, there are no additional costs to worry about.\n  </Card>\n\n  <Card title=\"Zero Management Overhead\" icon=\"server\">\n    Simplify your workflow by eliminating the need for complex setup procedures. Just upload your assets, and Square Cloud takes care of the rest. Relax and focus on building your applications.\n  </Card>\n\n  <Card title=\"Built for Modern Application\" icon=\"terminal\">\n    Designed to seamlessly integrate with your applications, offering high-speed content delivery through a global content delivery network (CDN).\n  </Card>\n\n  <Card title=\"Redundant Storage\" icon=\"box\">\n    Your data is safeguarded with fast triple-replication and end-to-end encryption, ensuring its integrity and confidentiality at all times.\n  </Card>\n</CardGroup>\n\n## Pricing Model\n\nOur pricing is simple and predictable, with no hidden fees. You only pay for what you use, with no minimum fees or upfront commitments.\n\n| Included in ALL PLANS                            | **Usage-based**                                     |\n|--------------------------------------------------|-----------------------------------------------------|\n| Low latency                                      | Always Low latency                                  |\n| 1GB of storage included                          | Up to **1PB of storage**. (1GB/R$ 0.25)             |\n| 250 objects included                             | Up to **1 billion objects**. (250/R$ 0.50)          |\n| Up to 1 million requests/day for free. (UTC+0)   | Up to **1 billion requests/day for free**. (UTC+0)  |\n\n<Info>When your plan expires, actually nothing happens. Only in the next month, Square Cloud Blob Billing will be enabled.</Info>\n<Warning>All prices are in Brazilian Real (R$). To use Square Cloud Blob Storage, you need to have a valid account with a paid plan.</Warning>\n\n## Supported File Types\n\nSquare Cloud supports a wide range of file types, making it a versatile solution for various types of applications. Here's a list of the main file types supported by Square Cloud:\n\n| File Type   | Extensions                                                                   |\n|-------------|------------------------------------------------------------------------------|\n| Video       | .mp4, .mpeg, .webm, .flv, .m4v                                               |\n| Image       | .jpeg, .png, .apng, .tiff, .gif, .webp, .bmp, .svg, .ico, .cur, .heic, .heif |\n| Audio       | .mp3, .mp4, .wav, .ogg, .opus, .mpeg, .aac                                   |\n| Text        | .txt, .html, .css, .csv, .x-sql                                              |\n| Application | .xml, .sql, .x-sql, .sqlite3, .pdf, .json, .javascript, .p12                 |\n\n<Note> If you have a specific file type that you'd like to use with Square Cloud, please [contact us](/contact).</Note>\n\n## How to Host My Archive on Square Cloud?\n\n<Steps>\n  <Step title=\"Initial Setup\" icon=\"file\">\n    The first step to host your asset on **Square Cloud** is to upload your file into the [put endpoint](/blob-reference/endpoint/put). This endpoint allows you to upload your file to the serverless storage.\n  </Step>\n\n  <Step title=\"Access URL\" icon=\"globe\">\n    The second step is to access your file through the URL provided by the response of the previous step. This URL is the public link to your file, and you can use it to access your asset from anywhere.\n  </Step>\n</Steps>\n\n## Benchmarks\n\nWe've conducted extensive benchmarks to ensure that **Square Cloud** is the fastest and most reliable serverless storage solution. Here are some of the key findings from our benchmarks:\n\n- **Latency**: The average latency for receiving a file is ~20ms.\n- **Throughput**: The average throughput for a file is ~10-15Mybtes/s. (80-120mbps)\n- **Availability**: The average availability is 99.999999999% (11 9's). (powered by a S3 Design)\n\nIn Square Cloud tests, using our infrastructure, in [Tampa, Florida](/platform/overview#our-secure-infrastructure).<br />\nLatency is lower than 20ms, and throughput is higher than ~100MB/s.\n\nIn a expountaneous test, using a famous website testing tool ([check-host](https://check-host.net/check-report/16a4d450kafe)), we tested the latency of our serverless storage in 10 different locations.\n\n| Location \\[16a4d450kafe] | Latency (ms) |\n|-------------------------|--------------|\n| USA, Chicago\t\t\t  | 30\t\t     |\n| Netherlands, Amsterdam  | 32\t  \t\t |\n| Germany, Frankfurt\t  | 32\t\t \t |\n| France, Paris\t\t\t  | 32\t\t\t |\n| USA, Atlanta\t\t\t  | 32\t\t\t |\n| UK, Coventry\t\t\t  | 44\t \t\t |\n| Poland, Poznan\t\t  | 49\t\t\t |\n| Brazil, Sao Paulo\t\t  | 42\t\t\t |\n| Croatia, Sisak\t\t  | 55\t \t\t |\n| Spain, Barcelona\t\t  | 59\t\t\t |\n\nUsing higher file sizes, the latency increases, but the latency is still lower than 200ms in most locations. Thanks to our global content delivery network (CDN) provided by [Cloudflare](https://www.cloudflare.com/).\n\nIn a another test, we tested the speed of our serverless storage using [Bunny CDN Tool](https://bunny.net/).\n\n<Frame>\n  <img src=\"/images/services/blob-speed.png\" style={{ borderRadius: \"0.5rem\" }} />\n</Frame>\n\n<br />\n\n<Info>Benchmarks are not guaranteed. Remember that the latency and throughput may vary depending on your location, file size, and network conditions.</Info>\n<Warning>The **latency in Africa and some locations in Asia is higher**. We are working to improve the latency in these locations as soon as possible.</Warning>\n"
    },
    "services/bots": {
      "metadata": {
        "title": "Bot hosting",
        "description": "Discover the innovations and robustness of Square Cloud by exploring the bot hosting features and support provided by the platform.",
        "sidebarIcon": "robot"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<img src=\"/images/services/bots.png\" />\n\n**Square Cloud**, an advanced technological platform, stands out for providing comprehensive support for various types of bots. This article delves into the features and bot support offered by **Square Cloud**, highlighting how this platform excels in the current technological landscape.\n\n## Features and Support\n\n<CardGroup cols={1}>\n  <Card title=\"Any Platform Support\" icon=\"robot\">\n    **Square Cloud** sets itself apart by offering support for a wide range of popular platforms such as **Discord**, **Telegram**, **WhatsApp**, **Guilded**, **Slack**, **Messenger**, **Facebook**, and **Twitch**. This platform diversity allows developers to choose the one that best fits their target audience's needs, maximizing the reach and effectiveness of each bot. The flexibility offered by **Square Cloud** enables the creation of bots capable of interacting with users across various platforms, enhancing the accessibility and usefulness of your project.\n  </Card>\n\n  <Card title=\"Advanced Music Support\" icon=\"music\">\n    **Square Cloud** enhances the musical experience of bots by supporting **ffmpeg** and **Lavalink**. This combination enables the creation of engaging music bots capable of playing music directly on the server. **ffmpeg** is already provided by default on **Square Cloud**, making it easy to implement musical features in your bots.\n\n    This addition, coupled with the ability to support various music sources and formats, provides a rich and immersive experience for users. **Square Shield** ensures continuous availability of your bot, providing uninterrupted access to desired music. This functionality extends beyond music playback, allowing for meaningful interactions and enhancing the overall user experience.\n  </Card>\n\n  <Card title=\"Efficient Local Database\" icon=\"database\">\n    The file system of **Square Cloud** is designed to be fast and reliable, enabling efficient use of local databases. With this feature, it's possible to store large volumes of data directly in the bot, eliminating the need for external database services.\n\n    This approach simplifies the development process, making the bot more efficient and reliable when handling large data sets. Additionally, **Square Cloud** supports complex queries, enabling effective manipulation of locally stored data.\n  </Card>\n\n  <Card title=\"Dynamic Hosting\" icon=\"rocket\">\n    **Square Cloud** offers a dynamic and intelligent bot hosting service with a wide range of public IP addresses. This approach ensures quick adaptation to changes in network conditions, keeping the bot online and available at all times. The variety of IP addresses enables the bot to connect to servers anywhere in the world.\n\n    With **Square Cloud**, it's possible to create truly dynamic and resilient bots capable of quickly adapting to different situations. The platform also provides automatic scalability, dynamically adjusting resources according to demand, ensuring consistent performance even during usage peaks.\n  </Card>\n\n  <Card title=\"Optimized Bot Latency\" icon=\"bolt\">\n    The strategic location of **Square Cloud** in Tampa, Florida, provides exceptional connectivity for bots. With an average ping of only 20ms, **Square Cloud** ensures fast and efficient communication.\n\n    This enables quick responses from bots, providing a smooth and delay-free user experience, regardless of the user's location. This optimization is particularly crucial for gaming and music bots, where latency can significantly impact the user experience.\n  </Card>\n\n  <Card title=\"Efficient Image Storage\" icon=\"cloud\">\n    For bots that need to store a large number of images, **Square Cloud** offers the ideal solution with **Blob**, its own CDN. This platform allows easy storage of images, videos, and other file types, with organization features based on tags and expiration time.\n\n    Thus, it's possible to create visually rich bots capable of handling large volumes of images and enhancing the user experience. **Blob** also offers advanced features, ensuring fast loading of visual resources.\n  </Card>\n\n  <Card title=\"Advanced Security\" icon=\"shield\">\n    **Square Shield** provides an additional layer of security, creating a secure environment for bot users. Preventive systems ensure that bots hosted on **Square Cloud** do not exceed API request limits.\n\n    Additionally, real-time monitoring keeps the application active and functioning excellently. With **Square Cloud**, you can trust the security of your bot, allowing you to focus on enhancing the project without worries about security issues. The platform also supports multi-factor authentication, providing additional protection against unauthorized access.\n  </Card>\n\n  <Card title=\"Automatic Deployment via Git\" icon=\"code\">\n    **Square Cloud** offers the ability to manage automatic deployments of your application, with support for integration with GitHub and GitLab via Webhooks. This functionality simplifies the process of updating the bot, allowing developers to focus on programming while **Square Cloud** handles the deployment process.\n\n    Details on the configuration are available [here](https://docs.squarecloud.app/tutorials/how-to-set-up-git-integration). After following the steps correctly, simply commit to your repository to update your application on **Square Cloud**. Recent deployments can be viewed in the Deploy tab of the dashboard. If you have any questions, feel free to [contact us](https://squarecloud.app/dashboard/support).\n  </Card>\n\n  <Card title=\"Premium Routes\" icon=\"star\">\n    **Square Cloud** stands out in the market by offering a network with premium routes to key communication hubs, such as **WhatsApp**, **Telegram**, and **Discord**. This ensures efficient and high-quality communication for your application, regardless of the preferred platform of your users.\n\n    These premium routes guarantee that your application has the best possible connectivity, minimizing latency and maximizing data transmission speed. This is especially important for applications that rely on real-time communication, such as chat bots.\n\n    Furthermore, by supporting a variety of popular platforms, **Square Cloud** allows you to reach your target audience where they are most comfortable. This can lead to higher user adoption and a better user experience.\n\n    In summary, **Square Cloud's** premium routes for communication hubs like **WhatsApp**, **Telegram**, and **Discord** allow you to provide your users with a high-quality app experience, regardless of the platform they choose to use.\n  </Card>\n</CardGroup>\n\n## Supported Languages\n\nSquare Cloud caters to a diverse range of programming languages, empowering developers to choose the most suitable technology for their projects. Here's a brief overview of the main supported languages:\n\n<CardGroup cols={3}>\n  <Card title=\"Node.js\" icon=\"node-js\" href=\"https://docs.squarecloud.app/articles/getting-started-with-nodejs\">\n    Ideal for dynamic web development.\n  </Card>\n\n  <Card title=\"Python\" icon=\"python\" href=\"https://docs.squarecloud.app/articles/getting-started-with-python\">\n    Widely used in AI, automation, and web development.\n  </Card>\n\n  <Card title=\"Java\" icon=\"java\" href=\"https://docs.squarecloud.app/articles/getting-started-with-java\">\n    Portable and efficient for enterprise applications.\n  </Card>\n\n  <Card title=\"Elixir\" icon=\"droplet\" href=\"https://docs.squarecloud.app/articles/getting-started-with-elixir\">\n    Excels in distributed systems and concurrent applications.\n  </Card>\n\n  <Card title=\"Rust\" icon=\"rust\" href=\"https://docs.squarecloud.app/articles/getting-started-with-rust\">\n    Focused on security and performance, ideal for low-level systems.\n  </Card>\n\n  <Card title=\"PHP\" icon=\"php\" href=\"https://docs.squarecloud.app/articles/getting-started-with-php\">\n    A popular choice for server-side scripting and web development.\n  </Card>\n\n  <Card title=\"Go\" icon=\"golang\" href=\"https://docs.squarecloud.app/articles/getting-started-with-go\">\n    Recognized for efficiency in production environments.\n  </Card>\n\n  <Card title=\"C#\" icon=\"c\" href=\"https://docs.squarecloud.app/articles/getting-started-with-csharp\">\n    Versatile and powerful, ideal for Windows applications and game development.\n  </Card>\n</CardGroup>\n\n## How to Host My Bot on Square Cloud?\n\n<Steps>\n  <Step title=\"Configuration File\" icon=\"file\">\n    The first step to host your bot on **Square Cloud** is to create a detailed configuration file. This file is not just a simple text document but a comprehensive guide that defines the settings for the application on **Square Cloud**. It functions as an architectural plan for your project on the platform.\n\n    Once the plan is acquired, you need to create this file, detailing each configuration and filling it out correctly. Details on how to create this file are available [here](https://docs.squarecloud.app/getting-started/config-file), with a step-by-step guide.\n  </Step>\n\n  <Step title=\"ZIP File Creation\" icon=\"file-zip\">\n    With the configuration file ready, the next step is to prepare your application for upload. This involves placing the application files and the **Square Cloud** configuration file inside a .zip file.\n\n    However, not all files need to be included in this .zip. Files such as `node_modules`, `package-lock.json`, `pyproject.toml`, and `poetry.lock` are not necessary, as they can be generated automatically on the server side. A list of files that do not need to be uploaded is available [here](https://docs.squarecloud.app/faqs/automatic-deletion-files-when-deploying-an-application-to-squarecloud), helping ensure that only necessary files are in the .zip, making the upload process faster and smoother.\n  </Step>\n\n  <Step title=\"Dependencies File\" icon=\"box\">\n    Another crucial aspect is to include the dependencies file in the .zip. This file informs the **Square Cloud** platform which dependencies to install for your project. For a Node.js project, this file is the `package.json`, and for a Python project, it's the `requirements.txt`.\n\n    These files list the libraries and packages required for the correct operation of the application. Keeping these files up-to-date is crucial to avoid installation errors. Additionally, it's important to note that native dependencies, such as `node-fetch` in Node.js and `random` in Python, should not be included in these files, as they are native libraries.\n  </Step>\n\n  <Step title=\"Bot Upload\" icon=\"arrow-up\">\n    After following all the steps and configuring your project for **Square Cloud**, it's time to upload your bot. Access the upload page on the **Square Cloud** website and submit your .zip file [here](https://squarecloud.app/dashboard/upload).\n\n    The process is simple: select your .zip file and click the upload button. The **Square Cloud** platform will initiate the deployment process, installing the necessary dependencies and configuring the environment based on the configuration file.\n  </Step>\n\n  <Step title=\"Common Errors During Application Deployment\" icon=\"x\">\n    <Warning>Even with careful preparation, some errors may occur during the application deployment process. Below are some common errors and how to resolve them. If you encounter an error not listed here, feel free to [contact our team](https://squarecloud.app/dashboard/support). We are always ready to help troubleshoot and resolve any issues that may arise during the deployment process. Remember, the goal is to successfully host your bot on **Square Cloud**, and we are here to help you achieve that.</Warning>\n\n    <AccordionGroup>\n      <Accordion title=\"INVALID_DEPENDENCY\" icon=\"box\">\n        This error occurs when the dependency file is missing in your .zip. If your application is in JS, we have an article guiding you in the step-by-step creation of the `package.json` [here](https://docs.squarecloud.app/articles/how-to-create-your-package-json), and for Python, it's the `requirements.txt` [here](https://docs.squarecloud.app/articles/how-to-create-your-requirements).\n      </Accordion>\n\n      <Accordion title=\"FEW_MEMORY\" icon=\"memory\">\n        This error occurs when you incorrectly configure the RAM in the configuration file or provide more RAM than is available, or less than the minimum required for the type of application, which is 256MB for bots.\n      </Accordion>\n\n      <Accordion title=\"INVALID_MAIN\" icon=\"file-code\">\n        This error occurs when the file defined as \"main\" for your application in the configuration file does not exist, is written incorrectly, or the path is incorrect. If your main file is inside a folder, for example, you should enter `folder/file.js`.\n      </Accordion>\n\n      <Accordion title=\"MISSING_CONFIG\" icon=\"file-signature\">\n        This error occurs when the configuration file is not present in your **.zip**, is not in the root, or has the incorrect format. Make sure the configuration file is in the `.app` or `.config` format; also, enable file extension visibility on your computer to check for a duplicate extension.\n      </Accordion>\n\n      <Accordion title=\"MISSING_MEMORY\" icon=\"memory\">\n        This error occurs when the configuration file does not have the **MEMORY** field where the total amount of RAM available for your application is defined.\n      </Accordion>\n\n      <Accordion title=\"INVALID_DISPLAY_NAME\" icon=\"file\">\n        This error occurs when the configuration file does not have the **DISPLAY\\_NAME** field where the display name of the application is defined with a **32-character** limit.\n      </Accordion>\n\n      <Accordion title=\"FAILED_UPLOAD\" icon=\"x\">\n        This error is usually caused by an issue with the **zip** file. Check if the **.zip** file was created correctly and is not password-protected. If the **zip** file is password-protected, you will need to remove the password from the **zip.** If the file was created correctly and is not password-protected, but you still receive this error, it may be that the file is corrupted. In that case, you can try creating a new zip file and see if that resolves the issue.\n      </Accordion>\n    </AccordionGroup>\n  </Step>\n</Steps>\n"
    },
    "services/sites": {
      "metadata": {
        "title": "Website hosting",
        "description": "Discover the innovations and robustness of Square Cloud by exploring the website hosting features and support provided by the platform.",
        "sidebarIcon": "globe"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<img src=\"/images/services/sites.png\" />\n\n**Square Cloud**, an advanced technological platform, stands out for providing comprehensive support for various types of frameworks. This article delves into the features and website support offered by **Square Cloud**, highlighting how this platform excels in the current technological landscape.\n\n## Features and Support\n\n<CardGroup cols={1}>\n  <Card title=\"Domain Configuration\" icon=\"globe\" href=\"https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain\">\n    The first step to elevate your website with Square Cloud is to configure your custom domain. This process involves linking your domain to the Square Cloud platform, allowing for seamless integration. Detailed instructions on configuring your domain are available [here](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain), offering a step-by-step guide for a hassle-free setup.\n  </Card>\n\n  <Card title=\"Fast DNS\" icon=\"bolt\">\n    We provide the opportunity for you to utilize your own domain, enhancing your online presence with a more professional and personalized touch.\n  </Card>\n\n  <Card title=\"Cloudflare Premium Integration\" icon=\"link\">\n    Maximize the benefits of your website hosting by seamlessly integrating Cloudflare Premium with Square Cloud. This collaboration delivers a powerful combination of advanced security, improved performance, and global content delivery.\n  </Card>\n\n  <Card title=\"WAF Configuration\" icon=\"shield-check\">\n    Our cutting-edge firewall system is dedicated to ensuring the utmost security for your website. By robustly defending against malicious attacks and thwarting unauthorized access attempts, we prioritize the protection of your online presence.\n  </Card>\n</CardGroup>\n\nIn conclusion, Square Cloud offers a comprehensive suite of features and support to ensure your website is not only hosted efficiently but also fortified against the challenges of the digital landscape. Elevate your online presence with Square Cloud hosting and experience the innovation and robustness that define this advanced technological platform.\n\n## Supported Languages\n\nSquare Cloud caters to a diverse range of programming languages, empowering developers to choose the most suitable technology for their projects. Here's a brief overview of the main supported languages:\n\n<CardGroup cols={3}>\n  <Card title=\"Node.js\" icon=\"node-js\" href=\"https://docs.squarecloud.app/articles/getting-started-with-nodejs\">\n    Ideal for dynamic web development.\n  </Card>\n\n  <Card title=\"Python\" icon=\"python\" href=\"https://docs.squarecloud.app/articles/getting-started-with-python\">\n    Widely used in AI, automation, and web development.\n  </Card>\n\n  <Card title=\"Java\" icon=\"java\" href=\"https://docs.squarecloud.app/articles/getting-started-with-java\">\n    Portable and efficient for enterprise applications.\n  </Card>\n\n  <Card title=\"Elixir\" icon=\"droplet\" href=\"https://docs.squarecloud.app/articles/getting-started-with-elixir\">\n    Excels in distributed systems and concurrent applications.\n  </Card>\n\n  <Card title=\"Rust\" icon=\"rust\" href=\"https://docs.squarecloud.app/articles/getting-started-with-rust\">\n    Focused on security and performance, ideal for low-level systems.\n  </Card>\n\n  <Card title=\"PHP\" icon=\"php\" href=\"https://docs.squarecloud.app/articles/getting-started-with-php\">\n    A popular choice for server-side scripting and web development.\n  </Card>\n\n  <Card title=\"Go\" icon=\"golang\" href=\"https://docs.squarecloud.app/articles/getting-started-with-go\">\n    Recognized for efficiency in production environments.\n  </Card>\n\n  <Card title=\"HTML/CSS\" icon=\"html5\">\n    Perfect for static websites, offering simplicity and reliability.\n  </Card>\n\n  <Card title=\"C#\" icon=\"c\" href=\"https://docs.squarecloud.app/articles/getting-started-with-csharp\">\n    Versatile and powerful, ideal for Windows applications and game development.\n  </Card>\n</CardGroup>\n\nLeverage Square Cloud's language diversity to build innovative, efficient web applications, ensuring flexibility and adaptability in your development projects.\n\n## How to Host My Website on Square Cloud?\n\n<Steps>\n  <Step title=\"Configuration File\" icon=\"file\">\n    The first step to host your website on **Square Cloud** is to create a detailed configuration file. This file is not just a simple text document but a comprehensive guide that defines the settings for the application on **Square Cloud**. It functions as an architectural plan for your project on the platform.\n\n    Once the plan is acquired, you need to create this file, detailing each configuration and filling it out correctly. Details on how to create this file are available [here](https://docs.squarecloud.app/getting-started/config-file), with a step-by-step guide.\n    Remember to include the following fields in the configuration file:\n\n    - **SUBDOMAIN**: The subdomain of your website.<br />\n      Example: `SUBDOMAIN: test` (test.squareweb.app)\n    - **MEMORY**: The amount of RAM, with a **minimum of 512MB**.<br />\n  </Step>\n\n  <Step title=\"ZIP File Creation\" icon=\"file-zip\">\n    With the configuration file ready, the next step is to prepare your application for upload. This involves placing the application files and the **Square Cloud** configuration file inside a .zip file.\n\n    However, not all files need to be included in this .zip. Files such as `node_modules`, `package-lock.json`, `pyproject.toml`, `poetry.lock`, `__pycache__`, and `poetry.lock` are not necessary, as they can be generated automatically on the server side. A list of files that do not need to be uploaded is available [here](https://docs.squarecloud.app/faqs/automatic-deletion-files-when-deploying-an-application-to-squarecloud), helping ensure that only necessary files are in the .zip, making the upload process faster and smoother.\n  </Step>\n\n  <Step title=\"Dependencies File\" icon=\"box\">\n    Another crucial aspect is to include the dependencies file in the .zip. This file informs the **Square Cloud** platform which dependencies to install for your project. For a Node.js project, this file is the `package.json`, and for a Python project, it's the `requirements.txt`.\n\n    These files list the libraries and packages required for the correct operation of the application. Keeping these files up-to-date is crucial to avoid installation errors. Additionally, it's important to note that native dependencies, such as `node-fetch` in Node.js and `random` in Python, should not be included in these files, as they are native libraries.\n  </Step>\n\n  <Step title=\"Website Upload\" icon=\"arrow-up\">\n    <Tip>If you can define a `port` in your code or in `START` parameter, always set `port 80`. The only exception is when hosting a Lavalink Server, see more [here](https://docs.squarecloud.app/tutorials/how-to-create-your-lavalink-server).</Tip>\n    After following all the steps and configuring your project for **Square Cloud**, it's time to upload your website. Access the upload page on the **Square Cloud** website and submit your .zip file [here](https://squarecloud.app/dashboard/upload).\n\n    The process is simple: select your .zip file and click the upload button. The **Square Cloud** platform will initiate the deployment process, installing the necessary dependencies and configuring the environment based on the configuration file.\n  </Step>\n\n  <Step title=\"Common Errors During Application Deployment\" icon=\"x\">\n    <Warning>Even with careful preparation, some errors may occur during the application deployment process. Below are some common errors and how to resolve them. If you encounter an error not listed here, feel free to [contact our team](https://squarecloud.app/dashboard/support). We are always ready to help troubleshoot and resolve any issues that may arise during the deployment process. Remember, the goal is to successfully host your website on **Square Cloud**, and we are here to help you achieve that.</Warning>\n\n    <AccordionGroup>\n      <Accordion title=\"INVALID_DEPENDENCY\" icon=\"box\">\n        This error occurs when the dependency file is missing in your .zip. If your application is in JS, we have an article guiding you in the step-by-step creation of the `package.json` [here](https://docs.squarecloud.app/articles/how-to-create-your-package-json), and for Python, it's the `requirements.txt` [here](https://docs.squarecloud.app/articles/how-to-create-your-requirements).\n      </Accordion>\n\n      <Accordion title=\"FEW_MEMORY\" icon=\"memory\">\n        This error occurs when you incorrectly configure the RAM in the configuration file or provide more RAM than is available, or less than the minimum required for the type of application, which is 512MB for websites.\n      </Accordion>\n\n      <Accordion title=\"INVALID_MAIN\" icon=\"file-code\">\n        This error occurs when the file defined as \"main\" for your application in the configuration file does not exist, is written incorrectly, or the path is incorrect. If your main file is inside a folder, for example, you should enter `folder/file.js`.\n      </Accordion>\n\n      <Accordion title=\"MISSING_CONFIG\" icon=\"file-signature\">\n        This error occurs when the configuration file is not present in your **.zip**, is not in the root, or has the incorrect format. Make sure the configuration file is in the `.app` or `.config` format; also, enable file extension visibility on your computer to check for a duplicate extension.\n      </Accordion>\n\n      <Accordion title=\"MISSING_MEMORY\" icon=\"memory\">\n        This error occurs when the configuration file does not have the **MEMORY** field where the total amount of RAM available for your application is defined.\n      </Accordion>\n\n      <Accordion title=\"INVALID_DISPLAY_NAME\" icon=\"file\">\n        This error occurs when the configuration file does not have the **DISPLAY\\_NAME** field where the display name of the application is defined with a **32-character** limit.\n      </Accordion>\n\n      <Accordion title=\"INVALID_START\" icon=\"terminal\">\n        This error occurs when the configuration file for your website does not have the **START** field or is written incorrectly. It is used to execute custom commands on your website.\n      </Accordion>\n\n      <Accordion title=\"FAILED_UPLOAD\" icon=\"x\">\n        This error is usually caused by an issue with the **zip** file. Check if the **.zip** file was created correctly and is not password-protected. If the **zip** file is password-protected, you will need to remove the password from the **zip.** If the file was created correctly and is not password-protected, but you still receive this error, it may be that the file is corrupted. In that case, you can try creating a new zip file and see if that resolves the issue.\n      </Accordion>\n    </AccordionGroup>\n  </Step>\n</Steps>\n"
    },
    "tutorials/como-criar-um-servidor-lavalink": {
      "metadata": {
        "title": "Como criar seu servidor Lavalink",
        "description": "Aprenda a hospedar seu servidor Lavalink e transmitir m√∫sica de alta qualidade para o seu bot do Discord."
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introdu√ß√£o\n\nSiga o tutorial abaixo e hospede seu servidor Lavalink hoje mesmo, √© super simples! Se precisar de assist√™ncia, n√£o hesite em entrar em contato conosco por meio de nossos canais de suporte oficiais.\n\n## Escolhendo a Vers√£o\n\nEscolha a vers√£o desejada do `Lavalink` clicando [aqui](https://github.com/freyacodes/Lavalink/releases/). Recomendamos selecionar a vers√£o mais recente para a melhor experi√™ncia.\n\n## Criando o Arquivo de Configura√ß√£o squarecloud.app\n\nPara come√ßar, crie seu arquivo de configura√ß√£o [squarecloud.app](./como-criar-seu-arquivo-de-configuracao-squarecloud) na pasta raiz do seu projeto.\n\n## Criando o application.yml\n\nCrie um arquivo de configura√ß√£o para o seu servidor Lavalink. Voc√™ pode acessar um arquivo de exemplo [aqui](https://github.com/freyacodes/Lavalink/blob/master/LavalinkServer/application.yml.example).\n\n<Warning>Defina o campo `port` em seu arquivo `application.yml` para: `80`.</Warning>\n\n## Refor√ßando a Seguran√ßa\n\n√â altamente recomend√°vel configurar uma senha segura no campo `password` do seu arquivo de configura√ß√£o (application.yml). Recomendamos o uso de uma senha com pelo menos 32 caracteres.\n\n<Note>√â importante lembrar que voc√™ deve usar a porta 443 (SSL) e a op√ß√£o `secure` em `true` para se conectar ao seu lavalink.</Note>\n\n## Enviando para o Square Cloud\n\nCrie um arquivo compactado (.zip) contendo o Lavalink.jar e o application.yml. Em seguida, fa√ßa o upload do seu arquivo de configura√ß√£o para o Square Cloud.\n\nSeguindo esses passos, voc√™ ter√° seu servidor Lavalink funcionando sem problemas no Square Cloud. Se encontrar algum problema ou precisar de assist√™ncia adicional, n√£o hesite em entrar em contato com nossa [equipe de suporte](../company/support).\n\nEste artigo foi traduzido por [Square Cloud](https://squarecloud.app) e pode estar desatualizado, recomendamos sempre conferir a vers√£o original dele em ingl√™s clicando [aqui](./getting-started/config-file).\n"
    },
    "tutorials/como-hospedar-seu-website": {
      "metadata": {
        "title": "Hospedando seu Site ou API na Square Cloud",
        "description": "Saiba como hospedar seu site ou API na Square Cloud usando o arquivo de configura√ß√£o squarecloud.app.",
        "sidebarTitle": "Como implantar seu Site ou API"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introdu√ß√£o\n\nHospedar seu site ou API na Square Cloud √© muito simples com o arquivo de configura√ß√£o squarecloud.app. Este arquivo permite personalizar e configurar sua aplica√ß√£o com par√¢metros essenciais, como o arquivo principal, aloca√ß√£o de mem√≥ria, vers√£o, nome de exibi√ß√£o e muito mais.\n\n## Criando o Arquivo de Configura√ß√£o squarecloud.app\n\nPara come√ßar, crie seu arquivo de configura√ß√£o [squarecloud.app](./como-criar-seu-arquivo-de-configuracao-squarecloud) na pasta raiz do seu projeto.\n\n### Par√¢metros importantes para websites\n\nA **porta do site** precisa ser **80**; se voc√™ estiver usando um site est√°tico, n√£o precisa definir o par√¢metro `START`.\n\nNo arquivo de configura√ß√£o squarecloud.app:\n\n- `SUBDOMAIN`: Se voc√™ estiver hospedando um site, defina este par√¢metro como o subdom√≠nio desejado.\n- `START`: Um comando de inicializa√ß√£o personalizado (se necess√°rio).\n\n<Note>O URL do site ser√°: `seu-par√¢metro-de-subdom√≠nio`.squareweb.app</Note>\n\n```systemd Este exemplo hospeda um site sem comando de inicializa√ß√£o personalizado\nMAIN=index.html\nMEMORY=512\nVERSION=recommended\nDISPLAY_NAME=Meu site est√°tico simples!\nSUBDOMAIN=meusite-site-simples\n```\n\n```systemd Este exemplo usa todos os par√¢metros e comandos de inicializa√ß√£o personalizados em um site\nMAIN=index.js\nMEMORY=512\nVERSION=recommended\nDISPLAY_NAME=Meu site nextjs simples!\nSUBDOMAIN=meusite-site-nextjs\nSTART=npm run build && npm run start\n```\n\nSeguindo esses passos, voc√™ ter√° seu site ou API funcionando sem problemas na Square Cloud. Se encontrar algum problema ou precisar de assist√™ncia adicional, n√£o hesite em entrar em contato com nossa [equipe de suporte](../company/support).\n\nEste artigo foi traduzido por [Square Cloud](https://squarecloud.app) e pode estar desatualizado, recomendamos sempre conferir a vers√£o original dele em ingl√™s clicando [aqui](/getting-started/config-file).\n"
    },
    "tutorials/how-to-create-your-lavalink-server": {
      "metadata": {
        "title": "How to create your Lavalink Server",
        "description": "Learn how to host your Lavalink server and stream high-quality music to your Discord bot.",
        "sidebarTitle": "Lavalink Server"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introduction üöÄ\n\n- Follow the tutorial below and host your Lavalink server today it\"s super simple! If you need any assistance, feel free to reach out to us through our official support channels.\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email, to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n## Choosing the Version\n\nChoose your desired version of `Lavalink` by clicking [here](https://github.com/freyacodes/Lavalink/releases/). We recommend selecting the latest version for the best experience.\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Creating the application.yml\n\nCreate a configuration file for your Lavalink server. You can access an example file [here](https://github.com/freyacodes/Lavalink/blob/master/LavalinkServer/application.yml.example).\n\n<Warning>Set the `port` field in your `application.yml` file to: `80`.</Warning>\n\n## Enhancing Security\n\nIt is highly recommended to configure a secure password in the `password` field of your configuration file (application.yml). We recommend using a password with at least 32 characters.\n\n<Note>It is important to remember that you must use port 443 (SSL) and the `secure` option in `true` to connect to your lavalink.</Note>\n\n## Uploading Project to Square Cloud\n\nCreate a compressed file (.zip) containing the `Lavalink.jar` and `application.yml`. Then, upload your configuration file to Square Cloud.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login \n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you need to execute the following command, passing the path of your zip file:\n\n        ```bash\n        squarecloud upload server.zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/how-to-deploy-your-discord-bot": {
      "metadata": {
        "title": "Hosting a Discord Bot on Square Cloud",
        "description": "This article guides you through creating and hosting a Discord bot on Square Cloud.",
        "sidebarTitle": "Discord bot"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introduction\n\n- Before you start coding, you need to set up your bot properly on Discord. First, it's necessary to have a Discord account. If you don't have one yet, you can create one by visiting the [official Discord website](https://discord.com/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n<AccordionGroup>\n  <Accordion title=\"Getting Started\" icon=\"rocket\" iconType=\"solid\">\n    First, go to the [Developer Portal](https://discord.com/developers/applications) and click on \"New Application\". Next, you will need to choose a name for your bot and click on \"Create\" to create it.\n\n    <Frame>\n      <img src=\"/images/articles/discord/getting-started.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Getting the Token\" icon=\"key\" iconType=\"solid\">\n    After creating your bot, it's time to get the token. To do this, you should go to the \"Bot\" tab and click on \"Reset Token\", thus generating your token. Finally, just copy it to use it in your code later.\n\n    <Frame>\n      <img src=\"/images/articles/discord/getting-the-token.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Activating Privileged Intents\" icon=\"message\" iconType=\"solid\">\n    Now that you already have your bot's token, you need to activate the necessary intents. To do this, you should still be in the \"Bot\" tab, scroll down and look for \"Privileged Gateway Intents\". Here, you should activate the following intents:\n\n    <Frame>\n      <img src=\"/images/articles/discord/intent.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n<Warning>Remember to keep your bot's token secret as it can be used to control your bot.</Warning>\n\n# Using wrappers for bot creation\n\n<Tabs>\n  <Tab title=\"Discord.js\">\n    1. Ensure you have Node.js installed on your system. If not, you can download it from the [official Node.js website](https://nodejs.org/).\n    2. Initialize a new Node.js project using `npm init`. This will create a new `package.json` file for your project:\n\n    ```bash\n    npm init -y\n    ```\n\n    3. Install the discord.js library using npm:\n\n    ```bash\n    npm install discord.js\n    ```\n\n    4. Create a new JavaScript file (e.g., `index.js`) and add the following code to create a basic Discord bot:\n\n    ```javascript index.js\n    const { Client, GatewayIntentBits } = require(\"discord.js\");\n\n    const client = new Client({\n      intents: [\n        GatewayIntentBits.Guilds,\n        GatewayIntentBits.GuildMessages,\n        GatewayIntentBits.MessageContent,\n      ],\n    });\n\n    client.on(\"ready\", () => {\n      console.log(`${client.user.tag}!`);\n    });\n\n    client.on(\"messageCreate\", (message) => {\n      if (message.content === \"!hello\") {\n        message.reply(\"Hello!\");\n      }\n    });\n\n    client.login(\"your token here\");\n    ```\n  </Tab>\n\n  <Tab title=\"Discord.py\">\n    1. Ensure you have Python installed on your system. If not, you can download it from the [official Python website](https://www.python.org/).\n    2. Install the discord.py library using pip:\n\n    ```bash\n    pip install discord.py\n    ```\n\n    3. Create a new Python file (e.g., `main.py`) and add the following code to create a basic Discord bot:\n\n    ```python main.py\n    import discord\n    from discord.ext import commands\n\n    intents = discord.Intents.default()\n    intents.message_content = True\n\n    client = commands.Bot(command_prefix='!', intents=intents)\n\n    @client.event\n    async def on_ready():\n        print(f'{client.user}')\n\n    @client.command()\n    async def hello(ctx):\n        await ctx.reply('Hello!')\n\n    client.run('your token here')\n    ```\n\n    4. Create a `requirements.txt` file to list all external libraries needed for your project:\n\n    ```txt requirements.txt\n    discord.py\n    ```\n  </Tab>\n</Tabs>\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\n<Warning>Only use this field if you are really sure about what you are doing.</Warning>\n\nIn the Square Cloud configuration file, the **START** field is optional and only needed if you are using a custom script to start the bot. In the provided example, the **START** field is not necessary.\n\n## Uploading your project to Square Cloud\n\nAfter following all the steps, package your application files into a zip file where the configuration file is and upload the bot at [Upload](https://squarecloud.app/dashboard/upload). Remember to include the `requirements.txt` or `package.json` file, but do not include files like `__pycache__` or `node_modules`. You can get more information about unnecessary files when hosting at [automatic-file-deletion-when-deploying-an-application-on-squarecloud](https://docs.squarecloud.app/faqs/automatic-file-deletion-when-deploying-an-application-on-squarecloud).\n\n## Testing the Bot\n\nIf you've done everything correctly, the next step is to invite your bot for testing. To do this, follow these steps:\n\n1. Access the [Developer Portal](https://discord.com/developers/applications).\n2. Select your bot.\n3. Navigate to the \"OAuth2\" tab.\n4. Go to \"OAuth2 URL Generator\".\n5. Check the \"bot\" option.\n6. Choose the permissions your bot will have if it's invited using this invite.\n7. Below the permissions, an invite link for your bot will be generated. It should look something like this:\n\n```txt\nhttps://discord.com/oauth2/authorize?client_id=00000000000000&permissions=8&scope=bot\n```\n\nRemember, the `client_id` in the URL should be replaced with your bot's actual client ID. The `permissions` value may also need to be adjusted based on the permissions you want your bot to have.\n\nNow, to test if everything is working, execute the following command on your server: `!hello`.\n\n<Frame>\n  <img src=\"/images/articles/discord/testing-bot.png\" style={{ borderRadius: \"0.2rem\" }} />\n</Frame>\n\n## Additional Resources\n\nFor more information on creating bots with discord.py and discord.js, visit the [official discord.py documentation](https://discordpy.readthedocs.io/en/latest/) and the [official discord.js guide](https://discordjs.guide/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of these libraries.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/how-to-deploy-your-django-application": {
      "metadata": {
        "title": "Hosting a Django Application on Square Cloud",
        "description": "This article guides you on creating and hosting a Django application on Square Cloud.",
        "sidebarTitle": "Django application"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Creating a New Django Project\n\n- Before getting started, make sure you have Python and pip installed on your system. If you don't already have them, you can download them from the [official Python website](https://www.python.org/) and [official Pip website](https://pypi.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\nWith Python and pip installed, you can create a new Django project. First, install Django using pip:\n\n```bash\npip install django\n```\n\nThen, create a new Python file (e.g., `app.py`) and add the following code to create a basic Django application:\n\n```python app.py\nfrom django.conf import settings\nfrom django.http import HttpResponse\nfrom django.urls import path\nfrom django.core.wsgi import get_wsgi_application\n\n# Basic Django settings\nsettings.configure(\n    DEBUG=False,  # Turn off debug mode\n    SECRET_KEY='mysecretkey',  # Set your secret key\n    ALLOWED_HOSTS=['*'],  # Allow all hosts for simplicity\n    ROOT_URLCONF=__name__,  # Set the root URL configuration to this module\n    MIDDLEWARE_CLASSES=(),  # Use an empty tuple to disable middleware\n)\n\n# Simple view\ndef index(request):\n    return HttpResponse(\"Hello world!\")  # Return a simple HTTP response\n\n# URL configuration\nurlpatterns = [\n    path('', index),  # Map the root URL to the index view\n]\n\n# WSGI application\napplication = get_wsgi_application()\n\n# WSGI server\nif __name__ == \"__main__\":\n    from wsgiref.simple_server import make_server\n    httpd = make_server('', 80, application)  # Serve the application using the WSGI server on port 80\n    print(\"Django server running on port 80...\")\n    httpd.serve_forever()  # Start the server\n```\n\nIn the above code, we create a basic route that returns \"Hello, World!\" when accessed. The application is configured to run on port 80, which is the default port for HTTP traffic.\n\n## Managing Dependencies with the requirements.txt file\n\nThe `requirements.txt` file is a file that lists all external libraries required for your project. You should list all libraries your project will use, excluding native libraries like `random` and `datetime`. This file should be included when submitting your application to Square Cloud.\n\n```txt requirements.txt\ndjango\n```\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the **START** field is optional and is only necessary if you are using a custom script to start the website. In the example provided, the **START** field is not necessary.\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans [here](https://squarecloud.app/plans).\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host a Django application?** Don't worry, we're here to help. Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design. It's built by experienced developers and takes care of much of the hassle of web development, so you can focus on writing your app without needing to reinvent the wheel. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most Django applications. However, if you're working on a larger project and seeking extra stability, we recommend considering our Pro plan. With additional resources, you can maintain stability even during peak demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your application hosted on Square Cloud, note that by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer to use a custom domain, such as `mysite.com`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to Set Up Your Custom Domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website or API is 512MB. However, depending on the size and complexity of your Django application, it may be advisable to use a larger amount of RAM to avoid the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporary Access Denied\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" when trying to access the site, please wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your application. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about Django and its tools, visit the [official Django documentation](https://docs.djangoproject.com/en/5.0/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most out of Django.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/how-to-deploy-your-express-application": {
      "metadata": {
        "title": "Hosting an Express Application on Square Cloud",
        "description": "This article guides you on creating and hosting an Express app on Square Cloud",
        "sidebarTitle": "Express application"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introduction\n\n- Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n### Setting up Express\n\nTo use Express, you need to install it on your system. Run the following command:\n\n```bash\nnpm install express\n```\n\nThis command installs the `express` package on your system, which allows you to use Express in your terminal.\n\n### Creating an Express Project\n\nTo create a new Express project, you can start by creating a new file and writing the following code:\n\n```javascript app.js\n// Importing the Express module\nconst express = require('express');\n\n// Creating a new Express application\nconst app = express();\n\n// Setting the port to 80\n// Port 80 is the default port for HTTP traffic.\nconst port = 80;\n\n// Defining a route handler for the route '/'\n// This route handler sends 'Hello World!' when accessed.\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\n// Making our Express application listen on port 80\napp.listen(port, () => {\n  // This block of code will run once the server is listening on port 80\n  console.log(`Example app listening on port ${port}`);\n});\n```\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the **START** field is optional and is only necessary if you are using a custom script to start the website or API. In the example provided, the **START** field is not necessary.\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans [here](https://squarecloud.app/plans).\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host an Express application?** Don't worry, we're here to help. Express.js is a framework for Node.js that provides minimal features for web server construction. It's easy to learn, highly flexible, and suitable for a wide range of applications, making it a great choice for web development. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most Express applications. However, if you're working on a larger project or need more stability, we recommend considering our Pro plan. With additional resources, you can ensure smooth performance even under high demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your app hosted on Square Cloud, note that by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer using a custom domain, such as `mysite.com`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to set up your custom domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website or API is 512MB. However, depending on the size and complexity of your Express application, it may be advisable to use a larger amount of RAM to avoid the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporarily Denied Access\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" when trying to access the site, wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your application. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about Express and its tools, visit the [official Express documentation](https://expressjs.com/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of Express.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/how-to-deploy-your-fastify-application": {
      "metadata": {
        "title": "Hosting a Fastify Application on Square Cloud",
        "description": "This article guides you on creating and hosting a Fastify app on Square Cloud",
        "sidebarTitle": "Fastify Application"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introduction\n\n- Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n### Setting up Fastify\n\nTo use Fastify, you need to install it on your system. Run the following command:\n\n```bash\nnpm install fastify\n```\n\nThis command installs the `fastify` package on your system, which allows you to use Fastify in your terminal.\n\n### Creating a Fastify Project\n\nTo create a new Fastify project, you can start by creating a new file and writing the following code:\n\n```javascript app.js\n// Importing the Fastify module\nconst fastify = require('fastify')({ logger: true });\n\n// Defining a route handler for the route '/'\n// This route handler sends 'Hello, World!' when accessed.\nfastify.get('/', async (request, reply) => {\n  return 'Hello World!';\n});\n\n// Making our Fastify application listen on port 80\nfastify.listen({ port: 80 })\n  .then((address) => {\n    // This block of code will run once the server is listening on port 80\n    fastify.log.info(`Example app listening at ${address}`);\n  })\n  .catch((err) => {\n    // This block of code will run if there is an error when trying to listen on port 80\n    fastify.log.error(err);\n    process.exit(1);\n  });\n```\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the **START** field is optional and is only necessary if you are using a custom script to start the website or API. In the example provided, the **START** field is not necessary.\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans [here](https://squarecloud.app/plans).\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host a Fastify application?** Don't worry, we're here to help. Fastify is a web framework highly focused on providing the best developer experience with the least overhead and a powerful plugin architecture. It's easy to learn, highly flexible, and suitable for a wide range of applications, making it a great choice for web development. Fastify also has excellent production capabilities, making it a robust choice for building and deploying production-grade applications. It's designed to be efficient, fast, and lightweight, ensuring your applications run smoothly and reliably. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most Fastify applications. However, if you're working on a larger project or need more stability, we recommend considering our Pro plan. With additional resources, you can ensure smooth performance even under high demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your application hosted on Square Cloud, note that by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer using a custom domain, such as `mysite.com`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to set up your custom domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website or API is 512MB. However, depending on the size and complexity of your Fastify application, it may be advisable to use a larger amount of RAM to avoid the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporarily Denied Access\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" when trying to access the site, wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your application. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about Fastify and its tools, visit the [official Fastify documentation](https://fastify.dev/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of Fastify.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/how-to-deploy-your-flask-application": {
      "metadata": {
        "title": "Hosting a Flask Application on Square Cloud",
        "description": "This article guides you through creating and hosting a Flask application on Square Cloud.",
        "sidebarTitle": "Flask application"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Creating a New Flask Project\n\n- Before getting started, make sure you have Python and pip installed on your system. If you don't already have them, you can download them from the [official Python website](https://www.python.org/) and [official Pip website](https://pypi.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\nWith Python and pip installed, you can create a new Flask project. First, install Flask using pip:\n\n```bash\npip install flask\npip install waitress\n```\n\nThen, create a new Python file (e.g., `app.py`) and add the following code to create a basic Flask application:\n\n```python\n# Import the Flask class from the flask module\nfrom flask import Flask\n\n# Create an instance of the Flask class\napp = Flask(__name__)\n\n# Define a route for the root URL (/) that returns 'Hello, World!'\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n# Check if this script is being executed directly (not imported as a module)\nif __name__ == '__main__':\n    # Run the Flask application on host 0.0.0.0 (all available network interfaces) and port 80\n    app.run(host='0.0.0.0', port=80)\n```\n\n## Configuring the Production Environment with Waitress\n\n```python\nfrom flask import Flask\n\n# Create a Flask application instance\napp = Flask(__name__)\n\n# Define a route for the root URL (/) that returns 'Hello, World!'\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n# If this script is executed directly (not imported as a module)\nif __name__ == '__main__':\n    from waitress import serve  # Import serve function from Waitress\n    \n    # Serve the Flask application using Waitress on host 0.0.0.0 (all interfaces) and port 80\n    serve(app, host='0.0.0.0', port=80)\n    \n    # Print a message to indicate successful server start on port 80\n    print(\"Server successfully started on port 80.\")\n```\n\nIn the above code, we create a basic route that returns \"Hello, World!\" when accessed. The application is configured to run on port 80, which is the default port for HTTP traffic.\n\n## Managing Dependencies with the requirements.txt file\n\nThe `requirements.txt` file is a file that lists all external libraries required for your project. You should list all libraries your project will use, excluding native libraries like `random` and `datetime`. This file should be included when submitting your application to Square Cloud.\n\n```txt requirements.txt\nflask\n```\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the **START** field is optional and is only necessary if you are using a custom script to start the website or API. In the example provided, the **START** field is not necessary.\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans [here](https://squarecloud.app/plans).\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host a Flask Application?** Don't worry, we're here to help. Flask is known for its efficiency, especially for small projects or learning purposes. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most Flask applications. However, if you're working on a larger project and seeking extra stability, we recommend considering our Pro plan. With additional resources, you can maintain stability even during peak demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your application hosted on Square Cloud, note that by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer to use a custom domain, such as `mysite.com`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to Set Up Your Custom Domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website or API is 512MB. However, depending on the size and complexity of your Flask application, it may be advisable to use a larger amount of RAM to avoid the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporary Access Denied\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" when trying to access the site, please wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your application. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about Flask and its tools, visit the [official Flask documentation](https://flask.palletsprojects.com/en/3.0.x/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most out of Flask.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/how-to-deploy-your-nestjs-application": {
      "metadata": {
        "title": "Hosting a Nestjs Application on Square Cloud",
        "description": "This article guides you on creating and hosting a Nestjs app on Square Cloud",
        "sidebarTitle": "Nestjs application"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introduction\n\n- Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n### Setting up NestJS CLI\n\nTo use the NestJS command-line interface (CLI), you need to install it globally on your system. Run the following command:\n\n```bash\nnpm install -g @nestjs/cli\n```\n\nThis command installs the `@nestjs/cli` package globally on your system, which allows you to use the `nest` command from anywhere in your terminal.\n\n### Creating a NestJS Project\n\nTo create a new NestJS project, run the following command:\n\n```bash\nnest new my-app\n```\n\nIn this command, `nest new my-app` is used to create a new NestJS project. The `nest new` command is a tool that comes with `nest`, the NestJS CLI (Command Line Interface). It is used to initialize a new NestJS application.\n\n`my-app` is the name of the new application. This command creates a new directory named `my-app` and sets up the necessary files and dependencies for a basic NestJS application.\n\n## Configuring Port 80\n\nAfter generating the NestJS project with the command `nest new my-app`, the file you need to modify to change the port is `main.ts`. This file is located at the root of your project directory, inside the `src` folder.\n\n```typescript\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(80); // Change the port number here to 80\n}\nbootstrap();\n```\n\nPort 80 is the default port for HTTP traffic.\n\n## Building the Application\n\nNestJS uses TypeScript, so you could compile your TypeScript code to JavaScript before you can run your application.\n\nYou can build your application by running the following command:\n\n```bash\nnpm run build\n```\n\nThis command runs the `build` script defined in your `package.json` file, which in turn runs the `nest build` command. This command compiles your TypeScript code to JavaScript.\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the MAIN field\n\nYou need to specify the main file of your application in the `MAIN` field of squarecloud.app. For a NestJS application, the main file is the compiled JavaScript file of your `main.ts` file, which is `dist/main.js`.\n\nHere's how you can set it:\n\n```app squarecloud.app\nMAIN=dist/main.js\n```\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the **START** field is optional and is only necessary if you are using a custom script to start the website or API. In the example provided, the **START** field is not necessary.\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans [here](https://squarecloud.app/plans).\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host a NestJS application?** Don't worry, we're here to help. NestJS is a progressive Node.js framework for building efficient and scalable server-side applications. It's modular, testable, and strongly typed with TypeScript, making it a great choice for complex back-end development. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most Nestjs applications. However, if you're working on a larger project or need more stability, we recommend considering our Pro plan. With additional resources, you can ensure smooth performance even under high demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your app hosted on Square Cloud, note that by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer using a custom domain, such as `mysite.com`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to set up your custom domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website or API is 512MB. However, depending on the size and complexity of your NestJS application, it may be advisable to use a larger amount of RAM to avoid the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporarily Denied Access\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" when trying to access the site, wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your application. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about Nestjs and its tools, visit the [official Nestjs documentation](https://docs.nestjs.com/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of Nestjs.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/how-to-deploy-your-next-website": {
      "metadata": {
        "title": "Hosting a Next.js Website on Square Cloud",
        "description": "This article guides you on creating and hosting a Next.js website on Square Cloud.",
        "sidebarTitle": "Next.js website"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introduction\n\n- Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n### Creating a Next.js Project\n\nTo create a new Next.js project, run the following command:\n\n```bash\nnpx create-next-app@latest my-app\n```\n\nIn this command, `my-app` is the name of your new project. You can replace `my-app` with any name you want for your project. The `npx` command is a tool that comes with `npm`, the Node.js package manager. It is used to run Node.js packages that are installed locally in your project or are available remotely on the npm registry.\n\n`create-next-app` is a package available on the npm registry that sets up a new Next.js project for you. It takes care of all the initial setup, such as creating the project directory, installing necessary dependencies, and configuring basic files.\n\n`@latest` is a tag specifying that you want to use the latest version of the `create-next-app` package. This ensures you're always using the most updated version and, consequently, have access to the latest features.\n\n## Configuring Port 80\n\nPort 80 is the default port for HTTP traffic. To host a Next.js website on Square Cloud, it's crucial to configure the use of port 80. In Next.js, you can set the `-p 80` parameter in the startup script to ensure your website runs correctly on this port.\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the `START` field is essential for customizing the startup command. If you want to build and start your website on Square Cloud, configure the `START` field as follows:\n\n```app squarecloud.app\nSTART=npm run build && npm run start\n```\n\nThis command will execute the \"build\" and \"start\" scripts defined in your `package.json`:\n\n```json package.json\n{\n  \"name\": \"my-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start -p 80\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"next\": \"14.1.0\"\n  },\n  \"devDependencies\": {\n    \"autoprefixer\": \"^10.0.1\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.3.0\",\n    \"eslint\": \"^8\",\n    \"eslint-config-next\": \"14.1.0\"\n  }\n}\n```\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans [here](https://squarecloud.app/plans).\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host a Next.js website?** Don't worry, we're here to help. Next.js is a React framework best known for its server-side rendering and static site generation capabilities. It's designed to provide an optimal developer experience through features like zero-config, automatic TypeScript support, file-system based routing, and built-in CSS support. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most Next.js websites. However, if you're working on a larger project or need more stability, we recommend considering our Pro plan. With additional resources, you can ensure smooth performance even under high demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your website hosted on Square Cloud, note that, by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer to use a custom domain, such as `mysite.com.br`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to set up your custom domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirement\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website is 512MB, however, when building your site directly on Square, it is advisable to use a higher amount, or you may encounter the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporary access Denied\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" after trying to access the site, please wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your website. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about Next.js and its tools, visit the [official Next.js documentation](https://nextjs.org/docs). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of Next.js.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/how-to-deploy-your-react-website": {
      "metadata": {
        "title": "Hosting a React Application on Square Cloud",
        "description": "This article guides you on creating and hosting a React website on Square Cloud.",
        "sidebarTitle": "React website"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introduction\n\n- Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n### Creating a React Project\n\nTo create a new React project, run the following command:\n\n```bash\nnpx create-react-app my-react-app\n```\n\nIn the above command, `my-react-app` is the name of your new project. You can replace `my-react-app` with any desired name for your project.\n\n`create-react-app` is a package available in the npm registry that sets up a new React project for you. It takes care of all the initial setup, such as creating the project directory, installing necessary dependencies, and configuring basic files.\n\n## Configuring the Production Environment with Serve\n\nAfter having your React project created and configured, it's time to prepare it for production. For this, we will use a library called `serve`. This library is a static server that can serve your React project after it has been built.\n\n### Installing the Serve Library\n\nTo install the `serve` library, navigate to your project directory in the terminal and run the following command:\n\n```bash\nnpm install serve@14.2.3\n```\n\nThis command installs version `14.2.3` of the `serve` library. If you want to install the latest version, you can omit the `@14.2.3`.\n\n### Configuring the Startup Script\n\nAfter installing the `serve` library, you need to configure your project's startup script to use `serve`. To do this, open your project's `package.json` file and add a new script called `start:prod`:\n\n```json\n\"scripts\": {\n  \"start\": \"react-scripts start\",\n  \"start:prod\": \"serve -s build -l 80\",\n  ...\n}\n```\n\nIn the `start:prod` script, `serve -s build -l 80` does the following:\n\n- `serve`: This is the command to start the `serve` server.\n- `-s build`: The `-s` option serves the `build` directory in single-page application mode. This means all not-found requests will be redirected to `index.html`. The `build` directory is created when you run `npm run build`.\n- `-l 80`: The `-l` option followed by `80` tells `serve` to listen on port 80. Port 80 is the default port for HTTP traffic.\n\nNow, when you want to start your project in production mode, you can run the `npm run start:prod` command. This command first builds your React project and then serves the built files using `serve` on port 80.\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the `START` field is essential for customizing the startup command. If you want to build and start your application on Square Cloud, configure the `START` field as follows:\n\n```app squarecloud.app\nSTART=npm run build && npm run start:prod\n```\n\nThis command will execute the \"build\" and \"start:prod\" scripts defined in your `package.json`:\n\n```json package.json\n{\n  \"name\": \"my-react-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@testing-library/jest-dom\": \"^5.17.0\",\n    \"@testing-library/react\": \"^13.4.0\",\n    \"@testing-library/user-event\": \"^13.5.0\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-scripts\": \"5.0.1\",\n    \"serve\": \"^14.2.3\",\n    \"web-vitals\": \"^2.1.4\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"start:prod\": \"serve -s build -l 80\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n```\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans here.\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host a React website?** Don't worry, we're here to help. React is a JavaScript framework known for its speed and flexibility. It allows developers to build large web applications that can update and render efficiently in response to data changes. It's also relatively easy to learn, making it accessible for beginners. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most React websites. However, if you're working on a larger project or need more stability, we recommend considering our Pro plan. With additional resources, you can ensure smooth performance even under high demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your application hosted on Square Cloud, note that, by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer to use a custom domain, such as `mysite.com.br`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to set up your custom domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirement\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website is 512MB, however, when building your site directly on Square, it is advisable to use a higher amount, or you may encounter the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporary access Denied\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" after trying to access the site, please wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your website. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about React and its tools, visit the [official React documentation](https://reactjs.org/docs). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of React.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/how-to-deploy-your-selenium-application": {
      "metadata": {
        "title": "Hosting a Selenium on Square Cloud",
        "description": "This article guides you to automate web navigation using Selenium and Chromium on Square Cloud.",
        "sidebarTitle": "Web Navigation with Selenium"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Creating a New Selenium Script\n\n- Before you start, make sure you have **Python** and **pip** installed on your system. If you don't have them yet, you can download them from the [official Python website](https://www.python.org/) and the [official Pip website](https://pypi.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\nWith Python and pip installed, you can create a new Selenium script. First, install Selenium using pip:\n\n```bash\npip install selenium\n```\n\nNext, create a new Python file (for example, `main.py`) and add the following code to create a basic Selenium script:\n\n```python\nimport time\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nfrom selenium.webdriver.chrome.service import Service\n\n# Define options for Chromium\noptions = Options()\noptions.add_argument(\"--headless\")  # Run in the background. This means that the browser runs without opening a browser window.\noptions.add_argument(\"--no-sandbox\")  # Required when you are running as root. This allows Selenium to start in a user-unsupported environment.\noptions.add_argument(\"--disable-dev-shm-usage\")  # This overcomes limitations when dealing with elements on large pages.\n\n# Initialize the driver\nservice = Service('/usr/bin/chromedriver') # On Square Cloud, the path to the Chromium driver is '/usr/bin/chromedriver'\ndriver = webdriver.Chrome(service=service, options=options)\n\n# Set the window size to larger dimensions\ndriver.set_window_size(1920, 1080)  # Adjust these values as needed\n\n# Open the web page\ndriver.get('https://www.google.com')\n\n# Loop to take a print of the page every 1 minute\nwhile True:\n    driver.save_screenshot('page.png')\n    print(\"Page print saved.\")\n    time.sleep(60)  # Pause for 60 seconds\n```\n\n## Managing Dependencies with the requirements.txt file\n\nThe `requirements.txt` file is a file that lists all the external libraries needed for your project. You should list all the libraries that your project will use, excluding native libraries like `random` and `datetime`. This file should be included when submitting your application to Square Cloud.\n\n```txt requirements.txt\nselenium\n```\n\n## Chromium path\n\nIn the example provided above, it's not necessary to explicitly define the Chromium path because the Selenium WebDriver can automatically find the browser if it's installed in a standard system location. The ChromeDriver, specified with `Service('/usr/bin/chromedriver')`, knows where to look for the Chromium/Chrome executable.\n\nIn Square Cloud, Chromium is installed in `/usr/bin/chromium`, which is standard. Therefore, the Selenium WebDriver can automatically locate it through the specified ChromeDriver. Thus, there's no need to explicitly specify the Chromium path in the code, unless there are specific reasons to do so, such as custom installations or different environment configurations.\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal: `npm install -g @squarecloud/cli` If you already have it, we\n        recommend updating it. To do this, run the following command in your\n        terminal:\n\n        ```bash\n        squarecloud update\n        ```\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Additional Resources\n\nFor more information about Selenium and its tools, visit the [official Selenium documentation](https://www.selenium.dev/pt-br/documentation/webdriver/getting_started/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most out of Selenium.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/how-to-deploy-your-telegram-bot": {
      "metadata": {
        "title": "Hosting a Telegram Bot on Square Cloud",
        "description": "This article guides you through creating and hosting a Telegram bot on Square Cloud.",
        "sidebarTitle": "Telegram bot"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introduction\n\n- Before you start coding, you need to set up your bot properly on Telegram. First, it's necessary to have a Telegram account. If you don't have one yet, you can create one by visiting the [official Telegram website](https://telegram.org/).\n\n<AccordionGroup>\n  <Accordion title=\"Getting Started\" icon=\"rocket\" iconType=\"solid\">\n    First, you should access [Telegram](https://web.telegram.org/a/) and search for a bot called \"BotFather.\"\n\n    <Frame>\n      <img src=\"/images/articles/telegram/getting-started.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Getting the Token\" icon=\"key\" iconType=\"solid\">\n    Click on it to start a conversation and type \"start.\" When it sends the message, choose the \"/newbot\" option. After that, it will ask for the name you want for your bot, and finally, when you choose the name, it will generate the token.\n\n    <Frame>\n      <img src=\"/images/articles/telegram/getting-the-token.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n<Warning>Remember to keep your bot's token secret as it can be used to control your bot.</Warning>\n\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n# Using wrappers for bot creation\n\n<Tabs>\n  <Tab title=\"node-telegram-bot-api\">\n    1. Ensure you have Node.js installed on your system. If not, you can download it from the [official Node.js website](https://nodejs.org/).\n    2. Initialize a new Node.js project using `npm init`. This will create a new `package.json` file for your project:\n\n    ```bash\n    npm init -y\n    ```\n\n    3. Install the node-telegram-bot-api library using npm:\n\n    ```bash\n    npm install node-telegram-bot-api\n    ```\n\n    4. Create a new JavaScript file (e.g., `index.js`) and add the following code to create a basic Discord bot:\n\n    ```javascript index.js\n    // Importing the node-telegram-bot-api library\n    const TelegramBot = require(\"node-telegram-bot-api\");\n\n    // Configuring the API key\n    const token = \"your token here\";\n\n    // Initializing the bot\n    const bot = new TelegramBot(token, { polling: true });\n\n    // Getting bot information\n    bot.getMe().then((botInfo) => {\n      // Getting the bot's name\n      const botName = botInfo.username;\n\n      // Defining a route for messages that are not commands\n      bot.on(\"message\", (msg) => {\n        // Getting the chat ID\n        const chatId = msg.chat.id;\n        // Getting the user's message\n        const userMsg = msg.text;\n        // Formatting the message to be sent\n        const responseMsg = `${botName} Says: ${userMsg}`;\n        // Sending the message\n        bot.sendMessage(chatId, responseMsg);\n      });\n\n      // Printing the bot's name\n      console.log(botName);\n    });\n    ```\n  </Tab>\n\n  <Tab title=\"telebot\">\n    1. Ensure you have Python and Pip (a package manager for Python) installed on your system. If not, you can download them from the [official Python website](https://www.python.org/) and the [official Pip website](https://pypi.org/).\n    2. Install the telebot library using pip:\n\n    ```bash\n    pip install telebot\n    ```\n\n    3. Create a new Python file (e.g., `main.py`) and add the following code to create a basic Telegram bot:\n\n    ```python main.py\n    # Importing the telebot_router library\n    from telebot_router import TeleBot\n\n    # Initializing the bot\n    app = TeleBot(__name__)\n\n    # Defining a route for messages that are not commands\n    @app.route('(?!/).+')\n    def parrot(message):\n        # Getting the chat ID\n        chat_dest = message['chat']['id']\n        # Getting the user's message\n        user_msg = message['text']\n        # Getting bot information\n        bot_info = app.get_me()['result']\n        # Getting the bot's name\n        bot_name = bot_info['username']\n        # Formatting the message to be sent\n        msg = \"{} Says: {}\".format(bot_name, user_msg)\n        # Sending the message\n        app.send_message(chat_dest, msg)\n        \n    # Defining the main function\n    if __name__ == '__main__':\n        # Configuring the API key\n        app.config['api_key'] = 'your token here'\n        # Getting bot information\n        bot_info = app.get_me()['result']\n        # Getting the bot's name\n        bot_name = bot_info['username']\n        # Printing the bot's name\n        print(f\"{bot_name}\") \n        # Starting the bot\n        app.poll(debug=True)\n    ```\n\n    4. Create a `requirements.txt` file to list all external libraries needed for your project:\n\n    ```txt requirements.txt\n    telebot\n    ```\n  </Tab>\n</Tabs>\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\n<Warning>Only use this field if you are really sure about what you are doing.</Warning>\n\nIn the Square Cloud configuration file, the **START** field is optional and only needed if you are using a custom script to start the bot. In the provided example, the **START** field is not necessary.\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Testing the Bot\n\nIf you have done everything correctly, simply search for your bot on Telegram and send a message; it will echo it back to you.\n\n<Frame>\n  <img src=\"/images/articles/telegram/testing-bot.png\" style={{ borderRadius: \"0.2rem\" }} />\n</Frame>\n\n## Additional Resources\n\nFor more information on creating bots with telebot, visit the [official telebot documentation](https://pypi.org/project/telebot/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of these libraries.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/how-to-deploy-your-vite-website": {
      "metadata": {
        "title": "Hosting a Vite Application on Square Cloud",
        "description": "This article guides you on creating and hosting a Vite app on Square Cloud",
        "sidebarTitle": "Vite website"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introduction\n\n- Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n### Creating a Vite Project\n\nTo create a new Vite project, run the following command:\n\n```bash\nnpm create vite@latest my-vite-app\n```\n\nIn the above command, `my-vite-app` is the name of your new project. Replace it with any desired name for your project. By default, this command sets up a Vite project with JavaScript.\n\n### Choosing a Specific Template\n\nVite allows choosing different templates for your project. When creating a new project, you can specify the desired template using the `--template` option. Here are some examples:\n\nSelect a template by: `react`, `vue` & `lit`.\n\n```bash\n# npm 7+, extra double-dash is needed:\nnpm create vite@latest my-vite-app -- --template [template]\n```\n\nChoose the template that best suits your needs and adjust the project name as needed.\n\n### Understanding the Difference Between JavaScript and TypeScript\n\nWhen you choose JavaScript, Vite configures the project with default JavaScript settings. On the other hand, when choosing TypeScript, Vite configures the project with TypeScript settings, including generating a `tsconfig.json` file.\n\n## Configuring Port 80\n\nPort 80 is the default port for HTTP traffic. To host a Vite app on Square Cloud, configure the use of port 80. In Vite, you can set the `--port 80` parameter in the startup script to ensure your app runs correctly on this port.\n\n## Configuring Host 0.0.0.0\n\nThe `--host 0.0.0.0` option is used to bind the Vite server to all available network interfaces. This makes your application accessible not only on `localhost`, but also on external devices within the same network, such as other computers or mobile devices. By default, Vite binds to `localhost`, which restricts access to the machine where it's running. Setting the host to `0.0.0.0` allows the server to listen for incoming requests from any IP address.\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the `START` field is essential to customize the startup command. If you want to build and start your Vite app on Square Cloud, configure the `START` field as follows:\n\n```app squarecloud.app\nSTART=npm run build && npm run preview\n```\n\nThis command will execute the \"build\" and \"preview\" scripts defined in your `package.json`:\n\n```json package.json\n{\n  \"name\": \"my-vite-app\",\n  \"private\": true,\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview --host 0.0.0.0 --port 80\"\n  },\n  \"devDependencies\": {\n    \"vite\": \"^5.1.4\"\n  }\n}\n\n```\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans [here](https://squarecloud.app/plans).\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host a Vite website?** Don't worry, we're here to help. Vite is a modern front-end build tool that provides a faster and leaner development experience for modern web projects. It's designed to provide out-of-the-box support for ES modules, enabling instant server start-up and hot module replacement. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most Vite websites. However, if you're working on a larger project or need more stability, we recommend considering our Pro plan. With additional resources, you can ensure smooth performance even under high demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your app hosted on Square Cloud, note that by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer using a custom domain, such as `mysite.com`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to set up your custom domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website or API is 512MB, however, when building your site directly on Square, it's advisable to use a higher amount, or you may encounter the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporarily Denied Access\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" when trying to access the site, wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your website. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about Vite and its tools, visit the [official Vite documentation](https://vitejs.dev/guide/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of Vite.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/how-to-deploy-your-vue-website": {
      "metadata": {
        "title": "Hosting a Vue Application on Square Cloud",
        "description": "This article guides you on creating and hosting a Vue app on Square Cloud",
        "sidebarTitle": "Vue website"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introduction\n\n- Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n### Creating a Vue Project\n\nTo create a new Vue project, run the following command:\n\n```bash\nnpm create vue@latest\n```\n\nIn this command, `npm create vue@latest` is used to create a new Vue project with the latest version of Vue. The `npm create` command is a tool that comes with `npm`, the Node.js package manager. It is used to initialize a new or existing npm package.\n\n`vue@latest` is a package available on the npm registry that sets up a new Vue project for you. It takes care of all the initial setup, such as creating the project directory, installing necessary dependencies, and configuring basic files.\n\n`@latest` is a tag specifying that you want to use the latest version of the `vue` package. This ensures you're always using the most updated version and, consequently, have access to the latest features.\n\n## Configuring Port 80\n\nPort 80 is the default port for HTTP traffic. To host a Vite app on Square Cloud, configure the use of port 80. In Vite, you can set the `--port 80` parameter in the startup script to ensure your app runs correctly on this port.\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the `START` field is essential to customize the startup command. If you want to build and start your Vite app on Square Cloud, configure the `START` field as follows:\n\n```app squarecloud.app\nSTART=npm run build && npm run serve\n```\n\nThis command will execute the \"build\" and \"serve\" scripts defined in your `package.json`:\n\n```json package.json\n{\n  \"name\": \"vue-project\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"serve\": \"vite preview --port 80\"\n  },\n  \"dependencies\": {\n    \"vue\": \"^3.4.21\"\n  },\n  \"devDependencies\": {\n    \"@vitejs/plugin-vue\": \"^5.0.4\",\n    \"vite\": \"^5.2.8\"\n  }\n}\n```\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans [here](https://squarecloud.app/plans).\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host a Vue.js website?** Don't worry, we're here to help. Vue.js is a progressive JavaScript framework known for its adaptability and simplicity. It's designed to be incrementally adoptable, making it easy for developers to start small and scale up as needed. Vue.js also emphasizes a declarative rendering and component-oriented approach, making it intuitive to build modern web interfaces. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most Vue.js websites. However, if you're working on a larger project or need more stability, we recommend considering our Pro plan. With additional resources, you can ensure smooth performance even under high demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your app hosted on Square Cloud, note that by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer using a custom domain, such as `mysite.com`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to set up your custom domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website or API is 512MB, however, when building your site directly on Square, it's advisable to use a higher amount, or you may encounter the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporarily Denied Access\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" when trying to access the site, wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your website. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about Vue and its tools, visit the [official Vue documentation](https://vuejs.org/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of Vue.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/how-to-deploy-your-website": {
      "metadata": {
        "title": "Hosting Your Website/API on Square Cloud",
        "description": "Learn how to host your website or API on Square Cloud using the squarecloud.app configuration file.",
        "sidebarTitle": "Websites and APIs"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introduction\n\n- Create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to\n  configure your application; it will be used to define the name, description,\n  version, main file, among other things.\n</Card>\n\n### Important website parameters\n\nThe **website port** needs to be **80**, if you are using a static website, you don't need to set the `START` parameter.\n\nIn squarecloud.app configuration file:\n\n- `SUBDOMAIN`: If you are hosting a website, set this parameter to your desired subdomain.\n- `START`: A custom startup command (if needed).\n\n<Note>Website url will be: `my-subdomain-parameter`.squareweb.app</Note>\n\n```systemd This example host a website without custom startup command\nMAIN=index.html\nMEMORY=512\nVERSION=recommended\nDISPLAY_NAME=My simple static website!\nSUBDOMAIN=mysite-simple-website\n```\n\n```systemd This example use all parameters and custom startup command in a website\nMAIN=index.js\nMEMORY=512\nVERSION=recommended\nDISPLAY_NAME=My simple nextjs website!\nSUBDOMAIN=mysite-nextjs-website\nSTART=npm run build && npm run start\n```\n\n# Support for multiple technologies\n\n<CardGroup cols={2}>\n  <Card title=\"React\" icon=\"react\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-react-website\">\n    Learn how to host your React website on Square Cloud.\n  </Card>\n\n  <Card title=\"Next.js\" icon=\"node-js\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-next-website\">\n    Learn how to host your Next.js website on Square Cloud.\n  </Card>\n\n  <Card title=\"NestJs\" icon=\"js\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-nestjs-application\">\n    Learn how to host your NestJs application on Square Cloud.\n  </Card>\n\n  <Card title=\"Vite\" icon=\"rocket\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-vite-website\">\n    Learn how to host your Vite website on Square Cloud.\n  </Card>\n\n  <Card title=\"Vue\" icon=\"vuejs\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-vue-website\">\n    Learn how to host your Vue website on Square Cloud.\n  </Card>\n\n  <Card title=\"Flask\" icon=\"flask\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-flask-application\">\n    Learn how to host your Flask application on Square Cloud.\n  </Card>\n\n  <Card title=\"Django\" icon=\"python\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-django-application\">\n    Learn how to host your Django application on Square Cloud.\n  </Card>\n\n  <Card title=\"Lavalink\" icon=\"java\" href=\"https://docs.squarecloud.app/tutorials/how-to-create-your-lavalink-server\">\n    Learn how to host your Lavalink server and stream high-quality music to your Discord bot.\n  </Card>\n</CardGroup>\n\nBy following these steps, you'll have your website or API up and running smoothly on Square Cloud. If you encounter any issues or need further assistance, don't hesitate to reach out to our [support team](../company/support).\n"
    },
    "tutorials/how-to-deploy-your-whatsapp-bot": {
      "metadata": {
        "title": "Hosting a Whatsapp Bot on Square Cloud",
        "description": "This article guides you through creating and hosting a Whatsapp bot on Square Cloud.",
        "sidebarTitle": "Whatsapp bot"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introduction\n\n- Before you start coding it is necessary to properly set up your bot on WhatsApp. First, you need to have WhatsApp downloaded on your phone. If you don't have it yet, you can visit the [official WhatsApp website](https://www.whatsapp.com/coronavirus/get-started?lang=en). After having WhatsApp installed and configured, you can start programming your bot.\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n<AccordionGroup>\n  <Accordion title=\"Remote path to the WhatsApp Web version\" icon=\"file\" iconType=\"solid\">\n    If your code requires accessing the remote path to the WhatsApp Web version, here's how to do it.\n    You can access [wa-version](https://github.com/wppconnect-team/wa-version/tree/main/html), choose the desired version (the most recent one is always recommended), and click on \"Raw\". After the page opens, simply copy the URL, which will be used later. Example URL:\n    \"https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2412.54.html\"\n\n    <Frame>\n      <img src=\"/images/articles/whatsapp/remote-path.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n# Starting Project\n\n1. Ensure you have Node.js installed on your system. If not, you can download it from the [official Node.js website](https://nodejs.org/).\n2. Initialize a new Node.js project using `npm init`. This will create a new `package.json` file for your project:\n\n```bash\nnpm init -y\n```\n\n3. Install the whatsapp-web.js and qrcode library using npm:\n\n```bash\nnpm install whatsapp-web.js qrcode\n```\n\n4. Create a new JavaScript file (e.g., `index.js`) and add the following code to create a basic Whatsapp bot:\n\n```javascript index.js\n// Importing the necessary modules\nconst { Client } = require(\"whatsapp-web.js\");\nconst qrcode = require(\"qrcode\");\n\n// Creating a new instance of the client\nconst client = new Client({\n  puppeteer: {\n    // Runs Chrome in headless mode (without a user interface).\n    headless: true,\n    args: [\n      // Disables Chrome's sandboxing features. This is necessary when running\n      // Puppeteer in certain environments like Docker containers.\n      \"--no-sandbox\",\n      // Additional sandboxing flag to disable setuid sandbox.\n      \"--disable-setuid-sandbox\",\n    ],\n  },\n  // Setting the webVersionCache option\n  webVersionCache: {\n    // Setting the type as \"remote\", which means that the WhatsApp Web version will be fetched from a remote URL\n    type: \"remote\",\n    // Setting the remote path for the WhatsApp Web version\n    remotePath: \"URL PATH HERE\",\n  },\n});\n\n// This event is fired when whatsapp-web.js generates a new QR code\nclient.on(\"qr\", async (qr) => {\n  // Here we are using the qrcode library to generate a QR Code and save it as a file\n  try {\n    await qrcode.toFile(\"./qrcode.png\", qr);\n    console.log(\"QR Code saved as qrcode.png\");\n  } catch (err) {\n    console.error(err);\n  }\n});\n\n// This event is fired when the client is ready\nclient.on(\"ready\", () => {\n  // This log will be displayed in the console when the client is ready, i.e., after the QR Code has been successfully scanned and the WhatsApp Web session has been started\n  console.log(\"Client is ready!\");\n});\n\n// This event is fired when a message is created\nclient.on(\"message_create\", (msg) => {\n  // Here we are logging the body of the message to the console\n  console.log(msg.body);\n  // If the message is \"!ping\"\n  if (msg.body == \"!ping\") {\n    // Reply with \"pong\"\n    msg.reply(\"pong\");\n  }\n});\n\n// Initializing the client\nclient.initialize();\n```\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\n<Warning>Only use this field if you are really sure about what you are doing.</Warning>\n\nIn the Square Cloud configuration file, the **START** field is optional and only needed if you are using a custom script to start the bot. In the provided example, the **START** field is not necessary.\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Additional Resources\n\nFor more information on creating bots with whatsapp-web.js, visit the [official whatsapp-web.js documentation](https://wwebjs.dev/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of these libraries.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/how-to-set-up-git-integration": {
      "metadata": {
        "title": "How to set up Git integration in your application",
        "description": "Learn how to configure Git integration on Square Cloud",
        "sidebarTitle": "GitHub integration"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Getting the GitHub Access Token\n\n- Visit the [Personal access tokens](https://github.com/settings/tokens) page to obtain your access token. Click on **\"Generate new token\"** and choose the **\"classic\"** option.\n- When choosing the classic token option, **select only** the **\"repos\" option** and do **not set an expiration time**. Remember to give a name to your token so that you can identify it later.\n\n<Frame>\n  <img src=\"/images/articles/github/new-personal-access-token.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n- Finally, click on **\"Generate token\"** at the bottom of the page. Your access token will be displayed for you to **copy**.\n\n<Frame>\n  <img src=\"/images/articles/github/copy-access-token.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n## Configuring the Access Token in Square Cloud\n\n- After obtaining the access token, go to the [dashboard](https://squarecloud.app/dashboard), select your app, navigate to the Deploy section, and **paste your token in the corresponding field**. Click on **\"Save\"**.\n\n<Frame>\n  <img src=\"/images/articles/github/deploy-webhook-git.gif\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n- After saving, a URL webhook will be displayed that **you need to copy**.\n\n## Configuring the Square Cloud Webhook on GitHub\n\n- Now, access your application's repository (which can be private or public) and go to **\"Deploy\"**. Then, click on **\"Webhooks\"** and then on **\"Add Webhook\"**.\n- Paste your webhook in the Payload URL field, set the Content Type to **application/json**, and click on **\"Add Webhook\"**.\n\n<Frame>\n  <img src=\"/images/articles/github/add-webhook.gif\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n## Setting a branch for webhook\n\n- If you want to set a branch for the webhook, you can set a query parameter in the webhook URL.\n- Access the **webhook Payload URL** field in your GitHub repository and insert on the end of the webhook URL `?branch=name` where `name` is the name of the desired branch.\n\n<Note>\n  In this example, the desired branch will be `main`\n</Note>\n\n<Frame>\n  <img src=\"/images/articles/github/setting_branch.gif\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n## Deploy\n\n- If you have followed all the steps correctly, simply commit to your repository. Your application on Square Cloud will be updated.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/how-to-set-up-your-domain": {
      "metadata": {
        "title": "How to set up your custom domain",
        "description": "Learn how to configure your domain on Square Cloud",
        "sidebarTitle": "Custom domains"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introduction\n\n\\-- To configure your domain, you need to have the Standard plan or higher. You can purchase it on various domain registration platforms like:\n\n- [Registro.br](https://registro.br/)\n- [Square Space](https://squarespace.com/) \\*previously: Google Domains\n- [GoDaddy](https://www.godaddy.com/)\n- [Namecheap](https://www.namecheap.com/)\n\nChoose a platform that suits your needs and purchase your domain.\n\n## Configuring DNS on Cloudflare\n\n- Access the website where you purchased your domain, such as [Hostinger](https://www.hostinger.com.br/) or [Registro.br](https://registro.br/).\n- Next, go to [Cloudflare](https://cloudflare.com/), navigate to \"Websites\" and click on \"Add a site\".\n\n<Frame>\n  <img src=\"/images/articles/cloudflare/add-site.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\nAfter entering your domain, copy the provided nameservers and paste them on the website where you purchased the domain, in the DNS/Nameservers section.\n\n## Configuring your domain on Square Cloud\n\n- Choose the site you want to configure the domain for in the [dashboard](https://squarecloud.app/dashboard), then go to the **Settings** option and enter your domain in place of \"example.com.\"\n\n<Frame>\n  <img src=\"/images/articles/cloudflare/domain-setup.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n- Now that the domain is configured on Square Cloud, go back to Cloudflare, select your domain, and choose the DNS option.\n- Finally, point your domain to \"cname.squareweb.app\" with the type \"CNAME\", replacing \"name\" with your domain, and another with the type TXT with the value that will appear in \"DNS Configuration\" after clicking \"save\".\n\n<Frame>\n  <img src=\"/images/articles/cloudflare/record-dns.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n## Good to know\n\n### www redirect to your domain\n\n- To redirect www to your domain, create a new record with the name \"www\" and the type \"A\", pointing to 192.0.2.1 (cloudflare internal IP).\n- Go to the \"Page Rules\" option on Cloudflare and create a new rule with the following settings:\n\n<Frame>\n  <img src=\"/images/articles/cloudflare/page-rule-www.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n### Troubleshooting\n\n- If you receive the Unauthorized DNS error, try clearing your browser cache and accessing the site again in 5 minutes. If the issue persists, [contact our team](/company/support).\n\n<Frame>\n  <img src=\"/images/articles/cloudflare/unauthorized-dns.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n- If you receive the Cloudflare 1015 error, it means your domain is not configured correctly. Check your domain configuration and ensure it is correctly pointed to Square Cloud. If the issue persists, [contact our team](/company/support).\n"
    },
    "tutorials/introduction": {
      "metadata": {
        "title": "üòÅ Welcome to Square Cloud Tutorials",
        "description": "Explore Square Cloud tutorials and immerse yourself in a world of simplified enterprise hosting education. Start learning today!",
        "sidebarTitle": "Overview",
        "sidebarIcon": "book"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "# ü§î What are Square Cloud \"tutorials\"?\n\n- Our tutorials are essential resources designed to guide you from basic tools like hosting Discord bots to more advanced ones like using Selenium and hosting on Square Cloud. Get ready to master all the tools available in the largest enterprise hosting in Latin America.\n\n## üìö What Are the Tutorials About?\n\n- The tutorials consist of tools available for use on Square Cloud, such as applications for platforms like Discord, Telegram, APIs built in Flask, and others.\n- Each article teaches how to create, configure, and host your application on Square Cloud in the best possible way for developers.\n- We are constantly updating and creating new tutorials based on user demand and tool evolution. If you want to suggest an article for us to add, you can do so in our [Discord community](https://discord.gg/squarecloud), where a team member will respond to your request, or by opening a pull request in our [documentation repository](https://github.com/squarecloudofc/docs).\n\n# üìë What articles are currently available?\n\n<AccordionGroup>\n  <Accordion title=\"Square Cloud\" icon=\"square\">\n    <CardGroup cols={2}>\n      <Card title=\"Managing teams\" icon=\"users\" href=\"https://docs.squarecloud.app/tutorials/managing-teams\">\n        This article teaches how to create and manage teams on Square Cloud.\n      </Card>\n\n      <Card title=\"Custom Domains\" icon=\"globe\" href=\"https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain\">\n        This article teaches how to create and configure your custom domain on\n        Square Cloud.\n      </Card>\n\n      <Card title=\"Lavalink\" icon=\"java\" href=\"https://docs.squarecloud.app/tutorials/how-to-create-your-lavalink-server\">\n        This article teaches how to create and host a NestJS application on\n        Square Cloud.\n      </Card>\n\n      <Card title=\"Website and APIs\" icon=\"network-wired\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-website\">\n        This article teaches how to configure and host websites & APIs on Square\n        Cloud.\n      </Card>\n\n      <Card title=\"Git integration\" icon=\"github\" href=\"https://docs.squarecloud.app/tutorials/how-to-set-up-git-integration\">\n        This article teaches how to set up and use Square Cloud's Git\n        integration.\n      </Card>\n\n      <Card title=\"Timezone\" icon=\"clock\" href=\"https://docs.squarecloud.app/tutorials/timezone-change-guide\">\n        This article teaches how to change the timezone of your application on\n        Square Cloud.\n      </Card>\n\n      <Card title=\"Top.gg Webhook\" icon=\"link\" href=\"https://docs.squarecloud.app/tutorials/topgg-webhook-config\">\n        This article teaches how to set up a Top.gg webhook on Square Cloud.\n      </Card>\n\n      <Card title=\"Selenium\" icon=\"browser\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-selenium-application\">\n        This article teaches how to use Selenium on Square Cloud.\n      </Card>\n    </CardGroup>\n  </Accordion>\n\n  <Accordion title=\"APIs\" icon=\"gear\">\n    <CardGroup cols={2}>\n      <Card title=\"Flask\" icon=\"flask\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-flask-application\">\n        This article teaches how to create and host a Flask application on\n        Square Cloud.\n      </Card>\n\n      <Card title=\"Django\" icon=\"globe\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-django-application\">\n        This article teaches how to create and host a Django application on\n        Square Cloud.\n      </Card>\n\n      <Card title=\"NestJS\" icon=\"shield\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-nestjs-application\">\n        This article teaches how to create and host a NestJS application on\n        Square Cloud.\n      </Card>\n\n      <Card title=\"Express\" icon=\"train\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-express-application\">\n        This article teaches how to create and host an Express application on\n        Square Cloud.\n      </Card>\n\n      <Card title=\"Fastify\" icon=\"fire\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-fastify-application\">\n        This article teaches how to create and host a Fastify application on\n        Square Cloud.\n      </Card>\n    </CardGroup>\n  </Accordion>\n\n  <Accordion title=\"Websites\" icon=\"globe\">\n    <CardGroup cols={2}>\n      <Card title=\"Vue\" icon=\"vuejs\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-vue-website\">\n        This article teaches how to create and host a Vue website on Square\n        Cloud.\n      </Card>\n\n      <Card title=\"Vite\" icon=\"bolt\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-vite-website\">\n        This article teaches how to create and host a Vite website on Square\n        Cloud.\n      </Card>\n\n      <Card title=\"React\" icon=\"react\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-react-website\">\n        This article teaches how to create and host a React website on Square\n        Cloud.\n      </Card>\n\n      <Card title=\"Next.js\" icon=\"code\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-next-website\">\n        This article teaches how to create and host a Next.js website on Square\n        Cloud.\n      </Card>\n    </CardGroup>\n  </Accordion>\n\n  <Accordion title=\"Bots\" icon=\"robot\">\n    <CardGroup cols={2}>\n      <Card title=\"Discord\" icon=\"discord\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-discord-bot\">\n        This article teaches how to create and host a Discord bot on Square\n        Cloud.\n      </Card>\n\n      <Card title=\"Whatsapp\" icon=\"whatsapp\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-whatsapp-bot\">\n        This article teaches how to create and host a Whatsapp bot on Square\n        Cloud.\n      </Card>\n\n      <Card title=\"Telegram\" icon=\"paper-plane\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-telegram-bot\">\n        This article teaches how to create and host a Telegram bot on Square\n        Cloud.\n      </Card>\n    </CardGroup>\n  </Accordion>\n</AccordionGroup>\n\n# ‚≠ê Additional information\n\nFollow all updates to Square Cloud services and their documentation!\n\n<Card title=\"Changelog\" icon=\"bell\" href=\"https://changelog.squarecloud.app/\">\n  Official changelog of the Square Cloud Platform.\n</Card>\n\nJoin our community on [Discord](https://discord.gg/squarecloud) to get help from other developers and share your experiences.\n\n<Card title=\"Square Cloud Community\" icon=\"discord\" href=\"https://discord.gg/squarecloud\">\n  Join our community on Discord. We're here to help you!\n</Card>\n\nCheck out some of our projects to assist you in interacting with our Square Cloud API.\n\n<CardGroup cols={2}>\n  <Card title=\"JavaScript SDK\" icon=\"node-js\" href=\"https://github.com/squarecloudofc/sdk-api-js\">\n    Learn how to use the Square Cloud JavaScript SDK to interact with the Square\n    Cloud API.\n  </Card>\n\n  <Card title=\"Python SDK\" icon=\"python\" href=\"https://github.com/squarecloudofc/sdk-api-py\">\n    Learn how to use the Square Cloud Python SDK to interact with the Square\n    Cloud API.\n  </Card>\n\n  <Card title=\"CLI\" icon=\"terminal\" href=\"https://github.com/squarecloudofc/cli\">\n    Learn how to use the Square Cloud CLI to interact with the Square Cloud API.\n  </Card>\n\n  <Card title=\"Blob SDK\" icon=\"cloud\" href=\"https://github.com/squarecloudofc/sdk-blob-js\">\n    Learn how to use the Square Cloud SDK Blob to interact with the Square Cloud\n    Blob.\n  </Card>\n</CardGroup>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/managing-teams": {
      "metadata": {
        "title": "Managing Your Teams on Square Cloud",
        "description": "Learn how the team system works and how to manage your teams",
        "sidebarTitle": "Managing Teams"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introduction\n\n- Before you start, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have a paid plan active on your account. You can view our plans and purchase one [here](https://squarecloud.app/pricing).\n\n## Creating Your Team\n\nTo create your team, you should go to the [dashboard](https://squarecloud.app/dashboard), click on your profile and choose the \"Create a Team\" option. Finally, just choose the name of your team and confirm. Thus, it will be created and you can access it by selecting your profile again and choosing the desired team.\n\n<Frame>\n  <img src=\"/images/articles/teams/create-team.png\" style={{ borderRadius: \"0.2rem\" }} />\n</Frame>\n\n## Adding Team Members\n\nTo add a new member to the team, follow these steps:\n\n<Steps>\n  <Step title=\"First Step\" icon=\"check\">\n    Ask the user you want to add to access the [config](https://squarecloud.app/account) page and trigger the `request team code` button. They should then send you the generated account code. Remember that this code can only be used once and expires after **5 minutes**.\n  </Step>\n\n  <Step title=\"Second Step\" icon=\"star\">\n    Access the [dashboard](https://squarecloud.app/dashboard), navigate to your profile, and select the team where you want to add the user. Then, go to the \"Members\" tab, click on the \"Invite a member\" button, and enter the user's account code you wish to invite.\n\n    <Frame>\n      <img src=\"/images/articles/teams/add-member.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Step>\n</Steps>\n\n<Warning>Only share your account code with trusted individuals.</Warning>\n\n### Roles\n\nEach member in the team has a certain role that provides specific permissions to be performed on the applications. Below you can see a list of permissions:\n\n<AccordionGroup>\n  <Accordion title=\"View\" icon=\"eye\">\n    Can view panels, metrics, logs and system alerts to monitor the overall integrity and performance.\n  </Accordion>\n\n  <Accordion title=\"Manager\" icon=\"user-tie\">\n    In addition to viewing permissions, you can control the lifecycle of applications by starting, stopping, and restarting services.\n  </Accordion>\n\n  <Accordion title=\"Maintain\" icon=\"wrench\">\n    Beyond manager permissions, you can upload, download, and edit files and application settings.\n  </Accordion>\n\n  <Accordion title=\"Admin\" icon=\"user-shield\">\n    Has full access, including viewing metrics, managing applications, editing files, accessing confidential data, and performing system backups and restores.\n  </Accordion>\n</AccordionGroup>\n\n<Note>\n  Only the Admin role can view files such as `.env` `.env.production` and configuration file (`squarecloud.app/.config`)\n</Note>\n\n## Adding Applications to the Team\n\nTo add applications to your team, follow these steps:\n\n<Steps>\n  <Step title=\"First Step\" icon=\"check\">\n    Access the team to which you want to add a new application.\n\n    <Frame>\n      <img src=\"/images/articles/teams/team.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Step>\n\n  <Step title=\"Second Step\" icon=\"star\">\n    Click on \"Add new\" and select the application you want to add to the chosen team.\n\n    <Frame>\n      <img src=\"/images/articles/teams/add-app.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Step>\n</Steps>\n\n<Warning>Only the team owner can add applications.</Warning>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/timezone-change-guide": {
      "metadata": {
        "title": "How to Change Timezone",
        "description": "Learn how to change the timezone to suit your application's needs.",
        "sidebarTitle": "How to Changing Timezone"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introduction\n\nThe Square Cloud servers are located in Tampa, Florida, USA. By default, the timezone is set according to this location. However, in this article, we will teach you how you can customize the timezone of your application to whichever you desire.\n\n## Getting Started\n\nThe following sections provide code examples for both Javascript and Python:\n\n<Tabs>\n  <Tab title=\"Javascript\">\n    <Tabs>\n      <Tab title=\"Native\">\n        ```javascript index.js\n        // Create a Date object\n        const date = new Date();\n        // Convert the date to a string using a specific timezone\n        const dateString = date.toLocaleString(\"pt-BR\", {\n          timeZone: \"America/Sao_Paulo\",\n        });\n        console.log(dateString); // Outputs the date and time in the \"America/Sao_Paulo\" timezone\n        ```\n      </Tab>\n\n      <Tab title=\"Moment\">\n        ```javascript index.js\n        const moment = require('moment');\n        require('moment-timezone');\n\n        // Create a Moment.js object with the current date and time\n        const date = moment();\n\n        // Change the timezone to \"America/Sao_Paulo\"\n        const time = date.tz('America/Sao_Paulo');\n\n        // Define the format string for date and time representation\n        // YYYY: Represents the year with four digits (e.g., 2022)\n        // MM: Represents the month as a zero-padded decimal number (e.g., 01 for January, 02 for February, ..., 12 for December)\n        // DD: Represents the day of the month as a zero-padded decimal number (e.g., 01, 02, ..., 31)\n        // HH: Represents the hour as a zero-padded decimal number in 24-hour clock format (e.g., 00 for midnight, 13 for 1 PM, ..., 23 for 11 PM)\n        // mm: Represents the minute as a zero-padded decimal number (e.g., 00, 01, ..., 59)\n        // ss: Represents the second as a zero-padded decimal number (e.g., 00, 01, ..., 59)\n        const formattedTime = time.format('YYYY-DD-MM HH:mm:ss');\n        console.log(formattedTime); // Outputs the date and time in the \"America/Sao_Paulo\" timezone\n        ```\n      </Tab>\n    </Tabs>\n  </Tab>\n\n  <Tab title=\"Python\">\n    <Tabs>\n      <Tab title=\"Native\">\n        ```python main.py\n        from datetime import datetime, timedelta\n\n        # Create a datetime object\n        now = datetime.now()\n\n        # Create a timedelta object to represent the timezone difference\n        time_difference = timedelta(hours=-3)  # The timezone difference between UTC and \"America/Sao_Paulo\" is -3 hours\n\n        # Change the timezone\n        time = now + time_difference\n\n        # Define the format string for date and time representation\n        # %Y: Represents the year with four digits (e.g., 2022)\n        # %d: Represents the day of the month as a zero-padded decimal number (e.g., 01, 02, ..., 31)\n        # %m: Represents the month as a zero-padded decimal number (e.g., 01 for January, 02 for February, ..., 12 for December)\n        # %H: Represents the hour as a zero-padded decimal number in 24-hour clock format (e.g., 00 for midnight, 13 for 1 PM, ..., 23 for 11 PM)\n        # %M: Represents the minute as a zero-padded decimal number (e.g., 00, 01, ..., 59)\n        # %S: Represents the second as a zero-padded decimal number (e.g., 00, 01, ..., 59)\n        formatted_time = time.strftime('%Y-%d-%m %H:%M:%S')\n        print(formatted_time)  # Outputs the formatted date and time in the \"America/Sao_Paulo\" timezone\n        ```\n      </Tab>\n\n      <Tab title=\"Pytz\">\n        ```python main.py\n        from datetime import datetime\n        import pytz\n\n        # Create a datetime object with the current time in UTC\n        now = datetime.now(pytz.utc)\n\n        # Define the timezone for \"America/Sao_Paulo\"\n        tz = pytz.timezone('America/Sao_Paulo')\n\n        # Convert the UTC datetime to \"America/Sao_Paulo\" timezone\n        time = now.astimezone(tz)\n\n        # Define the format string for date and time representation\n        # %Y: Represents the year with four digits (e.g., 2022)\n        # %d: Represents the day of the month as a zero-padded decimal number (e.g., 01, 02, ..., 31)\n        # %m: Represents the month as a zero-padded decimal number (e.g., 01 for January, 02 for February, ..., 12 for December)\n        # %H: Represents the hour as a zero-padded decimal number in 24-hour clock format (e.g., 00 for midnight, 13 for 1 PM, ..., 23 for 11 PM)\n        # %M: Represents the minute as a zero-padded decimal number (e.g., 00, 01, ..., 59)\n        # %S: Represents the second as a zero-padded decimal number (e.g., 00, 01, ..., 59)\n        formattedTime = time.strftime('%Y-%d-%m %H:%M:%S')\n        print(formattedTime)  # Outputs the date and time in the \"America/Sao_Paulo\" timezone\n        ```\n      </Tab>\n    </Tabs>\n  </Tab>\n</Tabs>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "tutorials/topgg-webhook-config": {
      "metadata": {
        "title": "Configure Top.gg Webhook on Square Cloud",
        "description": "A detailed guide to setting up the Top.gg webhook on Square Cloud.",
        "sidebarTitle": "Top.gg Webhook Configuration"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introduction\n\n- This guide assumes you have an approved bot on [top.gg](https://top.gg/) and are using either Node.js or Python for your project.\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/pricing).\n\n## Setting Up the Environment\n\n<Tabs>\n  <Tab title=\"Node.js\">\n    1. Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n    2. Start a new Node.js project with the following command:\n\n    ```bash Terminal\n    npm init -y\n    ```\n\n    This command creates a package.json file in the current directory.\n\n    2. Install the necessary libraries:\n\n    ```bash Terminal\n    npm install @top-gg/sdk express\n    ```\n  </Tab>\n\n  <Tab title=\"Python\">\n    1. Ensure you have Python and Pip (a package manager for Python) installed on your system. If not, you can download them from the [official Python website](https://www.python.org/) and the [official Pip website](https://pypi.org/).\n    2. Install the `flask` and `waitress` libraries using pip:\n\n    ```bash\n    pip install flask\n    pip install waitress\n    ```\n  </Tab>\n</Tabs>\n\n## Setting Up the Project\n\n**1. Get your webhook authentication:**\n\n- Go to your Top.gg profile [here](https://top.gg/user/me).\n- Click \"edit\" on the bot you want to receive notifications for votes.\n- Under \"GENERAL\", choose the \"webhook\" option.\n- Set the webhook authentication in \"Authorization\". In this example, we used \"myappsquare\".\n\n**2. Implement the webhook listener:**\n\nThe following sections provide code examples for both Javascript and Python:\n\n<Tabs>\n  <Tab title=\"Node.js\">\n    We will use the example provided by the top.gg documentation [here](https://docs.top.gg/docs/Libraries/javascript), with some modifications.\n\n    ```javascript index.js\n    // Import libraries\n    const Topgg = require(\"@top-gg/sdk\");\n    const express = require(\"express\");\n\n    // Create Express app and Top.gg webhook instances\n    const app = express();\n    const webhook = new Topgg.Webhook(\"YOUR_AUTHORIZATION\");\n\n    // Define route for '/topgg' endpoint (POST requests)\n    app.post(\"/topgg\", webhook.listener((vote) => {\n      // Log vote received message with user ID\n      console.log(`Vote received successfully! User ID: ${vote.user}`);\n    }));\n\n    // Start server on port 80 (default HTTP)\n    app.listen(80);\n    ```\n  </Tab>\n\n  <Tab title=\"Python\">\n    For Python, you can use the following code:\n\n    ```python app.py\n    # Import the necessary libraries\n    import logging\n    import json\n    from waitress import serve\n    from flask import Flask, request, abort\n\n    # Create an instance of the Flask app\n    app = Flask(__name__)\n\n    # Define your authorization token\n    AUTH_TOKEN = 'YOUR_AUTHORIZATION'\n\n    # Define a route for the '/topgg' endpoint that accepts POST requests\n    @app.route(\"/topgg\", methods=[\"POST\"])\n    def hook():\n        # Check the authorization header\n        auth = request.headers.get('Authorization')\n        if auth != AUTH_TOKEN:\n            logging.error('Access denied')\n            abort(401)  # Unauthorized\n\n        # Convert the request data from bytes to a JSON dictionary\n        data = json.loads(request.data)\n        # Print the ID of the user who voted\n        print(f'Vote received successfully! User ID: {data[\"user\"]}')\n        # Return a response with the string \"Data received\" and status 200 to indicate that the request was processed successfully\n        return \"Data received\"\n\n    # Check if this script is being run directly and not imported as a module\n    if __name__ == \"__main__\":\n        # Set the log message format to exclude the log level\n        logging.basicConfig(format='%(message)s', level=logging.INFO)\n        # Serve our Flask app on port 80 and listen on all network interfaces\n        serve(app, host=\"0.0.0.0\", port=80)\n    ```\n  </Tab>\n</Tabs>\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Uploading Your Application to Square Cloud\n\nAfter following all the steps, put your application files into a `.zip` file, including the configuration file.\n\nIf your application is a Node.js project, take a look at our article on [Node.js](\"https://docs.squarecloud.app/articles/getting-started-with-nodejs\").\n\nIf your application is a Python project, take a look at our article on [Python](\"https://docs.squarecloud.app/articles/getting-started-with-python\").\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login \n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you need to execute the following command, passing the path of your zip file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your application hosted on Square Cloud, note that by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer to use a custom domain, such as `mysite.com`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to Set Up Your Custom Domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website or API is 512MB. However, depending on the size and complexity of your project, it may be advisable to use a larger amount of RAM to avoid the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporary Access Denied\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" when trying to access the site, please wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your application. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Starting Tests\n\nIf you have done everything correctly, try accessing your site using the subdomain defined in the configuration file. If you defined it as \"mysite\", to access it will be `https://mysite.squareweb.app/`. After you access and only \"Cannot GET /\" or \"Method Not Allowed\" appears, everything is okay.\n\nNow, you need to go back to the previous page where the authorization was defined. In the Webhook URL field, you should put the URL of your site with the route that will receive the votes.\n\n- For the JavaScript code we created with `app.post(\"/topgg\", webhook.listener((vote) => {...})`, the route that will receive the votes is \"/topgg\". So, if your website is \"https://mysite.squareweb.app\", you should put \"https://mysite.squareweb.app/topgg\" as the Webhook URL.\n\n- For the Python code we created with `@app.route(\"/topgg\", methods=[\"POST\"])`, the route that will receive the votes is also \"/topgg\". So, the Webhook URL would be the same \"https://mysite.squareweb.app/topgg\".\n\n<Frame>\n  <img src=\"/images/articles/topgg/example-url.png\" style={{ borderRadius: \"0.2rem\" }} />\n</Frame>\n\nFinally, click on the \"Send Test\" button. After that, check the terminal. If everything went well, the message you defined in `console.log` or `print` should appear in the terminal.\n\n<Frame>\n  <img src=\"/images/articles/topgg/example-send.png\" style={{ borderRadius: \"0.2rem\" }} />\n</Frame>\n\nAnd with that, if everything has been configured correctly, your webhook will be ready to send notifications when your bot receives a vote on top.gg.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "articles/personal/node.js-v20-released-with-new-features-and-improvements": {
      "metadata": {
        "title": "Node.js 20 Now an LTS Release",
        "description": "As of October 24, 2023, Node.js 20 has been officially designated as the Long-Term Support (LTS) version, accompanied by a host of exciting new features and enhancements."
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Highlights\n\nThe highlight of this release is the new Node.js Permission Model, which is an experimental mechanism for restricting access to specific resources during execution. This model can be used to improve security and compliance by preventing applications from accessing unauthorized resources.\n\nOther notable changes in Node.js 20 include:\n\n- A stable test\\_runner module, which provides a consistent way to run tests in Node.js\n- Updates of the V8 JavaScript engine to 11.3, which includes performance improvements and new features\n- Support for ARM64 for Windows\n- Improved support for the Web Crypto API\n- Growing support for WASM interfaces\n\n## Env Support\n\nNode.js 20 implements native support to env files, which means that developers can now use env files to configure their applications.\n\n<Note>In Square Cloud all projects are configured to auto load .env files.</Note>\n\n```shell Read .env file and set environment variables\nnode --env-file=.env index.js\n```\n\n## Permission Model\n\nThe Node.js Permission Model is an experimental feature that allows developers to restrict access to specific resources during execution. This can be useful for improving security and compliance by preventing applications from accessing unauthorized resources.\n\nTo use the Permission Model, developers must specify the `--experimental-permission` flag when starting Node.js. This will enable the Permission Model and allow developers to specify permissions for each resource.\n\nFor example, the following code will restrict access to the file system:\n\n```shell\nnode --experimental-permission index.js\n```\n\n```js\nconst { readFile } = require(\"node:fs\");\n\nreadFile(\"./file.txt\", (err, data) => {\n    if (err) {\n        return console.log(err);\n    }\n    console.log(data);\n});\n```\n\nThis code result in the following error:\n\n```js\nnode:internal/modules/cjs/loader:178\n  const result = internalModuleStat(filename);\n                 ^\nError: Access to this API has been restricted\n```\n\nGrant read and write access to the file system.\n\n```shell\nnode --experimental-permission --allow-fs-read=* --allow-fs-write=* index.js\n```\n\n## Stable test\\_runner module\n\nThe test\\_runner module is now stable, which means that it is ready for production use. This module provides a consistent way to run tests in Node.js, regardless of the test framework or test runner that is being used.\n\nFor example, the following code will run a test using the test\\_runner module:\n\n```js\nconst { test, mock } = require(\"node:test\");\nconst assert = require(\"node:assert\");\nconst fs = require(\"node:fs\");\n\nmock.method(fs, \"readFile\", async () => \"Hello World\");\ntest(\"synchronous passing test\", async (t) => {\n  // This test passes because it does not throw an exception.\n  assert.strictEqual(await fs.readFile(\"a.txt\"), \"Hello World\");\n});\n```\n\n## Other Changes\n\nIn addition to the Permission Model, Node.js 20 also includes a number of other changes and improvements. These include:\n\n- **Updates of the V8 JavaScript engine to 11.3**\n\nThe V8 JavaScript engine has been updated to version 11.3, which includes performance improvements and new features. These improvements can lead to faster and more efficient Node.js applications.\n\n- **Support for ARM64 for Windows**\n\nNode.js 20 now supports ARM64 for Windows. This means that developers can now run Node.js applications on Windows machines with ARM64 processors.\n\n- **Improved support for the Web Crypto API**\n\nThe Web Crypto API has been improved in Node.js 20. These improvements include support for new algorithms and better performance.\n\n- **Growing support for WASM interfaces**\n\nSupport for WebAssembly (WASM) interfaces is growing in Node.js 20. This means that developers can now use WASM modules in Node.js applications.\n\n## Conclusion\n\nNode.js 20 is a major release with a number of new features and improvements. The highlight of this release is the new Node.js Permission Model, which can be used to improve security and compliance. Other notable changes include a stable test\\_runner module, updates of the V8 JavaScript engine, and support for ARM64 for Windows.\n\n<Note> Square Cloud support for Node.js 20 is arrived on October 24, 2023. </Note>\n\n```md Node.js 21.1.0 + Python 3.12\nVERSION=latest\n```\n\n```md Node.js 20.9.0 + Python 3.11.6\nVERSION=recommended\n```\n\nThat's all for now, an article written by Jo√£o Ot√°vio Stivi, CTO at Square Cloud.\n"
    },
    "blob-reference/endpoint/delete": {
      "metadata": {
        "title": "Blob Delete Objects",
        "description": "This documentation provides a comprehensive overview of the DELETE /v1/objects endpoint of the SquareCloud Blob API.",
        "sidebarTitle": "Objects Delete"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField body=\"object\" type=\"string\" placeholder=\"Object name\" required>\n  The name of the object to delete. The object name must adhere to the following pattern: `a to z, A to Z, 0 to 9, and _`.\n\n  ```json\n  { \"object\": \"ID/prefix/name1_ltq7b2sw-de6241.jpeg\" }\n  ```\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. \"success\" if successful, \"error\" if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n    \"status\": \"success\",\n  }\n  ```\n</ResponseExample>\n\n### Troubleshooting\n\n<Tabs>\n  <Tab title=\"400 Status Code\">\n    ### Object-Related\n\n    <CodeGroup>\n      ```json INVALID_OBJECTS\n      // The provided object names are invalid.\n      {\n          \"status\": \"error\",\n          \"code\": \"INVALID_OBJECTS\"\n      }\n      ```\n\n      ```json TOO_MANY_OBJECTS\n      // The number of objects to delete exceeds the maximum limit.\n      {\n          \"status\": \"error\",\n          \"code\": \"TOO_MANY_OBJECTS\"\n      }\n      ```\n\n      ```json FAILED_DELETE\n      // The request to delete the objects failed. Please try again.\n      {\n          \"status\": \"error\",\n          \"code\": \"FAILED_DELETE\"\n      }\n      ```\n    </CodeGroup>\n  </Tab>\n\n  <Tab title=\"401 Status Code\">\n    ### Unauthorized\n\n    <CodeGroup>\n      ```json ACCESS_DENIED\n      // Just set the correct API key in the Authorization header.\n      {\n          \"status\": \"error\",\n          \"code\": \"ACCESS_DENIED\"\n      }\n      ```\n    </CodeGroup>\n  </Tab>\n</Tabs>\n"
    },
    "blob-reference/endpoint/list": {
      "metadata": {
        "title": "Blob Object List",
        "description": "This documentation provides a comprehensive overview of the GET /v1/objects endpoint of the SquareCloud Blob API.",
        "sidebarTitle": "Object List"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField query=\"prefix\" type=\"string\" placeholder=\"File Prefix\">\n  A string representing the prefix for the file.<br />Must adhere to the a to z, A to Z, 0 to 9, and \\_ pattern. (3 to 32 characters)\n</ParamField>\n\n<ParamField query=\"continuationToken\" type=\"string\" placeholder=\"Continuation Token\">\n  A string representing the continuation token for the file list.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. \"success\" if successful, \"error\" if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"objects\" type=\"array\">\n      <Expandable title=\"Toggle object\">\n        <ResponseField name=\"id\" type=\"string\">\n          The id of the object.\n        </ResponseField>\n\n        <ResponseField name=\"size\" type=\"integer\">\n          The size of the object in bytes.\n        </ResponseField>\n\n        <ResponseField name=\"created_at\" type=\"ISO 8601\">\n          The date and time the object was created.\n        </ResponseField>\n\n        <ResponseField name=\"expires_at\" type=\"ISO 8601\">\n          The date and time the object will expire.\n        </ResponseField>\n      </Expandable>\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json Response - [30s cache]\n  {\n    \"status\": \"success\",\n    \"response\": {\n      \"objects\": [\n        {\n          \"id\": \"ID/name1_ltq7b2sw-de6241.jpeg\",\n          \"size\": 78266,\n          \"created_at\": \"2024-03-13T19:31:28.776Z\"\n        },\n        {\n          \"id\": \"ID/name_ltq7b2sw-de6243-ex1.jpeg\",\n          \"size\": 90466,\n          \"created_at\": \"2024-03-13T19:35:28.776Z\",\n          \"expires_at\": \"2024-03-14T19:35:28.776Z\"\n        },\n      ]\n    }\n  }\n  ```\n</ResponseExample>\n\n### Troubleshooting\n\n<Tabs>\n  <Tab title=\"400 Status Code\">\n    ### Object-Related\n\n    <CodeGroup>\n      ```json INVALID_PREFIX\n      // The provided object prefix is invalid.\n      // Must adhere to the a to z, A to Z, 0 to 9, and _ pattern.\n      {\n          \"status\": \"error\",\n          \"code\": \"INVALID_OBJECT_PREFIX\"\n      }\n      ```\n    </CodeGroup>\n  </Tab>\n\n  <Tab title=\"401 Status Code\">\n    ### Unauthorized\n\n    <CodeGroup>\n      ```json ACCESS_DENIED\n      // Just set the correct API key in the Authorization header.\n      {\n          \"status\": \"error\",\n          \"code\": \"ACCESS_DENIED\"\n      }\n      ```\n    </CodeGroup>\n  </Tab>\n</Tabs>\n"
    },
    "blob-reference/endpoint/post": {
      "metadata": {
        "title": "Blob Object Post",
        "description": "This documentation provides a comprehensive overview of the POST /v1/objects endpoint of the SquareCloud Blob API.",
        "sidebarTitle": "Object Post"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField body=\"file\" type=\"file\" placeholder=\"myphone.png\" required>\n  Use FormData. (multipart/form-data)\n</ParamField>\n\n<ParamField query=\"name\" type=\"string\" placeholder=\"File Name\" required>\n  A string representing the name of the file. (without extension)<br />Must adhere to the a to z, A to Z, 0 to 9, and \\_ pattern. (3 to 32 characters)\n</ParamField>\n\n<ParamField query=\"prefix\" type=\"string\" placeholder=\"File Prefix\">\n  A string representing the prefix for the file.<br />Must adhere to the a to z, A to Z, 0 to 9, and \\_ pattern. (3 to 32 characters)\n</ParamField>\n\n<ParamField query=\"expire\" type=\"number\" placeholder=\"Expiration (days)\">\n  A number indicating the expiration period of the file, ranging from 1 to 365 days.\n</ParamField>\n\n<ParamField query=\"security_hash\" type=\"boolean\" placeholder=\"Security Hash\">\n  Set to true if a security hash is required.\n</ParamField>\n\n<ParamField query=\"auto_download\" type=\"boolean\" placeholder=\"Auto Download\">\n  Set to true if the file should be set for automatic download.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. \"success\" if successful, \"error\" if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"id\" type=\"string\">\n      The ID of the uploaded file.\n    </ResponseField>\n\n    <ResponseField name=\"name\" type=\"string\">\n      The name of the uploaded file.\n    </ResponseField>\n\n    <ResponseField name=\"size\" type=\"number\">\n      The size of the uploaded file, in bytes.\n    </ResponseField>\n\n    <ResponseField name=\"url\" type=\"string\">\n      The URL of the uploaded file. (File distributed in Square Cloud CDN)\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\",\n      \"response\": {\n          \"id\": \"3155597145698959364/test_lxch4k7y-07ee.png\",\n          \"name\": \"test\",\n          \"size\": 416230,\n          \"url\": \"https://public-blob.squarecloud.dev/3155597145698959364/test_lxch4k7y-07ee.png\"\n      }\n  }\n  ```\n</ResponseExample>\n\n### Troubleshooting\n\n<Tabs>\n  <Tab title=\"400 Status Code\">\n    ### Object-Related\n\n    <CodeGroup>\n      ```json NAME\n      // The provided object name is invalid. \n      // Must adhere to the a to z, A to Z, 0 to 9, and _ pattern.\n      {\n          \"status\": \"error\",\n          \"code\": \"INVALID_OBJECT_NAME\"\n      }\n      ```\n\n      ```json PREFIX\n      // The provided object prefix is invalid.\n      // Must adhere to the a to z, A to Z, 0 to 9, and _ pattern.\n      {\n          \"status\": \"error\",\n          \"code\": \"INVALID_OBJECT_NAME\"\n      }\n      ```\n\n      ```json EXPIRE\n      // The provided expiration value for the object is invalid.\n      // Must be a number ranging from 1 to 365. (value in days).\n      {\n          \"status\": \"error\",\n          \"code\": \"INVALID_OBJECT_EXPIRE\"\n      }\n      ```\n\n      ```json SECURITY_HASH\n      // The provided security hash boolean is invalid.\n      // Just set to true or false. üòÖ\n      {\n          \"status\": \"error\",\n          \"code\": \"INVALID_OBJECT_SECURITY_HASH\"\n      }\n      ```\n\n      ```json AUTO_DOWNLOAD\n      // The provided auto-download boolean is invalid.\n      // Just set to true or false. üòÖ\n      {\n          \"status\": \"error\",\n          \"code\": \"INVALID_OBJECT_AUTO_DOWNLOAD\"\n      }\n      ```\n    </CodeGroup>\n\n    ### File-Related\n\n    <Warning>Actually, the maximum file size is 100mb. In the future, we plan to increase to 10GB. But for now, it's 100mb because of the CDN. </Warning>\n\n    <CodeGroup>\n      ```json INVALID_FILE\n      // The provided file is invalid.\n      {\n          \"status\": \"error\",\n          \"code\": \"INVALID_FILE\"\n      }\n      ```\n\n      ```json FILETYPE\n      // The provided file type is invalid.\n      {\n          \"status\": \"error\",\n          \"code\": \"INVALID_FILETYPE\"\n      }\n      ```\n\n      ```json FILE_TOO_SMALL\n      // The file size is too small (< 1kb).\n      {\n          \"status\": \"error\",\n          \"code\": \"FILE_TOO_SMALL\"\n      }\n      ```\n\n      ```json FILE_TOO_LARGE\n      // The file size is too large (> 100mb).\n      {\n          \"status\": \"error\",\n          \"code\": \"FILE_TOO_LARGE\"\n      }\n      ```\n    </CodeGroup>\n  </Tab>\n\n  <Tab title=\"401 Status Code\">\n    ### Unauthorized\n\n    <CodeGroup>\n      ```json ACCESS_DENIED\n      // Just set the correct API key in the Authorization header.\n      {\n          \"status\": \"error\",\n          \"code\": \"ACCESS_DENIED\"\n      }\n      ```\n    </CodeGroup>\n  </Tab>\n</Tabs>\n"
    },
    "blob-reference/endpoint/stats": {
      "metadata": {
        "title": "Blob Account Stats",
        "description": "This documentation provides a comprehensive overview of the GET /v1/stats endpoint of the SquareCloud Blob API.",
        "sidebarTitle": "Account Stats"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<Warning>Status updates every 1 minute.</Warning>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. \"success\" if successful, \"error\" if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"objects\" type=\"number\">\n      The total number of objects in your account.\n    </ResponseField>\n\n    <ResponseField name=\"size\" type=\"number\">\n      The total size of all objects in your account, in bytes.\n    </ResponseField>\n\n    <ResponseField name=\"storagePrice\" type=\"number\">\n      The total price of storage for all objects in your account, in BRL.\n    </ResponseField>\n\n    <ResponseField name=\"objectsPrice\" type=\"number\">\n      The total price of all objects in your account, in BRL.\n    </ResponseField>\n\n    <ResponseField name=\"totalEstimate\" type=\"number\">\n      The total price of all objects in your account, in BRL.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json Response - [15m cache]\n  {\n    \"status\": \"success\",\n    \"response\": {\n      \"objects\": 5,\n      \"size\": 1628388,\n      \"storagePrice\": 0,\n      \"objectsPrice\": 0,\n      \"totalEstimate\": 0\n    }\n  }\n  ```\n</ResponseExample>\n\n### Troubleshooting\n\n<Tabs>\n  <Tab title=\"401 Status Code\">\n    ### Unauthorized\n\n    <CodeGroup>\n      ```json ACCESS_DENIED\n      // Just set the correct API key in the Authorization header.\n      {\n          \"status\": \"error\",\n          \"code\": \"ACCESS_DENIED\"\n      }\n      ```\n    </CodeGroup>\n  </Tab>\n</Tabs>\n"
    },
    "faqs/troubleshooting/ABUSE_REQUESTS": {
      "metadata": {
        "title": "Solving ABUSE_REQUESTS",
        "description": "Learn how to address the ABUSE_REQUESTS error, caused by excessive requests to Discord and/or Amino APIs, and ensure your application runs smoothly.",
        "sidebarTitle": "Solving ABUSE_REQUESTS"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## When does it occur?\n\nThe ABUSE\\_REQUESTS error occurs when your application is shut down due to a high volume of requests made to the Discord and/or Amino APIs. This may result from inefficient coding practices, lack of caching mechanisms, or surpassing the allocated request limits.\n\n```bash\n[SQUARE-SHIELD] ABUSE_REQUESTS\n```\n\n## Why does it occur?\n\nThis error typically arises when your application exceeds the permissible limits for making requests to the Discord and/or Amino APIs. It could be a consequence of a rapid increase in user activity or inefficient coding that generates an excessive number of API calls.\n\n## How to fix\n\nAddressing the ABUSE\\_REQUESTS error involves monitoring and optimizing the sections of your code responsible for API requests, implementing effective caching mechanisms, and, if necessary, requesting an increase in your API request limit through the official support channels.\n\n### Monitor and Optimize Your Code\n\n- Identify Problematic Code: Use logging tools or profiling to pinpoint sections of your code that generate a large number of API requests.\n- Optimize API Calls: Review and optimize the code responsible for API calls. Minimize unnecessary requests and ensure that each call is essential for your application's functionality.\n\n### Implement Caching Mechanisms\n\n- Use Local Caching: Store frequently requested data locally to avoid unnecessary API calls. This reduces the load on the servers and improves response times.\n- Set Expiry Times: Implement caching with expiration times to ensure that your application fetches fresh data when necessary while minimizing the number of API requests.\n\n### Request an Increase in Request Limit\n\nIf your application genuinely requires a higher API request limit, consider reaching out to the Discord and/or Amino support channels to request an increase. Provide justifications for the increased limit and any measures you've taken to optimize your code.\n\n### Keep Your Application Updated\n\nEnsure your application is using the latest version of any libraries or SDKs interacting with the APIs. Regularly check for updates, as developers often release new versions to address performance issues and improve efficiency.\n\n```bash Update discord.js\nnpm install discord.js@latest\n# or update in your package.json\n```\n\n```bash Update discord.py\npip install discord.py\n# or update in your requirements.txt\n```\n\n### Test and Restart Your Application\n\nAfter making the necessary changes, thoroughly test your application to ensure that the modifications effectively reduce the number of API requests. Additionally, restart your application to apply the updates and monitor its performance.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "faqs/troubleshooting/BETTER_SQLITE3_ERROR": {
      "metadata": {
        "title": "Solving 'Could not locate the bindings file'",
        "description": "Learn how to resolve the 'Could not locate the bindings file' issue in your application.",
        "sidebarTitle": "Solving BETTER_SQLITE3_ERROR"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## When does it occur?\n\nThis issue happens when the `better-sqlite3` library or a library that depends on it, like `quick.db`, is not updated.\n\n```bash\nError: Could not locate the bindings file. Tried:\n ‚Üí /application/node_modules/better-sqlite3/build/better_sqlite3.node\n [...]\n```\n\n## Why does it occur?\n\nThis error occurs because the `better-sqlite3` library has not been updated to the latest version. In `better-sqlite3` **11.x.x and earlier**, the library **was not support Node.js LTS v22**.x.x.\n\n## How to fix\n\nTo fix this issue, you need to update the `better-sqlite3` library to the latest version. Remember to update libraries that depend on `better-sqlite3`, like `quick.db`.\n\n### Check the latest versions of the libraries:\n\n- [npm better-sqlite3](https://www.npmjs.com/package/better-sqlite3)\n- [npm quick.db](https://www.npmjs.com/package/quick.db)\n\n### Update the `better-sqlite3` in your `package.json`\n\nAfter checking the latest version of the library, you can update it in your `package.json`. For example, if the current version is 11.10.0, you can use the following:\n\n```json Update manually in your package.json\n\"better-sqlite3\": \"^11.10.0\",\n\"quick.db\": \"^9.1.7\" // or any other library that depends on better-sqlite3\n```\n\n```bash Update using the terminal\nnpm install better-sqlite3@latest\n```\n\n### Removing files for a clean installation\n\nAfter updating your `package.json`, you should remove the files and folders: `node_modules`, `package-lock.json`, and the `.npm` folder.\n\n### Reboot Your Application\n\nIn conclusion, simply restart your application by clicking on the blue button. If you have followed all the steps correctly, your application should no longer encounter this error.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "faqs/troubleshooting/INVALID_DEPENDENCY": {
      "metadata": {
        "title": "Solving INVALID_DEPENDENCY",
        "description": "Learn how to resolve the Solving INVALID_DEPENDENCY issue in your application.",
        "sidebarTitle": "Solving INVALID_DEPENDENCY"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## When does it occur?\n\nThis issue occurs when your dependency file could not be located in the root of your application.\n\n## Why does it occur?\n\nThis issue occurs when your dependency file could not be located in the root of your application. This can happen when your dependency file does not exist or its nominated with an extra `.txt`.\n\n## How to fix\n\n### For Node.js (package.json)\n\n1. **Navigate to the root directory of your project:**\n   Ensure that you are in the main directory of your application.\n\n2. **Check for the presence of `package.json`:**\n   Verify whether the `package.json` file exists in the root directory. If it is not present, create one using the following command:\n   ```bash\n   npm init -y\n   ```\n   This command initializes a default `package.json` file.\n\n3. **Ensure correct naming:**\n   Confirm that the file is named exactly as `package.json` and does not have any additional extensions (e.g., `package.json.txt`). If there are any discrepancies, rename the file accordingly.\n\n### For Python (requirements.txt)\n\n1. **Navigate to the root directory of your project:**\n   Make sure you are in the main directory of your application.\n\n2. **Check for the presence of `requirements.txt`:**\n   Confirm whether the `requirements.txt` file exists in the root directory. If it is missing, create one.\n\n3. **Ensure correct naming:**\n   Verify that the file is named exactly as `requirements.txt` without any additional extensions (e.g., `requirements.txt.txt`). If the name is incorrect, rename the file accordingly.\n\n4. **Add dependencies to the file:**\n   Open the `requirements.txt` file and add the necessary dependencies for your Python project. For example:\n\n```plaintext requirements.txt\ndiscord.py\n```\n\n### Additional Tips:\n\n- **Double-check file extensions:**\n  Ensure that the file extensions are correct (e.g., `.json` for Node.js, `.txt` for Python). Incorrect extensions might lead to the `INVALID_DEPENDENCY` error.\n\n- **Review documentation and guides:**\n  Consult the documentation for your specific programming language ([Node.js](/articles/getting-started-with-nodejs)/[Python](/articles/getting-started-with-python)).\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "faqs/troubleshooting/LACK_OF_CPU": {
      "metadata": {
        "title": "Solving LACK_OF_CPU",
        "description": "Learn how to resolve the LACK_OF_CPU issue in your application.",
        "sidebarTitle": "Solving LACK_OF_CPU"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## When does it occur?\n\nThis issue occurs when your application is using more CPU than is available.\n\n```bash\n[SQUARE-SHIELD] LACK_OF_CPU\n```\n\n## Why does it occur?\n\nThis issue occurs when your application is using more CPU than is available. This can happen when your application is under heavy load, or when your application is not optimized to use less CPU.\n\n## How to fix\n\nThe CPU allocated to your application is determined by your current plan. To address this, consider upgrading to a higher plan on the [plans page](https://squarecloud.app/plans). Alternatively, optimize your application to reduce CPU usage.\n\n### Resubmitting your application\n\nAfter upgrading your plan, it's important to remove your application and resubmit it to reflect the updated CPU allocation.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "faqs/troubleshooting/LACK_OF_RAM": {
      "metadata": {
        "title": "Solving LACK_OF_RAM",
        "description": "Learn how to resolve the LACK_OF_RAM issue in your application.",
        "sidebarTitle": "Solving LACK_OF_RAM"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## When does it occur?\n\nThis issue occurs when your application is using more RAM than is available.\n\n```bash\n[SQUARE-SHIELD] LACK_OF_RAM\n```\n\n## Why does it occur?\n\nThis issue occurs when your application is using more RAM than is available. This can happen when your application is using more RAM than is available on your current plan.\n\n## How to fix\n\nNavigate to the file manager and locate the `squarecloud.app/config` file.\n\n1. Open the file and locate the `MEMORY` field.\n2. Increase the value of the `MEMORY` field. The value is in megabytes (MB).\n3. We recommend increasing the value by 50% of the current value. For example, if the current value is `512`, increase it to `768`.\n\nIf you are already using the maximum available RAM based on your current plan, consider upgrading to a higher plan by visiting the [plans page](https://squarecloud.app/plans).\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "faqs/troubleshooting/MODULE_NOT_FOUND": {
      "metadata": {
        "title": "Solving MODULE_NOT_FOUND",
        "description": "Learn how to resolve the MODULE_NOT_FOUND issue in your application.",
        "sidebarTitle": "Solving MODULE_NOT_FOUND"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## When does it occur?\n\nThis error occurs when your application tries to use a library that is not installed in the environment.\n\n```bash javascript\nError: Cannot find module 'discord.js'\n```\n\n```bash python\nModuleNotFoundError: No module named 'discord.py'\n```\n\n## Why does it occur?\n\nThis can happen when you try to use a library that is not installed by default in the environment. For example, the `discord.js` library is not installed by default in the JavaScript environment.\n\n## How to fix\n\nTo fix this, you need to add the missing library to your project's dependency files. These files list the libraries that will be installed in the environment. In the case of Python, this file is called `requirements.txt`, and for JavaScript, it is called `package.json`.\n\nHere is an example of the content of these files after adding the missing libraries:\n\n```json package.json \n{\n  \"name\": \"my-app\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"discord.js\": \"14.14.1\",\n    // other dependencies...\n  }\n}\n```\n\n```txt requirements.txt\ndiscord.py\n# other dependencies...\n```\n\n### Reboot Your Application\n\nAfter adding the necessary libraries to your project's dependency files, you should reboot your application. This allows your environment to recognize and install the newly added libraries.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "faqs/troubleshooting/TOKEN_INVALID": {
      "metadata": {
        "title": "Solving TOKEN_INVALID",
        "description": "Learn how to resolve the TOKEN_INVALID code error and ensure smooth communication with the Discord API.",
        "sidebarTitle": "Solving TOKEN_INVALID"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## When does it occur?\n\nThe authentication token for your Discord bot was not found or appears to be invalid. This might happen if the token is regenerated, revoked, or the bot's access to the server is restricted.\n\n```bash discord.js\nError [TOKEN_INVALID]: An invalid token was provided.\n```\n\n```bash discord.py\nLoginFailure: Improper token has been passed.\n```\n\n## Why does it occur?\n\nYou will encounter this error when your application attempts to authenticate with the Discord API using an invalid or outdated bot token.\n\n## How to fix\n\nEnsure that the token provided when creating the Discord.js client is accurate and up-to-date. If you suspect the token might be invalid, regenerate it on the Discord Developer Portal.\n\n### Regenerate the Token\n\nIf you have confirmed that the current token is invalid or compromised, generate a new one on the [Discord Developer Portal](https://discord.com/developers/applications).\n\n### Update the Token in Your Code\n\nIf you are using a `.env` file to store the token, make sure to update the file with the new token.\n\nGenerally, the token is stored in `.env` or `config,json` files. If you are using a different method to store the token, update the code accordingly.\n\n### Keep the library up to date\n\nEnsure you are using the latest version of your library. Developers regularly update the library to fix bugs and address compatibility issues.\n\n```bash Update discord.js\nnpm install discord.js@latest\n# or update in your package.json\n```\n\n```bash Update discord.py\npip install discord.py\n# or update in your requirements.txt\n```\n\n### Reboot Your Application\n\nAfter implementing the changes, restart your application to apply the updates. This ensures that the new token and any code modifications take effect.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "faqs/troubleshooting/access-website": {
      "metadata": {
        "title": "Troubleshooting Access Issues on Website or API",
        "description": "Discover how to resolve issues when accessing your website or API.",
        "sidebarTitle": "Website Access Problems"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Unauthorized\n\n- There are 2 situations that can result in this message when trying to access a website/API:\n\n1. The URL of the site you tried to access is not hosted on Square Cloud. Any subdomain of a site that is not hosted on Square Cloud and is attempted to be accessed will receive the message \"Unauthorized\". If you added the \"SUBDOMAIN\" field after deploying your application, this field will not be read, and the URL will not exist because this field is only read during the deployment. Therefore, you need to remove and redeploy your application with this field correctly configured.\n\n2. If you have recently hosted your site, please wait 1 minute. Square Cloud is finalizing the configurations for your site. After this period, try accessing it again.\n\n<Frame>\n  <img src=\"/images/articles/cloudflare/unauthorized-dns.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n## Timeout\n\n- There are 4 situations that can result in this message when trying to access a website/API:\n\n1. Your website or API may have errors preventing it from responding properly.\n\n2. If the website or API is offline, you will also receive this message. It's important to check the logs to identify any potential errors.\n\n3. In Square Cloud, the default port for websites and APIs is port `80` for HTTP traffic. If your website or API is using a different port, you may encounter this error message.\n\n4. If you do not correctly configure the host as `0.0.0.0` when hosting your site, this can lead to access errors.\n\n<Frame>\n  <img src=\"/images/articles/cloudflare/timeout.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "faqs/troubleshooting/lavalink-closed-abnormally": {
      "metadata": {
        "title": "Solving Lavalink Closed Abnormally issue",
        "description": "Due to recent Lavalink updates you may come across the following error: Lavalink Closed Abnormally. This article will help you solve this issue.",
        "sidebarTitle": "Lavalink Closed Abnormally"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## When does it occur?\n\nWhen you are trying to connect your Lavalink server to your app hosted on Square Cloud, you may come across the following error:\n\n```\nError: Unexpected server response: 400\nError: WebSocket closed abnormally with code 1006.\n```\n\n## Why does it occur?\n\nYou will receive this error if you are using a Lavalink version that is not compatible with the library you are using.\nFor example, if you are using the Lavalink version 4.0.0, you will receive this error if you are using the Lavalink client version 3, as the Lavalink version 4 is entirely REST.\n\n## How to fix\n\nTo fix this error, you will need to update your Lavalink client to the latest version. Or use a Lavalink version that is compatible with your Lavalink client.\n\n### Bonus Tips:\n\n- Remember to open your Lavalink server in port 80.\n- Connect in your Lavalink server using port 443 and option `secure: true`.\n\nCongratulations! You have successfully solved the Lavalink Closed Abnormally issue. Now you can connect your Lavalink to your app hosted on Square Cloud.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "faqs/troubleshooting/whitelist-mongodb": {
      "metadata": {
        "title": "Configuring MongoDB Atlas Whitelist",
        "description": "Due to how Square works in a way that has a dynamic IP, by an exclusive technology, it is impossible to provide you with an IP, since every restart in the application, you receive a unique IP.",
        "sidebarTitle": "Whitelisting Square in MongoDB"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "**Square Cloud** stands out with its **dynamic IP allocation**, assigning a **unique address** with **each application restart**. Unlike static IPs, this dynamic approach enhances security by constantly changing the network footprint, **making it more resilient against potential threats**.\n\n## When does it occur?\n\nWhen you are trying to connect your MongoDB Atlas database to your app hosted on Square Cloud, you may come across the following error:\n\n```\nMongoNetworkError: connection 0 to shard-xxx-xxx.mongodb.net:27017 closed\n```\n\n## Why does it occur?\n\nYou will receive this error message if you have not included the MongoDB Atlas addresses, the IP where your app is hosted, on the whitelist.\n\n## How to fix\n\nTo fix this error, you need to whitelist the IP address, according to the [mongodb documentation](https://www.mongodb.com/docs/atlas/security/ip-access-list/), you need to whitelist 0.0.0.0/0 IP address.\n\n<Frame>\n  <img src=\"/images/troubleshooting/mongodb-whitelist.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\nCongratulations! You have successfully whitelisted the IP address 0.0.0.0/0 for your MongoDB Atlas database. Now you can connect your database to your app hosted on Square Cloud.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "sdks/js/client": {
      "metadata": {
        "title": "Client",
        "description": "The main object is the SquareCloudAPI object, instantiated with an API key. This object signifies a connection to the Square Cloud service and serves as an interface for interacting with different service aspects."
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "```bash\nnpm i @squarecloud/api\n```\n\n<Tabs>\n  <Tab title=\"JavaScript\">\n    ```javascript\n    const { SquareCloudAPI } = require(\"@squarecloud/api\");\n\n    const api = new SquareCloudAPI(\"Your API Key\");\n    ```\n  </Tab>\n\n  <Tab title=\"TypeScript\">\n    ```typescript\n    import { SquareCloudAPI } from \"@squarecloud/api\";\n\n    const api = new SquareCloudAPI(\"Your API Key\");\n    ```\n  </Tab>\n</Tabs>\n\n## Parameters\n\n### API Key\n\n- Type: `string`\n- Required: Yes\n- Description: A valid API key must be provided as a string for authentication.\n\n## Get Started\n\nUsing the get started endpoint, you can obtain a user object representing the user associated with the API key, as well as a list of applications associated with the user.\n\n```javascript\nconst user = await api.user.get();\n\nconsole.log(user.applications); // List of Application's\n```\n\n## Application\n\nUsing the `Client`, you can obtain an object representing your application. This object is an instance of the `Application` class, allowing you to manage your application more conveniently without always needing to pass the ID.\n\n```javascript Obtaining an Application\nconst app = user.applications.get(\"Application ID\");\nconsole.log(app); // Output: application object\n```\n\n```javascript Obtaining All Applications\nconsole.log(user.applications); // user = api.user.get() [Promise]\n```\n"
    },
    "sdks/js/commit_and_upload": {
      "metadata": {
        "title": "Commit and Upload",
        "description": "In this section you will learn how to make commits and uploads using the Square Cloud JavaScript SDK."
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Making a commit\n\n`application.commit()` is a method that allows you to commit a file to your application.\n\n<Tabs>\n  <Tab title=\"Using Buffer\">\n    ```javascript\n    const { SquareCloudAPI } = require(\"@squarecloud/api\");\n    const api = new SquareCloudAPI(\"Your API Key\");\n\n    const application = await api.applications.get(\"Application ID\");\n\n    // Specify the content and name of the file you want to commit\n    const fileContent = Buffer.from(\"Your file content\");\n    const fileName = \"file.txt\";\n\n    // Perform the commit operation\n    const success = await application.commit(fileContent, fileName);\n\n    // Handle the result accordingly\n    if (success) {\n        console.log(`File \"${fileName}\" committed successfully.`);\n    } else {\n        console.error(`Failed to commit file \"${fileName}\".`);\n    }\n    ```\n  </Tab>\n\n  <Tab title=\"Using Absolute Path\">\n    ```javascript\n    const { SquareCloudAPI } = require(\"@squarecloud/api\");\n    const api = new SquareCloudAPI(\"Your API Key\");\n\n    const application = await api.applications.get(\"Application ID\");\n\n    // Specify the content and name of the file you want to commit\n    const { join } = require(\"node:path\");\n    const fileName = \"file.txt\";\n    const filePath = join(__dirname, fileName);\n\n    // Optionally, set whether the application should restart after the commit\n    const shouldRestart = true;\n\n    // Perform the commit operation\n    const success = await application.commit(filePath, fileName, shouldRestart);\n\n    // Handle the result accordingly\n    if (success) {\n        console.log(`File \"${fileName}\" committed successfully.`);\n    } else {\n        console.error(`Failed to commit file \"${fileName}\".`);\n    }\n    ```\n  </Tab>\n</Tabs>\n\n## Making a upload\n\n`application.create()` is a method that allows you to upload a application to Square Cloud.\n\n```javascript\nconst { SquareCloudAPI } = require(\"@squarecloud/api\");\nconst api = new SquareCloudAPI(\"Your API Key\");\n\n// Specify the content and name of the zip file you want to upload\nconst { join } = require(\"node:path\");\nconst fileName = \"application.zip\";\nconst filePath = join(__dirname, fileName);\n\n// Perform the upload operation\nconst success = await api.applications.create(filePath);\n\n// Handle the result accordingly\nif (success) {\n    console.log(`Application uploaded successfully.`, success);\n    // Return the application uploaded information (id, tag, description, etc.)\n} else {\n    console.error(`Failed to upload application.`);\n}\n```\n\n**Remember that to upload an application you need a zip that contains (at least) the following files:**:\n\n- Main file: responsible for starting your application\n- Dependencies file: contains information about which dependencies are necessary\n- Configuration file (squarecloud.app): a configuration file specifying the\n  name,\n  description, main file name, version, etc. To learn more about the\n  configuration file, take a look at this [guide](https://docs.squarecloud.app/getting-started/config-file).\n"
    },
    "sdks/js/managing_application": {
      "metadata": {
        "title": "Managing Applications",
        "description": "In this section, you will learn how to manage your application using the available library. You can interact with your application in various ways, such as obtaining information about the application status, accessing logs, starting, stopping, and restarting the application, as well as managing files associated with it."
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Getting the status of your application\n\n`application.getStatus()` return a `ApplicationStatus` class.\n\n```javascript\nconst { SquareCloudAPI } = require(\"@squarecloud/api\");\nconst api = new SquareCloudAPI(\"Your API Key\");\n\nconst application = await api.applications.get(\"Application ID\");\nconst status = await application.getStatus();\n\nconsole.log(status.usage.cpu);     // '0.22%'\nconsole.log(status.usage.ram);     // '70MB'\nconsole.log(status.usage.network); // {'total': '0 KB ‚Üë 0 KB ‚Üì', 'now': '0 KB ‚Üë 0 KB ‚Üì'}\nconsole.log(status.usage.storage); // '0B'\nconsole.log(status.running);       // true | false\nconsole.log(status.status);        // 'running' | 'exited' ...\n```\n\n## Getting logs\n\n`application.getLogs()` return a String.\n\n```javascript\nconst application = await api.applications.get(\"Application ID\");\nconst logs = await application.getLogs();\n\nconsole.log(logs); // String\n```\n\n## Starting the application\n\n`application.start()` return a Boolean.\n\n```javascript\nconst application = await api.applications.get(\"Application ID\");\nconst started = await application.start();\n\nconsole.log(started); // Boolean (true or false)\n```\n\n## Stopping the application\n\n`application.stop()` return a Boolean.\n\n```javascript\nconst application = await api.applications.get(\"Application ID\");\nconst stopped = await application.stop();\n\nconsole.log(stopped); // Boolean (true or false)\n```\n\n## Restarting the application\n\n`application.restart()` return a Boolean.\n\n```javascript\nconst application = await api.applications.get(\"Application ID\");\nconst restarted = await application.restart();\n\nconsole.log(restarted); // Boolean (true or false)\n```\n\n## Deleting an application\n\n`application.delete()` return a Boolean.\n\n<Warning>\n  This will delete your application **PERMANENTLY**, meaning that unless you have a backup of your application, it cannot be recovered.\n</Warning>\n\n```javascript\nconst application = await api.applications.get(\"Application ID\");\nconst deleted = await application.delete();\n\nconsole.log(deleted); // Boolean (true or false)\n```\n"
    },
    "sdks/js/managing_files": {
      "metadata": {
        "title": "Managing Files",
        "description": "In this section, you will find information and examples on how to manipulate the files associated with your application. Learn how to list, read, create, and delete files using the Square Cloud JavaScript SDK."
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Getting a list of files\n\n`application.files.list()` return a list of `APIListedFile` objects.\n\n```javascript\nconst application = await api.applications.get(\"Application ID\");\nconst filesList = await application.files.list();\n\nconsole.log(filesList); // Return a Array of File Objects\n// [{type: \"file\", name: \"index.js\", size: 123, lastModified: 123456789}]\n```\n\n## Reading a file\n\n`application.files.read()` returns a Buffer object.\n\n```javascript\nconst application = await api.applications.get(\"Application ID\");\nconst file = await application.files.read(\"index.js\");\n\nconsole.log(file.toString()); // String\n```\n\n## Creating a file\n\n`application.files.create()` returns a Boolean.\n\n<Tabs>\n  <Tab title=\"Using Buffer\">\n    ```javascript\n    const { SquareCloudAPI } = require(\"@squarecloud/api\");\n    const api = new SquareCloudAPI(\"Your API Key\");\n\n    const application = await api.applications.get(\"Application ID\");\n\n    // Specify the content and name of the file you want to create\n    const fileContent = Buffer.from(\"archive content here\");\n    const filePath = \"./folder/test_file.txt\";\n\n    // Perform the create file operation\n    const file = await application.files.create(fileContent, filePath);\n\n    console.log(file); // Boolean (true or false)\n    ```\n  </Tab>\n\n  <Tab title=\"Using Absolute Path\">\n    ```javascript\n    const { SquareCloudAPI } = require(\"@squarecloud/api\");\n    const api = new SquareCloudAPI(\"Your API Key\");\n\n    const application = await api.applications.get(\"Application ID\");\n\n    // Specify the content and name of the file you want to create\n    const { join } = require(\"node:path\");\n    const fileName = \"local_txt_file.txt\";\n    const fileContent = join(__dirname, fileName);\n    const filePathtoCreate = \"./folder/test_file.txt\";\n\n    // Perform the create file operation\n    const file = await application.files.create(fileContent, filePathtoCreate);\n\n    console.log(file); // Boolean (true or false)\n    ```\n  </Tab>\n</Tabs>\n\n## Deleting a file\n\n`application.files.delete()` returns a Boolean.\n\n```javascript\nconst application = await api.applications.get(\"Application ID\");\nconst deleted = await application.files.delete(\"index.js\");\n\nconsole.log(deleted); // Boolean (true or false)\n```\n"
    },
    "sdks/py/client": {
      "metadata": {
        "title": "Client",
        "description": "The central object is the Client object, instantiated with an API key. This object represents a connection to the Square Cloud service and acts as an interface to interact with various aspects of the service."
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "[Client]: ./#client\n\n```python\nimport squarecloud as square\n\nclient = square.Client(api_key='API_KEY')\n\nasync def example():\n    app_status = await client.app_status('application_id')\n    print(app_status)\n```\n\n## Parameters:\n\n- api\\_key\n\n`api_key: str`: This is the required parameter when instantiating the Client object.\nA valid API key must be provided as a string for authentication to be performed correctly.\n\n- debug\n\n`debug: bool = True`: This is an optional parameter that controls the debug mode of\nthe Client object. When set to True, every time a request is made, the Client object prints\ndebug information to facilitate the detection and resolution of\nissues. However, in production environments, it is common to set this parameter\nto False to avoid displaying unnecessary information.\nThis value defaults to True.\n\n## Application\n\nUsing the [Client], you can obtain an object (or a list of\nobjects) that represents your application. This object would be an instance of the\nApplication class that you can use\nto manage your application more conveniently, without always needing to pass\nthe id of your application.\n\n<Tabs>\n  <Tab title=\"obtaining an application\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        app = await client.app('application id')\n        print(app)  # <Application tag='example' id='application_id'>\n    ```\n  </Tab>\n\n  <Tab title=\"obtaining all applications\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        apps = await client.all_apps()\n        print(apps)  # list[<Application tag='example' id='application_id'>]\n    ```\n  </Tab>\n</Tabs>\n"
    },
    "sdks/py/commit_and_upload": {
      "metadata": {
        "title": "Commit and Upload",
        "description": "In this section you will learn how to make commits and uploads using the Client, Application and CLI."
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "You can make commits and uploads using Client or Application. You\njust need a `squarecloud.File` object and pass the path where your\nzip file is.\n\n## Making a commit\n\n<Tabs>\n  <Tab title=\"Using Client\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client('API_KEY')\n\n    async def example():\n        file = square.File('path/to/you/file.zip')\n        await client.commit(file=file, app_id='application_id')\n    ```\n  </Tab>\n\n  <Tab title=\"Using Application\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client('API_KEY')\n\n    async def example():\n        app = await client.app(app_id='application_id')\n        file = square.File('path/to/you/file.zip')\n        await app.commit(file=file)\n    ```\n  </Tab>\n</Tabs>\n\n## Making a upload\n\nTo upload an application, you can use only  the \\[Client].\n\n<Tabs>\n  <Tab title=\"Using Client\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(...)\n\n    async def example():\n        file = square.File('path/to/you/file.zip')\n        await client.upload_app(file=file)\n    ```\n  </Tab>\n</Tabs>\n\n**Remember that to upload an application you need a zip that contains (at least) the following files:**:\n\n- Main file: responsible for starting your application\n- Dependencies file: contains information about which dependencies are necessary\n- Configuration file (squarecloud.app): a configuration file specifying the\n  name,\n  description, main file name, version, etc. To learn more about the\n  configuration file, take a look at this [guide](https://docs.squarecloud.app/getting-started/config-file).\n\n<Tip>\n  For your convenience, a class has been added to create this configuration file:\n  `squarecloud.utils.ConfigFile`.\n</Tip>\n"
    },
    "sdks/py/deployments": {
      "metadata": {
        "title": "Deployments",
        "description": "This guide provides examples on how to integrate and manage application deployments using this SDK. You will learn how to create GitHub integrations, retrieve current integration details, and view the latest deployments using both the client and application objects."
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Create Integration\n\n<Tabs>\n  <Tab title=\"Using Client\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n\n    async def example():\n        webhook_url = await client.github_integration(\n            'application_id', access_token='access_token'\n        )\n        print(\n            webhook_url\n        )\n    ```\n  </Tab>\n\n  <Tab title=\"Using Application\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n\n    async def example():\n        app = await client.app('application_id')\n        webhook_url = await app.github_integration(access_token='access_token')\n        print(\n            webhook_url\n        )\n    ```\n  </Tab>\n</Tabs>\n\n## Obtaining Current Integration\n\n<Tabs>\n  <Tab title=\"Using Client\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n\n    async def example():\n        webhook_url = await client.current_app_integration(\n            'application_id',\n        )\n        print(webhook_url)\n    ```\n  </Tab>\n\n  <Tab title=\"Using Application\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n\n    async def example():\n        app = await client.app('application_id')\n        webhook_url = await app.current_integration()\n        print(\n            webhook_url\n        )\n    ```\n  </Tab>\n</Tabs>\n\n## Last Deploys\n\n<Tabs>\n  <Tab title=\"Using Client\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n\n    async def example():\n        deploys = await client.last_deploys('application_id')\n        print(deploys)  # [[DeployData(...), DeployData(...), DeployData(...)]]\n    ```\n  </Tab>\n\n  <Tab title=\"Using Application\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n\n    async def example():\n        app = await client.app('application_id')\n        deploys = await app.last_deploys()\n        print(deploys)  # [[DeployData(...), DeployData(...), DeployData(...)]]\n    ```\n  </Tab>\n</Tabs>\n"
    },
    "sdks/py/installation": {
      "metadata": {
        "title": "Installation",
        "description": "Learn how to install the squarecloud-api package for seamless integration into your projects"
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "```bash\npip install squarecloud-api\n```\n\nNow you can seamlessly integrate the squarecloud-api into your development workflow üòä.\n"
    },
    "sdks/py/managing_application": {
      "metadata": {
        "title": "Managing Applications",
        "description": "In this section, you will learn how to manage your application using the available library. You can interact with your application in various ways, such as obtaining information about the application status, accessing logs, starting, stopping, and restarting the application, as well as managing files associated with it."
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "[Client]: client\n\n[Application]: client#aplication\n\nAll operations below can be performed by either the [Client] class, the\n[Application] class and the CLI. Below are examples of how to perform each of\nthese tasks using both classes:\n\n## Getting the status of your application\n\n`client.app_status` and `app.status` return a `StatusData` object.\n\n<Tabs>\n  <Tab title=\"Using Client\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        status = await client.app_status('application_id')  # StatusData(...)\n\n        print(status.ram)      # '70MB'\n        print(status.cpu)      # '5%'\n        print(status.network)  # {'total': '0 KB ‚Üë 0 KB ‚Üì', 'now': '0 KB ‚Üë 0 KB ‚Üì'}\n        print(status.running)  # True | False\n        print(status.storage)  # '0B'\n    ```\n  </Tab>\n\n  <Tab title=\"Using Application\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        app = await client.app('application_id')  # StatusData(...)\n        status = await app.status()\n\n        print(status.ram)  # '70MB'\n        print(status.cpu)  # '5%'\n        print(status.network)  # {'total': '0 KB ‚Üë 0 KB ‚Üì', 'now': '0 KB ‚Üë 0 KB ‚Üì'}\n        print(status.running)  # True | False\n        print(status.storage)  # '0B'\n    ```\n  </Tab>\n</Tabs>\n\n## Getting logs\n\n`client.get_logs` and `app.logs` return a `LogsData` object.\n\n<Tabs>\n  <Tab title=\"Using Client\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        logs = await client.get_logs('application_id')\n\n        print(logs)  # LogsData(logs='Hello World!')\n        print(logs.logs)  # 'Hello World'\n    ```\n  </Tab>\n\n  <Tab title=\"Using Application\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        app = await client.app('application_id')\n        logs = await app.logs()\n\n        print(logs)  # LogsData(logs='Hello World!')\n        print(logs.logs)  # 'Hello World'\n    ```\n  </Tab>\n</Tabs>\n\n## Starting the application\n\n`client.start_app` and `app.start` return a `Response` object.\n\n<Tabs>\n  <Tab title=\"Using Client\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        await client.start_app('application_id')\n    ```\n  </Tab>\n\n  <Tab title=\"Using Application\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        app = await client.app('application_id')\n        await app.start()\n    ```\n  </Tab>\n</Tabs>\n\n## Stopping the application\n\n`client.stop_app` and `app.stop` return a `Response` object.\n\n<Tabs>\n  <Tab title=\"Using Client\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        await client.stop_app('application_id')\n    ```\n  </Tab>\n\n  <Tab title=\"Using Application\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        app = await client.app('application_id')\n        await app.stop()\n    ```\n  </Tab>\n</Tabs>\n\n## Restarting the application\n\n`client.restart_app` and `app.restart` return a `Response` object.\n\n<Tabs>\n  <Tab title=\"Using Client\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        await client.restart_app('application_id')\n    ```\n  </Tab>\n\n  <Tab title=\"Using Application\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        app = await client.app('application_id')\n        await app.restart()\n    ```\n  </Tab>\n</Tabs>\n\n## Deleting an application\n\n`client.delete_app` and `app.delete` return a `Response` object.\n\n<Warning>\n  This will delete your application **PERMANENTLY**, meaning that unless you have a backup of your application, it cannot be recovered.\n</Warning>\n\n<Tabs>\n  <Tab title=\"Using Client\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        await client.delete_app('application_id')\n    ```\n  </Tab>\n\n  <Tab title=\"Using Application\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        app = await client.app('application_id')\n        await app.delete()\n    ```\n  </Tab>\n</Tabs>\n"
    },
    "sdks/py/managing_files": {
      "metadata": {
        "title": "Managing Files",
        "description": "In this section, you will find information and examples on how to manipulate the files associated with your application. Learn how to list, read, create, and delete files using the Client or the Application class for efficient resource administration of your application."
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "[Client]: client\n\n[Application]: client#application\n\nAll operations below can be performed by either the [Client] class, the\n[Application] class and the CLI. Below are examples of how to perform each of\nthese tasks using both classes:\n\n## Getting a list of files\n\n`client.app_files_list` and `app.files_list` return a list of `FileInfo` objects.\n\n<Tabs>\n  <Tab title=\"Using Client\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        files_list = await client.app_files_list(app_id='application_id', path='/')\n\n        for file in files_list:\n            print(file.name)  # 'main.py'\n            print(file.type)  # 'directory' or 'file'\n            print(file.size)  # 2140\n            print(file.lastModified)  # 1677112835000\n    ```\n  </Tab>\n\n  <Tab title=\"Using Application\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        app = await client.app('application_id')\n        files_list = await app.files_list(path='/')  # list[FileInfo(...)]\n\n        for file in files_list:\n            print(file.name)  # 'main.py'\n\n            print(file.type)  # 'directory' or 'file'\n\n            print(file.size)  # 2140\n\n            print(file.lastModified)  # 1677112835000\n    ```\n  </Tab>\n</Tabs>\n\n## Reading a file\n\n`client.read_app_file` and `app.read_file` return a `BytesIO` object.\n\n<Tabs>\n  <Tab title=\"Using Client\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        file_bytes = await client.read_app_file(\n            app_id='application_id', path='main.py'\n        )\n\n        print(file_bytes)  # b'01101000 01101001'\n    ```\n  </Tab>\n\n  <Tab title=\"Using Application\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        app = await client.app('application_id')\n        file_bytes = await app.read_file(path='main.py')\n\n        print(file_bytes)  # b'01101000 01101001'\n    ```\n  </Tab>\n</Tabs>\n\n## Creating a file\n\n`client.create_app_file` and `app.create_file` return a `Response` object.\n\n<Tabs>\n  <Tab title=\"Using Client\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        await client.create_app_file(\n            app_id='application_id', path='/file.txt', file=square.File('file.txt')\n        )\n    ```\n  </Tab>\n\n  <Tab title=\"Using Application\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        app = await client.app('application_id')\n\n        await app.create_file(path='/file.txt', file=square.File('file.txt'))\n    ```\n  </Tab>\n</Tabs>\n\n## Deleting a file\n\n`client.delete_app_file` and `app.delete_file` return a `Response` object.\n\n<Tabs>\n  <Tab title=\"Using Client\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        await client.delete_app_file(app_id='application_id', path='/file.txt')\n    ```\n  </Tab>\n\n  <Tab title=\"Using Application\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n    async def example():\n        app = await client.app('application_id')\n\n        await app.delete_file(path='/file.txt')\n    ```\n  </Tab>\n</Tabs>\n\n## Moving a file\n\n`client.move_app_file` and `app.move_file` return a `Response` object.\n\n<Tabs>\n  <Tab title=\"Using Client\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n\n    async def example():\n        await client.move_app_file(\n            app_id='application_id',\n            origin='path/to/origin/file.py',\n            dest='path/to/destination/file.py',\n        )\n    ```\n  </Tab>\n\n  <Tab title=\"Using Application\">\n    ```python\n    import squarecloud as square\n\n    client = square.Client(api_key='API KEY')\n\n\n    async def example():\n        app = await client.app('application_id')\n        await app.move_file(\n            origin='path/to/origin/file.py', dest='path/to/destination/file.py'\n        )\n    ```\n  </Tab>\n</Tabs>\n"
    },
    "api-reference/endpoint/apps/commit": {
      "metadata": {
        "title": "Commit Application Changes",
        "description": "Send a change to your application. It has a rate limit of 1 request every 3 seconds.",
        "sidebarTitle": "/v2/apps/:appId/commit"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "POST",
          "path": "/v2/apps/{app_id}/commit"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n<ParamField body=\"file\" type=\"file\" placeholder=\"commit.zip\" required>\n  Use FormData or NodeJS Buffer (single file or compress \\[zip])\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"message\" type=\"string\">\n  A message indicating the status of the commit.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/delete": {
      "metadata": {
        "title": "Delete Application",
        "description": "Remove your application from Square Cloud. (yellow category)",
        "sidebarTitle": "/v2/apps/:appId"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "DELETE",
          "path": "/v2/apps/{app_id}"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/info": {
      "metadata": {
        "title": "Get Application Information",
        "description": "Retrieve technical information about your application.",
        "sidebarTitle": "/v2/apps/:appId"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "GET",
          "path": "/v2/apps/{app_id}"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"code\" type=\"string\">\n  The status code of the response.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  The contents of the response.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"name\" type=\"string\">\n      The application's name.\n    </ResponseField>\n\n    <ResponseField name=\"id\" type=\"string\">\n      The application's ID.\n    </ResponseField>\n\n    <ResponseField name=\"owner\" type=\"string\">\n      The ID of the application owner.\n    </ResponseField>\n\n    <ResponseField name=\"cluster\" type=\"string\">\n      The application's cluster.\n    </ResponseField>\n\n    <ResponseField name=\"ram\" type=\"number\">\n      The application's RAM usage in MB.\n    </ResponseField>\n\n    <ResponseField name=\"language\" type=\"string\">\n      The application's programming language.\n    </ResponseField>\n\n    <ResponseField name=\"domain\" type=\"string\">\n      The application's domain (null if not applicable).\n    </ResponseField>\n\n    <ResponseField name=\"custom\" type=\"string\">\n      Custom information about the application (null if not applicable).\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json Response\n  {\n    \"status\": \"success\",\n    \"response\": {\n      \"name\": \"Best bot forever\",\n      \"id\": \"64d0c750212742ca8704fb458c9771af\",\n      \"owner\": \"3133971456989594464\",\n      \"cluster\": \"fl-micron-1\",\n      \"ram\": 1024,\n      \"language\": \"rust\",\n      \"domain\": null,\n      \"custom\": null\n    }\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/logs": {
      "metadata": {
        "title": "Get Application Logs",
        "description": "Collect the latest logs from your application. It has a rate limit of 1 request every 5 seconds.",
        "sidebarTitle": "/v2/apps/:appId/logs"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "GET",
          "path": "/v2/apps/{app_id}/logs"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  The contents of the response.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"logs\" type=\"string\">\n      The latest logs from the application.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\",\n      \"response\": {\n          \"logs\": \"Working!\"\n      }\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/restart": {
      "metadata": {
        "title": "Restart Application",
        "description": "Initiate your application.",
        "sidebarTitle": "/v2/apps/:appId/restart"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "POST",
          "path": "/v2/apps/{app_id}/restart"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/start": {
      "metadata": {
        "title": "Start Application",
        "description": "Initiate your application.",
        "sidebarTitle": "/v2/apps/:appId/start"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "POST",
          "path": "/v2/apps/{app_id}/start"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/status": {
      "metadata": {
        "title": "Get Application Status",
        "description": "Collect status information about your application.",
        "sidebarTitle": "/v2/apps/:appId/status"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "GET",
          "path": "/v2/apps/{app_id}/status"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"code\" type=\"string\">\n  The status code of the response.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  The contents of the response.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"cpu\" type=\"string\">\n      The CPU usage of the application.\n    </ResponseField>\n\n    <ResponseField name=\"ram\" type=\"string\">\n      The RAM usage of the application.\n    </ResponseField>\n\n    <ResponseField name=\"status\" type=\"string\">\n      The status of the application.\n    </ResponseField>\n\n    <ResponseField name=\"running\" type=\"boolean\">\n      Indicates whether the application is currently running.\n    </ResponseField>\n\n    <ResponseField name=\"storage\" type=\"string\">\n      The storage used by the application.\n    </ResponseField>\n\n    <ResponseField name=\"network\" type=\"object\">\n      <Expandable title=\"Toggle object\">\n        <ResponseField name=\"total\" type=\"string\">\n          The total network usage of the application.\n        </ResponseField>\n\n        <ResponseField name=\"now\" type=\"string\">\n          The current network usage of the application.\n        </ResponseField>\n      </Expandable>\n    </ResponseField>\n\n    <ResponseField name=\"uptime\" type=\"number\">\n      The uptime of the application in milliseconds.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\",\n      \"response\": {\n          \"cpu\": \"0.01%\",\n          \"ram\": \"31.79\",\n          \"status\": \"running\",\n          \"running\": true,\n          \"storage\": \"2.72MB\",\n          \"network\": {\n              \"total\": \"602 KB ‚Üë 134 KB ‚Üì\",\n              \"now\": \"14 KB ‚Üë 3.3 KB ‚Üì\"\n          },\n          \"uptime\": 1662927833666\n      }\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/status-all": {
      "metadata": {
        "title": "Get All Applications Status",
        "description": "Collect status information about all your applications in real time. It has a rate limit of 15 request every 60 seconds.",
        "sidebarTitle": "/v2/apps/status"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "GET",
          "path": "/v2/apps/status"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  The contents of the response.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"id\" type=\"string\">\n      The application ID.\n    </ResponseField>\n\n    <ResponseField name=\"cpu\" type=\"string\">\n      The CPU usage of the application.\n    </ResponseField>\n\n    <ResponseField name=\"ram\" type=\"string\">\n      The RAM usage of the application.\n    </ResponseField>\n\n    <ResponseField name=\"running\" type=\"boolean\">\n      Indicates whether the application is currently running.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n    \"status\": \"success\",\n    \"response\": [\n      {\n        \"id\": \"5bbd020126ee4692aga43e0ca0a75454\",\n        \"cpu\": \"0.00%\",\n        \"ram\": \"55.88MB\",\n        \"running\": true\n      },\n      {\n        \"id\": \"e1b286ba30f14a87baed4b4ad3b53c47\",\n        \"cpu\": \"0.01%\",\n        \"ram\": \"68.44MB\",\n        \"running\": true\n      }\n    ]\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/stop": {
      "metadata": {
        "title": "Stop Application",
        "description": "Initiate your application.",
        "sidebarTitle": "/v2/apps/:appId/stop"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "POST",
          "path": "/v2/apps/{app_id}/stop"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/upload": {
      "metadata": {
        "title": "Upload Application",
        "description": "Send an application to Square Cloud. It has a rate limit of 1 request every 3 seconds.",
        "sidebarTitle": "/v2/apps"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "POST",
          "path": "/v2/apps"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField body=\"file\" type=\"file\" placeholder=\"application.zip\" required>\n  The application to upload. Must be a ZIP file.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"code\" type=\"string\">\n  The status code of the response.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  The contents of the response.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"id\" type=\"string\">\n      The ID of the uploaded application.\n    </ResponseField>\n\n    <ResponseField name=\"name\" type=\"string\">\n      The name of the uploaded application.\n    </ResponseField>\n\n    <ResponseField name=\"description\" type=\"string\">\n      The description of the uploaded application.\n    </ResponseField>\n\n    <ResponseField name=\"domain\" type=\"string\">\n      The subdomain of the uploaded application (null if not applicable).\n    </ResponseField>\n\n    <ResponseField name=\"ram\" type=\"number\">\n      The RAM usage of the uploaded application in MB.\n    </ResponseField>\n\n    <ResponseField name=\"cpu\" type=\"number\">\n      The CPU usage of the uploaded application.\n    </ResponseField>\n\n    <ResponseField name=\"language\" type=\"object\">\n      <Expandable title=\"Toggle object\">\n        <ResponseField name=\"name\" type=\"string\">\n          The programming language of the uploaded application.\n        </ResponseField>\n\n        <ResponseField name=\"version\" type=\"string\">\n          The recommended version of the programming language.\n        </ResponseField>\n      </Expandable>\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\",\n      \"code\": \"SUCCESS\",\n      \"response\": {\n          \"id\": \"945f574e6cc14ea6818f91d7d56de101\",\n          \"name\": \"Estrelinha Legal\",\n          \"description\": \"Nossa, fui enviada na velocidade da luz! ‚ú®\",\n          \"domain\": null,\n          \"ram\": 1024,\n          \"cpu\": 6,\n          \"language\": {\n              \"name\": \"JavaScript\",\n              \"version\": \"recommended\"\n          }\n      }\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/service/status": {
      "metadata": {
        "title": "Square Cloud Services Status",
        "description": "Check the real-time status of Square Cloud services",
        "sidebarTitle": "/v2/service/status"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "GET",
          "path": "/v2/service/status"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<Info>\n  This route has a 5-minute cache and does not reflect the real-time status of\n  status.squarecloud.app.\n</Info>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  The current status of Square Cloud, with `online` indicating the service is online, `degraded` indicating issues, and `unknown` indicating unavailable.\n</ResponseField>\n\n<ResponseField name=\"message\" type=\"string\">\n  Message about the current status of Square Cloud services.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"online\",\n      \"message\": \"All services are online.\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/users/me": {
      "metadata": {
        "title": "Get information about your account",
        "description": "Get information about your account.",
        "sidebarTitle": "/v2/users/me"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "GET",
          "path": "/v2/users/me"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  The contents of the response.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"user\" type=\"object\">\n      <Expandable title=\"Toggle object\">\n        <ResponseField name=\"id\" type=\"string\">\n          The user's ID.\n        </ResponseField>\n\n        <ResponseField name=\"name\" type=\"string\">\n          The user's name.\n        </ResponseField>\n\n        <ResponseField name=\"email\" type=\"string\">\n          The user's email.\n        </ResponseField>\n\n        <ResponseField name=\"plan\" type=\"object\">\n          <Expandable title=\"Toggle object\">\n            <ResponseField name=\"name\" type=\"string\">\n              The user's plan name.\n            </ResponseField>\n\n            <ResponseField name=\"duration\" type=\"number\">\n              The user's plan duration in milliseconds.\n            </ResponseField>\n          </Expandable>\n        </ResponseField>\n      </Expandable>\n    </ResponseField>\n\n    <ResponseField name=\"applications\" type=\"array\">\n      <Expandable title=\"Toggle object\">\n        <ResponseField name=\"name\" type=\"string\">\n          The application's name.\n        </ResponseField>\n\n        <ResponseField name=\"id\" type=\"string\">\n          The application's ID.\n        </ResponseField>\n\n        <ResponseField name=\"desc\" type=\"string\">\n          The application's description.\n        </ResponseField>\n\n        <ResponseField name=\"ram\" type=\"number\">\n          The application's RAM usage.\n        </ResponseField>\n\n        <ResponseField name=\"lang\" type=\"string\">\n          The application's language.\n        </ResponseField>\n\n        <ResponseField name=\"domain\" type=\"string\">\n          The application's domain.\n        </ResponseField>\n\n        <ResponseField name=\"custom\" type=\"string\">\n          The application's custom domain.\n        </ResponseField>\n\n        <ResponseField name=\"cluster\" type=\"string\">\n          The application's cluster.\n        </ResponseField>\n      </Expandable>\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json Response\n  {\n    \"status\": \"success\",\n    \"response\": {\n      \"user\": {\n        \"id\": \"313397145698959364\",\n        \"name\": \"joaootavios\",\n        \"email\": \"joao@squarecloud.app\",\n        \"plan\": {\n          \"name\": \"standard\",\n          \"memory\": {\n            \"limit\": 2048,\n            \"available\": 1536,\n            \"used\": 256\n          },\n          \"duration\": 1732072955446\n        }\n      },\n      \"applications\": [\n        {\n          \"name\": \"Square Example APP\",\n          \"id\": \"446b0b4118634a1c99e73bac9a54e475\",\n          \"desc\": \"This is a example of description\",\n          \"ram\": 512,\n          \"lang\": \"javascript\",\n          \"domain\": \"square-example-app.squareweb.app\",\n          \"custom\": \"mydomain.com\",\n          \"cluster\": \"fl-micron-1\"\n        }\n      ]\n    }\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/workspace/create": {
      "metadata": {
        "title": "Create Workspace",
        "description": "Create a new workspace into your Square Cloud account.",
        "sidebarTitle": "/v2/workspaces"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "POST",
          "path": "/v2/workspaces"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField body=\"name\" type=\"string\" placeholder=\"Workspace name\">\n  A string representing the name of the workspace. (without extension)<br />Must adhere to the a to z, A to Z, 0 to 9, and \\_ pattern. (3 to 32 characters)\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  The contents of the response.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"id\" type=\"string\">\n      The ID of the Workspace.\n    </ResponseField>\n\n    <ResponseField name=\"owner\" type=\"string\">\n      The Workspace owner id.\n    </ResponseField>\n\n    <ResponseField name=\"name\" type=\"string\">\n      The name of the Workspace.\n    </ResponseField>\n\n    <ResponseField name=\"createdAt\" type=\"string\">\n      The creation timestamp in UTC-0.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json\n\n  {\n      \"status\": \"success\", \n      \"response\": {\n          \"id\": \"dcedcd13d7e272a7b32a70f6a1d180f23c12d759\", \n          \"owner\": \"5354d9742d889d49b20134ba0be09ccc0033be68\", \n          \"name\": \"Test\", \n          \"createdAt\": \"2025-06-04T20:44:55.934Z\"\n      }\n  }\n\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/workspace/delete": {
      "metadata": {
        "title": "Delete Workspace",
        "description": "Delete the workspace.",
        "sidebarTitle": "/v2/workspaces"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "DELETE",
          "path": "/v2/workspaces"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField body=\"workspaceId\" type=\"string\" placeholder=\"Workspace Id\">\n  The ID of the workspace.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n    \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/workspace/get": {
      "metadata": {
        "title": "Get Workspace",
        "description": "Get workspace info.",
        "sidebarTitle": "/v2/workspaces/:Id"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "GET",
          "path": "/v2/workspaces/{workspaceId}"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  The contents of the response.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"id\" type=\"string\">\n      The ID of the Workspace.\n    </ResponseField>\n\n    <ResponseField name=\"owner\" type=\"string\">\n      The Workspace owner id.\n    </ResponseField>\n\n    <ResponseField name=\"name\" type=\"string\">\n      The name of the Workspace.\n    </ResponseField>\n\n    <ResponseField name=\"members\" type=\"object\">\n      The workspace member list.\n\n      <Expandable title=\"Toggle object\">\n        <ResponseField name=\"id\" type=\"string\">\n          The user's ID.\n        </ResponseField>\n\n        <ResponseField name=\"name\" type=\"string\">\n          The user's name.\n        </ResponseField>\n\n        <ResponseField name=\"group\" type=\"string\">\n          The member permissions on the workspace applications.\n        </ResponseField>\n\n        <ResponseField name=\"joinedAt\" type=\"string\">\n          The join timestamp in UTC-0.\n        </ResponseField>\n      </Expandable>\n    </ResponseField>\n\n    <ResponseField name=\"applications\" type=\"object\">\n      The workspace applications list.\n\n      <Expandable title=\"Toggle object\">\n        <ResponseField name=\"id\" type=\"string\">\n          The ID of the uploaded application.\n        </ResponseField>\n\n        <ResponseField name=\"name\" type=\"string\">\n          The name of the uploaded application.\n        </ResponseField>\n\n        <ResponseField name=\"ram\" type=\"number\">\n          The RAM usage of the uploaded application in MB.\n        </ResponseField>\n\n        <ResponseField name=\"language\" type=\"object\">\n          The programming language of the uploaded application.\n        </ResponseField>\n      </Expandable>\n    </ResponseField>\n\n    <ResponseField name=\"createdAt\" type=\"string\">\n      The creation timestamp in UTC-0.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n    \"status\": \"success\",\n    \"response\": {\n      \"id\": \"dcedcd13d7e272a7b32a70f6a1d180f23c12d759\",\n      \"name\": \"Test\", \n      \"owner\": \"5354d9742d889d49b20134ba0be09ccc0033be68\",\n      \"members\": [\n        {\n          \"name\": \"Example\",\n          \"id\": \"5354d9742d889d49b20134ba0be09ccc0033be68\",\n          \"group\": \"owner\",\n          \"joinedAt\": \"2025-06-04T20:44:55.934Z\"\n        }\n      ],\n      \"applications\": [],\n      \"createdAt\": \"2025-06-04T20:44:55.934Z\"\n    }\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/workspace/leave": {
      "metadata": {
        "title": "Leave Workspace",
        "description": "Leave from workspace.",
        "sidebarTitle": "/v2/workspaces/leave"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "DELETE",
          "path": "/v2/workspaces/leave"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField body=\"workspaceId\" type=\"string\" placeholder=\"Workspace Id\">\n  The ID of the workspace.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n    \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/workspace/list": {
      "metadata": {
        "title": "Get Workspace",
        "description": "Get workspace info.",
        "sidebarTitle": "/v2/workspaces"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "GET",
          "path": "/v2/workspaces"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  The contents of the response.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"id\" type=\"string\">\n      The ID of the Workspace.\n    </ResponseField>\n\n    <ResponseField name=\"owner\" type=\"string\">\n      The Workspace owner id.\n    </ResponseField>\n\n    <ResponseField name=\"name\" type=\"string\">\n      The name of the Workspace.\n    </ResponseField>\n\n    <ResponseField name=\"members\" type=\"object\">\n      The workspace member list.\n\n      <Expandable title=\"Toggle object\">\n        <ResponseField name=\"id\" type=\"string\">\n          The user's ID.\n        </ResponseField>\n\n        <ResponseField name=\"name\" type=\"string\">\n          The user's name.\n        </ResponseField>\n\n        <ResponseField name=\"group\" type=\"string\">\n          The member permissions on the workspace applications.\n        </ResponseField>\n\n        <ResponseField name=\"joinedAt\" type=\"string\">\n          The join timestamp in UTC-0.\n        </ResponseField>\n      </Expandable>\n    </ResponseField>\n\n    <ResponseField name=\"applications\" type=\"object\">\n      The workspace applications list.\n\n      <Expandable title=\"Toggle object\">\n        <ResponseField name=\"id\" type=\"string\">\n          The ID of the uploaded application.\n        </ResponseField>\n\n        <ResponseField name=\"name\" type=\"string\">\n          The name of the uploaded application.\n        </ResponseField>\n\n        <ResponseField name=\"ram\" type=\"number\">\n          The RAM usage of the uploaded application in MB.\n        </ResponseField>\n\n        <ResponseField name=\"language\" type=\"object\">\n          The programming language of the uploaded application.\n        </ResponseField>\n      </Expandable>\n    </ResponseField>\n\n    <ResponseField name=\"createdAt\" type=\"string\">\n      The creation timestamp in UTC-0.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\",\n      \"response\": [\n          {\n              \"id\": \"dcedcd13d7e272a7b32a70f6a1d180f23c12d759\", \n              \"name\": \"Test\", \n              \"owner\": \"5354d9742d889d49b20134ba0be09ccc0033be68\",\n              \"members\": [\n              {\n                  \"name\": \"Example\",\n                  \"id\": \"5354d9742d889d49b20134ba0be09ccc0033be68\",\n                  \"group\": \"owner\",\n                  \"joinedAt\": \"2025-06-04T20:44:55.934Z\"\n              }\n              ],\n              \"applications\": [], \n              \"createdAt\": \"2025-06-04T20:44:55.934Z\"\n          }\n      ]\n  }\n  ```\n</ResponseExample>\n"
    },
    "sdks/py/advanced/app_cache": {
      "metadata": {
        "title": "App Cache",
        "description": "Learn how to use the App cache."
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "When a request is made, it returns application information and caches it in the Application object itself. This is useful if you need to access this information again in a relatively short time, meaning it's not worth making a new API request for updated data. In such cases, you can access `Application.cache`.\n\n```python\nimport squarecloud as square\n\nclient = square.Client('API_KEY')\n\nasync def example():\n    app = await client.app('application_id')\n\n    # Note that, as no requests have been made, * in the cache will be None\n    print(app.cache.logs)    # None\n    print(app.cache.status)  # None\n    print(app.cache.backup)  # None\n\n    # Now let's make some requests\n    await app.logs()\n    await app.status()\n    await app.backup()\n\n    # The cache has been updated ü§Ø\n    print(app.cache.logs)    # LogsData(...)\n    print(app.cache.status)  # StatusData(...)\n    print(app.cache.backup)  # BackupData(...)\n```\n\n## Making requests without updating the cache\n\nIf, for some reason, you don't want to update the cache when making a request, you can pass the `update_cache=False` argument.\n\n```python\nimport squarecloud as square\n\nclient = square.Client('API_KEY')\n\nasync def example():\n    app = await client.app('application_id')\n    await app.status(update_cache=False)\n    print(app.cache.status)  # None\n```\n\n<Note>\n  If the arguments you pass to `cache.update` are not an instance of `StatusData`, `LogsData`, or `BackupData`, a `SquareException` error will be raised.\n</Note>\n\n## Manually clearing the cache\n\nYou can manually clear the cache using `cache.clear`.\n\n```python\nimport squarecloud as square\n\nclient = square.Client('API_KEY')\n\n\nasync def example():\n    app = await client.app('application_id')\n\n    await app.status()\n    print(app.cache.status)  # StatusData(...)\n    app.cache.clear()\n    print(app.cache.status)  # None\n```\n\n## Manually updating the cache\n\nYou can also manually update it using the `cache.update` method.\n\n```python\nimport squarecloud as square\n\nclient = square.Client('API_KEY')\n\n\nasync def example():\n    app = await client.app('application_id')\n\n    logs = await app.logs()\n    status = await app.status()\n    backup = await app.backup()\n\n    app.cache.clear()  # Clears the cache\n    app.cache.update(status, logs, backup)  # Updates the cache\n\n    print(app.cache.logs)    # LogsData(...)\n    print(app.cache.status)  # StatusData(...)\n    print(app.cache.backup)  # BackupData(...)\n```\n"
    },
    "sdks/py/advanced/listeners": {
      "metadata": {
        "title": "Listeners",
        "description": "Learn how to use listeners in your application using the squarecloud python sdk."
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "[cache]: app_cache\n\n[Client]: ../user_guide/Client\n\nSometimes it's very useful to have listeners for requests, allowing you to implement features that need to be called whenever \"something\" happens in your application.\n\nTwo types of listeners have been added for this purpose.\n\n## Capture Listener\n\nFor example, imagine that every time a request to the '/logs' route is made, my code performs a task that checks if the new logs differ from the old ones. Well, let's see how this can be done:\n\n```python\nimport squarecloud as square\nfrom squarecloud import Endpoint\n\n@app.capture(endpoint=Endpoint.logs())\nasync def on_logs_request(before, after):\n    if after != before:\n        print(f'New logs!!! {after}')\n\nasync def main():\n    client = square.Client('your api key')\n    app = await client.app('application_id')\n\n    await app.logs()  # True\n    await app.logs()  # False\n```\n\nAs seen above, by using the app.capture decorator on a function, this function will be called every time a request is made to the endpoint specified in the decorator. The accepted endpoints are `APP_STATUS`, `LOGS`, or `BACKUP`. This function should take two parameters:\n\n- `before`(represents the state after the request)\n- `after`(represents the state before the request)\n\nThe data type returned by `before` and `after` depends on which endpoint the listener is \"listening\" to. If it is the **APP\\_STATUS** route, it will receive a `StatusData`, **LOGS** will receive a `LogsData`, and **BACKUP** will receive a `BackupData`.\n\nAs you may have noticed in the example above, the first time the comparison between the logs occurs, `after != before` returns True. This happens precisely because after is equal to `LogsData(logs='')`, as there is still nothing stored in the cache internally.\n\n<Accordion title=\"Additional information about this decorator\">\n  - If you use discord.py or some fork (you probably use), you should\n    know that what differentiates events is the name\n    of the functions that the decorator wraps, but here it differs. To know\n    which\n    API route the decorator needs to \"listen\" to, we use the `endpopint` parameter, it\n    receives an `Endpoint` class, so the name of the function that the decorator\n    wraps is up to you.\n  - The function that the decorator wraps can actually be anything that is\n    a callable. This includes regular functions, coroutines, and even\n    classes (`__init__` will be called).\n  - If the endpoint is not an \\[Endpoint.app\\_status()], \\[Endpoint.logs()], or \\[Endpoint.backup()],\n    only a `response` parameter (of type `squarecloud.http.Response`) will\n    be returned.\n</Accordion>\n\n<Tip>\n  You can use the `avoid_listener=True` parameter so that the application listener is not called.\n</Tip>\n\n## Request Listener\n\nThe \"request listeners\" do pretty much the same thing. But here you use the [Client], and the return of all endpoints is `squarecloud.http.Response` objects.\n\n```python\nimport squarecloud as square\nfrom squarecloud import Endpoint\n\n@client.on_request(endpoint=Endpoint.logs())\nasync def on_logs_request(response):\n    print(1, response)\n\nasync def main():\n    client = square.Client('your api key')\n    await client.get_logs(app_id='application_id')  # 1, Response(success)\n```\n\n## Passing extra arguments\n\nYou can pass to some methods keyword argument called `extra`, and this will be passed to your listener\n\n```python\nimport squarecloud as square\nfrom squarecloud import Endpoint\n\n@client.on_request(Endpoint.status())\nasync def get_extra_param(before, after, extra: dict[str, str]):\n    print(extra)\n\nasync def main():\n    client = square.Client('your api key')\n    await client.app_status('application_id', extra={'name': 'robertinho'})\n```\n\n<Tip>\n  You can get some cool features in listeners using pydantic in your project, take a look at [using pydantic](./using_pydantic)\n</Tip>\n\n*This implementation was inspired by a [suggestion](https://github.com/squarecloudofc/sdk-api-py/pull/1) made by [@Mudinho](https://github.com/zRickz), thank you for contributing.*\n"
    },
    "sdks/py/advanced/using_pydantic": {
      "metadata": {
        "title": "Using pydantic",
        "description": "Learn how to use pydantic to data validation."
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## What is pydantic?\n\nPydantic is an awesome and modern Python library for data validation using\ntype annotations. It enforces type constraints, ensuring data consistency and\nproviding clear error messages when validation fails. Pydantic is both\npowerful and easy to use, making it a popular choice for developers working\nwith structured data.\n\n## Installation\n\nTo use Pydantic with this SDK, you need to install the SDK with the pydantic\nextra dependency, as it is not included by default:\n\n```bash\npip install \"squarecloud[pydantic]\"\n```\n\n## Features\n\nIn this SDK, Pydantic is used to cast an extra parameter from a dictionary\ninto a Pydantic model, allowing for more robust data\nvalidation and manipulation.\n\n```python\nimport squarecloud as square\nfrom squarecloud import Endpoint\nfrom pydantic import BaseModel\n\nclass Animal(BaseModel):\n    name: str\n    age: int\n\n@client.on_request(Endpoint.status())\nasync def get_extra_param(before, after, extra: Animal):\n    print(extra.name)\n    print(extra.age)\n\nasync def main():\n    client = square.Client('your api key')\n    await client.app_status('application_id', extra={'name': 'felix', 'age': 3})\n```\n\nIn this example, the Animal class is a Pydantic model with two\nfields: name and age. When a request is made to the status endpoint,\nthe extra parameter is automatically cast into an Animal instance, allowing\nyou to easily access and validate the data.\n"
    },
    "api-reference/endpoint/apps/backups/get": {
      "metadata": {
        "title": "Get List of Application Backups",
        "description": "This route allows you to retrieve a list of backups (snapshots) for a specific application.",
        "sidebarTitle": "/v2/apps/:appId/backups"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "GET",
          "path": "/v2/apps/{app_id}/backups"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  The contents of the response.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"name\" type=\"string\">\n      The ID of the application from which you fetched the backups.\n    </ResponseField>\n\n    <ResponseField name=\"size\" type=\"number\">\n      Size of the backup in bytes.\n    </ResponseField>\n\n    <ResponseField name=\"modified\" type=\"string\">\n      Date of the last modification of the backup.\n    </ResponseField>\n\n    <ResponseField name=\"key\" type=\"string\">\n      AWS access key for the backup.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n    \"status\": \"success\",\n    \"response\": [\n      {\n        \"name\": \"1d2cdc0d6ebd435c91315c6329d12eab\",\n        \"size\": 12900705,\n        \"modified\": \"2024-06-27T06:23:42.326Z\",\n        \"key\": \"AWSAccessKeyId=access key\"\n      },\n      {\n        \"name\": \"1d2cdc0d6ebd435c91315c6329d12eab\",\n        \"size\": 12900705,\n        \"modified\": \"2024-06-26T07:05:40.000Z\",\n        \"key\": \"AWSAccessKeyId=access key\"\n      },\n      {\n        \"name\": \"1d2cdc0d6ebd435c91315c6329d12eab\",\n        \"size\": 12900705,\n        \"modified\": \"2024-06-25T05:15:51.533Z\",\n        \"key\": \"AWSAccessKeyId=access key\"\n      },\n    ]\n  }\n  ```\n</ResponseExample>\n\n<Note>The format of the URL to download the desired backup is: https://backups.squarecloud.app/{accountID}\\_{name}.zip?{key}</Note>\n"
    },
    "api-reference/endpoint/apps/backups/post": {
      "metadata": {
        "title": "Get Application Backup",
        "description": "Perform a backup of your application. It has a rate limit of 1 request every 60 seconds.",
        "sidebarTitle": "/v2/apps/:appId/backups"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "POST",
          "path": "/v2/apps/{app_id}/backups"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<Warning>Each application (app ID) can only perform 12 backups every 24 hours.</Warning>\n\n<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  The contents of the response.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"url\" type=\"string\">\n      The URL to download the backup of your application.\n    </ResponseField>\n\n    <ResponseField name=\"key\" type=\"string\">\n      The key to download the backup of your application.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\",\n      \"response\": {\n          \"url\": \"https://backups.squarecloud.app/23457145698959364_a23d130fcc9ddaf2d288ae9599a4292c32.zip?AWSAccessKeyId=i06Xdad2dRD74Pm8Xly&Expires=1753081182&Signature=riWPedawcsouRAPGU5n3kGHnWoOuw%3D\",\n          \"key\": \"AWSAccessKeyId=i06Xdad2dRD74Pm8Xly&Expires=1753081182&Signature=riWPedawcsouRAPGU5n3kGHnWoOuw%3D\"\n      }\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/deploy/info": {
      "metadata": {
        "title": "Deployment Information",
        "description": "Get the current deployment information for an application.",
        "sidebarTitle": "[...]/deployments/current"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "GET",
          "path": "/v2/apps/{app_id}/deployments/current"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  The contents of the response.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"webhook\" type=\"string\">\n      The webhook URL for the application.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\",\n      \"response\": { \n          \"webhook\": \"https://api.squarecloud.app/v2/git/webhook/69ce71f11974f2cc21d47cd0a8bcbafdaacbc3c9924b23ca40e0e2032705f6391eb89b40983338e0f2415e9331d602ccc\"\n      }\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/deploy/list": {
      "metadata": {
        "title": "List Deployments",
        "description": "Get the last 10 deployments of an application from the last 24 hours.",
        "sidebarTitle": "[...]/deployments"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "GET",
          "path": "/v2/apps/{app_id}/deployments"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"array\">\n  The contents of the response.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"id\" type=\"string\">\n      The ID of the deploy.\n    </ResponseField>\n\n    <ResponseField name=\"state\" type=\"string\">\n      The state of the deploy. Can be `pending`, `clone`, `success`, or `error`.\n    </ResponseField>\n\n    <ResponseField name=\"date\" type=\"string\">\n      The date the deploy was created.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\",\n      \"response\": [\n          [\n  \t\t    {\n  \t\t\t    \"id\": \"git-393caedd68f5e5b771f6a027\",\n  \t\t\t    \"state\": \"pending\",\n  \t\t\t    \"date\": \"2023-10-16T20:27:20.513Z\"\n  \t\t    },\n  \t\t    {\n  \t\t\t    \"id\": \"git-393caedd68f5e5b771f6a027\",\n  \t\t\t    \"state\": \"clone\",\n  \t\t\t    \"date\": \"2023-10-16T20:27:20.536Z\"\n  \t\t    },\n  \t\t    {\n  \t\t\t    \"id\": \"git-393caedd68f5e5b771f6a027\",\n  \t\t\t    \"state\": \"success\",\n  \t\t\t    \"date\": \"2023-10-16T20:27:21.422Z\"\n  \t\t    }\n  \t    ]\n      ],\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/deploy/webhooks": {
      "metadata": {
        "title": "GitHub Webhook Integration",
        "description": "Integrate Square Cloud with GitHub webhooks.",
        "sidebarTitle": "[...]/deploy/webhook"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "POST",
          "path": "/v2/apps/{app_id}/deploy/webhook"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n<ParamField body=\"access_token\" type=\"string\" placeholder=\"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\" required>\n  The access token for your GitHub repository. You can find this in your [GitHub Tokens Classic](https://github.com/settings/tokens/new)\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"message\" type=\"string\">\n  A message indicating the status of the commit.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  The contents of the response.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"webhook\" type=\"string\">\n      The URL of the webhook.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\",\n      \"response\": { \n          \"webhook\": \"https://api.squarecloud.app/v2/git/webhook/<webhook-code>\"\n      },\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/filemanager/content": {
      "metadata": {
        "title": "Read Application File",
        "description": "Read a file from your application.",
        "sidebarTitle": "[...]/files/content"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "GET",
          "path": "/v2/apps/{app_id}/files/content"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n<ParamField query=\"path\" type=\"string\" placeholder=\"Example: src/index.js\" required>\n  The path to the file you want to read. This is relative to the root of your application.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  The contents of the file.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"type\" type=\"string\">\n      The type of the data. It is \"Buffer\" for binary data.\n    </ResponseField>\n\n    <ResponseField name=\"data\" type=\"array\">\n      The data of the file represented as an array of numbers. These numbers represent the bytes of the file.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\",\n      \"response\": {\n          \"type\": \"Buffer\",\n          \"data\": [\n              112,\n              111,\n              120,\n              97,\n              44,\n              32,\n              116,\n              97,\n              32,\n              113,\n              117,\n              101,\n              114,\n              101,\n              110,\n              100,\n              111,\n              32,\n              99,\n              111,\n              112,\n              105,\n              97,\n              114,\n              32,\n              97,\n              116,\n              195,\n              169,\n              32,\n              111,\n              32,\n              98,\n              117,\n              102,\n              102,\n              101,\n              114,\n              63\n          ]\n      }\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/filemanager/delete": {
      "metadata": {
        "title": "Delete Application File",
        "description": "Delete a file from your application.",
        "sidebarTitle": "/v2/apps/:appId/files"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "DELETE",
          "path": "/v2/apps/{app_id}/files"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n<ParamField body=\"path\" type=\"string\" placeholder=\"Path to file\" required>\n  The path of the file to delete.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/filemanager/list": {
      "metadata": {
        "title": "List Application Files",
        "description": "List the files of your application.",
        "sidebarTitle": "/v2/apps/:appId/files"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "GET",
          "path": "/v2/apps/{app_id}/files"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n<ParamField query=\"path\" type=\"string\" placeholder=\"Path to list\" required>\n  The path of the directory whose files you want to list. Default is the root directory.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"array\">\n  The list of files and directories in the specified path.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"type\" type=\"string\">\n      The type of the entry. Can be `file` or `directory`.\n    </ResponseField>\n\n    <ResponseField name=\"name\" type=\"string\">\n      The name of the file or directory.\n    </ResponseField>\n\n    <ResponseField name=\"size\" type=\"number\">\n      The size of the file in bytes. For directories, it is 0.\n    </ResponseField>\n\n    <ResponseField name=\"lastModified\" type=\"number\">\n      The last modified timestamp of the file or directory in milliseconds since the epoch.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\",\n      \"response\": [\n          {\n              \"type\": \"file\",\n              \"name\": \".env\",\n              \"size\": 86,\n              \"lastModified\": 1676168978000\n          },\n          {\n              \"type\": \"file\",\n              \"name\": \".gitignore\",\n              \"size\": 8,\n              \"lastModified\": 1675125328000\n          },\n          {\n              \"type\": \"file\",\n              \"name\": \"index.js\",\n              \"size\": 614,\n              \"lastModified\": 1676168350000\n          },\n          {\n              \"type\": \"file\",\n              \"name\": \"squarecloud.app\",\n              \"size\": 65,\n              \"lastModified\": 1676169188000\n          },\n          {\n              \"type\": \"directory\",\n              \"name\": \"src\",\n              \"lastModified\": 1676155738000\n          }\n      ]\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/filemanager/patch": {
      "metadata": {
        "title": "Move Application File",
        "description": "Move a file in your application.",
        "sidebarTitle": "/v2/apps/:appId/files"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "PATCH",
          "path": "/v2/apps/{app_id}/files"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n<ParamField body=\"path\" type=\"string\" placeholder=\"Path to file\" required>\n  The path of the file to move.\n</ParamField>\n\n<ParamField body=\"to\" type=\"string\" placeholder=\"Path to file\" required>\n  The path to move the file to.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/filemanager/put": {
      "metadata": {
        "title": "Create/Modify Application File",
        "description": "Create files in your application.",
        "sidebarTitle": "/v2/apps/:appId/files"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "PUT",
          "path": "/v2/apps/{app_id}/files"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n<ParamField body=\"path\" type=\"string\" required>\n  The path where the file should be created. Example: /test.txt\n</ParamField>\n\n<ParamField body=\"content\" type=\"string\" required>\n  The content of the file to be created.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/network/analytics": {
      "metadata": {
        "title": "Website Analytics",
        "description": "Get analytics for a website hosted on Square Cloud. There is a rate limit of 1 uncached request every 10 seconds.",
        "sidebarTitle": "[...]/network/analytics"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "GET",
          "path": "/v2/apps/{app_id}/network/analytics"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n<ParamField query=\"range\" type=\"string\" placeholder=\"Time range\">\n  Time range for the analytics data. It can be `daily` or `weekly`. Default is `daily`.\n</ParamField>\n\n### Response\n\n<Info>\n  This route can send a response in a compressed format, optimizing data transmission.\n</Info>\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"object\">\n  Check the Response Example in right side to see the full response.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n    \"status\": \"success\",\n    \"response\": {\n      \"visits\": [\n        {\n          \"visits\": 1,\n          \"requests\": 4,\n          \"bytes\": 9677,\n          \"date\": \"2025-05-31T18:45:00Z\"\n        }\n      ],\n      \"countries\": [\n        {\n          \"type\": \"BR\",\n          \"visits\": 1,\n          \"requests\": 4,\n          \"bytes\": 9677,\n          \"date\": \"2025-05-31T18:45:00Z\"\n        }\n      ],\n      \"devices\": [\n        {\n          \"type\": \"desktop\",\n          \"visits\": 1,\n          \"requests\": 4,\n          \"bytes\": 9677,\n          \"date\": \"2025-05-31T18:45:00Z\"\n        }\n      ],\n      \"os\": [\n        {\n          \"type\": \"Windows\",\n          \"visits\": 1,\n          \"requests\": 4,\n          \"bytes\": 9677,\n          \"date\": \"2025-05-31T18:45:00Z\"\n        }\n      ],\n      \"browsers\": [\n        {\n          \"type\": \"Chrome\",\n          \"visits\": 1,\n          \"requests\": 4,\n          \"bytes\": 9677,\n          \"date\": \"2025-05-31T18:45:00Z\"\n        }\n      ],\n      \"protocols\": [\n        {\n          \"type\": \"https\",\n          \"visits\": 1,\n          \"requests\": 4,\n          \"bytes\": 9677,\n          \"date\": \"2025-05-31T18:45:00Z\"\n        }\n      ],\n      \"methods\": [\n        {\n          \"type\": \"GET\",\n          \"visits\": 1,\n          \"requests\": 4,\n          \"bytes\": 9677,\n          \"date\": \"2025-05-31T18:45:00Z\"\n        }\n      ],\n      \"paths\": [\n        {\n          \"type\": \"/\",\n          \"visits\": 1,\n          \"requests\": 4,\n          \"bytes\": 9677,\n          \"date\": \"2025-05-31T18:45:00Z\"\n        }\n      ],\n      \"referers\": [\n        {\n          \"type\": \"https://google.com\",\n          \"visits\": 1,\n          \"requests\": 4,\n          \"bytes\": 9677,\n          \"date\": \"2025-05-31T18:45:00Z\"\n        }\n      ],\n      \"providers\": [\n        {\n          \"type\": \"Cloudflare\",\n          \"visits\": 1,\n          \"requests\": 4,\n          \"bytes\": 9677,\n          \"date\": \"2025-05-31T18:45:00Z\"\n        }\n      ]\n    }\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/network/custom": {
      "metadata": {
        "title": "Custom Domain Integration",
        "description": "Integrate your website with a custom domain. It has a rate limit of 1 request every 60 seconds.",
        "sidebarTitle": "[...]/network/custom"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "POST",
          "path": "/v2/apps/{app_id}/network/custom"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "**Is necessary to have at least the [Standard plan](https://squarecloud.app/plans) to use this route.**\n\n<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n<ParamField body=\"custom\" type=\"string\" placeholder=\"example.com\" required>\n  The custom domain you want to use.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/network/dns": {
      "metadata": {
        "title": "Custom Domain DNS Records",
        "description": "Get the DNS records for your custom domain.",
        "sidebarTitle": "[...]/network/dns"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "GET",
          "path": "/v2/apps/{app_id}/network/dns"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "**Is necessary to have at least the [Standard plan](https://squarecloud.app/plans) to use this route.**\n\n<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"response\" type=\"array\">\n  The contents of the response.\n\n  <Expandable title=\"Toggle object\">\n    <ResponseField name=\"type\" type=\"string\">\n      The type of the DNS record.\n    </ResponseField>\n\n    <ResponseField name=\"name\" type=\"string\">\n      The name of the DNS record.\n    </ResponseField>\n\n    <ResponseField name=\"value\" type=\"string\">\n      The value of the DNS record.\n    </ResponseField>\n\n    <ResponseField name=\"status\" type=\"string\">\n      The status of the DNS record. It can be `pending_validation`, `pending` or `active`.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n    \"status\": \"success\",\n    \"response\": [\n      {\n        \"type\": \"txt\",\n        \"name\": \"_acme-challenge.joaootavios.dev\",\n        \"value\": \"hmo-jMx_KCWQU5CWG6xmrkI4AOZOJXlQtjEtc7zI1PA\",\n        \"status\": \"pending_validation\"\n      },\n      {\n        \"type\": \"cname\",\n        \"name\": \"joaootavios.dev\",\n        \"value\": \"custom.squarecloud.app\",\n        \"status\": \"pending\"\n      }\n    ]\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/apps/network/purge_cache": {
      "metadata": {
        "title": "Purge Cache",
        "description": "Purge Cache of the certain paths in the network. It has a rate limit of 1 request every 60 seconds.",
        "sidebarTitle": "[...]/network/purge_cache"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "POST",
          "path": "/v2/apps/{app_id}/network/purge_cache"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField path=\"app_id\" type=\"string\" placeholder=\"Application ID\" required>\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n<ParamField body=\"paths\" type=\"array\" placeholder={[\"https://yoursubdomain.squareweb.app/\", \"https://yoursubdomain.squareweb.app/style.css\"]} required>\n  The paths you want to purge the cache.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n      \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/workspace/apps/add": {
      "metadata": {
        "title": "Add App into a Workspace",
        "description": "Add an application into the workspace.",
        "sidebarTitle": "/v2/workspaces/applications"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "POST",
          "path": "/v2/workspaces/applications"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField body=\"workspaceId\" type=\"string\" placeholder=\"Workspace Id\">\n  The ID of the workspace.\n</ParamField>\n\n<ParamField body=\"appId\" type=\"string\" placeholder=\"Application ID\">\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n    \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/workspace/apps/remove": {
      "metadata": {
        "title": "Removing App from Workspace",
        "description": "Removes an application from the workspace.",
        "sidebarTitle": "/v2/workspaces/applications"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "DELETE",
          "path": "/v2/workspaces/applications"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField body=\"workspaceId\" type=\"string\" placeholder=\"Workspace Id\">\n  The ID of the workspace.\n</ParamField>\n\n<ParamField body=\"appId\" type=\"string\" placeholder=\"Application ID\">\n  The ID of the application. You can find this in the URL of your application's dashboard.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n    \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/workspace/members/code": {
      "metadata": {
        "title": "Get Invite Code",
        "description": "Get your invite code to add you into an workspace.",
        "sidebarTitle": "/v2/workspaces/members/code"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "GET",
          "path": "/v2/workspaces/members/code"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseField name=\"code\" type=\"string\">\n  Your team invite code.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n    \"status\": \"success\", \n    \"code\": \"9c1a499e623d2410226f1ecdc7e6daaec2fc6704\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/workspace/members/invite": {
      "metadata": {
        "title": "Invite to Workspace",
        "description": "Invites someone to an workspace.",
        "sidebarTitle": "/v2/workspaces/members"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "POST",
          "path": "/v2/workspaces/members"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField body=\"workspaceId\" type=\"string\" placeholder=\"Workspace Id\">\n  The ID of the workspace.\n</ParamField>\n\n<ParamField body=\"code\" type=\"string\" placeholder=\"Invite code\">\n  A string with the member invite code.\n</ParamField>\n\n<ParamField body=\"group\" type=\"string\" placeholder=\"Permission name\">\n  The member permissions on the workspace applications\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n    \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/workspace/members/kick": {
      "metadata": {
        "title": "Remove Workspace Member",
        "description": "Removes a workspace member from the workspace.",
        "sidebarTitle": "/v2/workspaces/members"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "DELETE",
          "path": "/v2/workspaces/members"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField body=\"workspaceId\" type=\"string\" placeholder=\"Workspace Id\">\n  The ID of the workspace.\n</ParamField>\n\n<ParamField body=\"memberId\" type=\"string\" placeholder=\"Member ID\">\n  The member ID.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n    \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    },
    "api-reference/endpoint/workspace/members/perms": {
      "metadata": {
        "title": "Change Workspace Member",
        "description": "Changes workspace member permissions.",
        "sidebarTitle": "/v2/workspaces/members"
      },
      "attributes": {
        "type": "endpoint",
        "endpoint": {
          "baseURL": "https://api.squarecloud.app",
          "method": "PATCH",
          "path": "/v2/workspaces/members"
        }
      },
      "created_at": "2025-06-16T18:44:35.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "<ParamField header=\"Authorization\" type=\"string\" placeholder=\"API KEY\" required>\n  The API key for your account. You can find this in your [account settings](https://squarecloud.app/account).\n</ParamField>\n\n<ParamField body=\"workspaceId\" type=\"string\" placeholder=\"Workspace Id\">\n  The ID of the workspace.\n</ParamField>\n\n<ParamField body=\"memberId\" type=\"string\" placeholder=\"Member ID\">\n  The member ID.\n</ParamField>\n\n<ParamField body=\"group\" type=\"string\" placeholder=\"Permission name\">\n  The member permissions on the workspace applications.\n</ParamField>\n\n### Response\n\n<ResponseField name=\"status\" type=\"string\">\n  Indicates whether the call was successful. `success` if successful, `error` if not.\n</ResponseField>\n\n<ResponseExample>\n  ```json\n  {\n    \"status\": \"success\"\n  }\n  ```\n</ResponseExample>\n"
    }
  },
  "snippets": {},
  "sidebars": {
    "root": {
      "content": {
        "title": "Documentation",
        "description": "Our Documentation",
        "icon": "notebook",
        "main_article": "getting-started/overview",
        "contents": [
          {
            "group": "Get Started",
            "pages": [
              {
                "href": "getting-started/overview"
              },
              {
                "href": "getting-started/quick-start"
              },
              {
                "href": "getting-started/config-file"
              }
            ]
          },
          {
            "group": "Services",
            "pages": [
              {
                "href": "services/bots"
              },
              {
                "href": "services/sites"
              },
              {
                "href": "services/blob"
              }
            ]
          },
          {
            "group": "Languages",
            "pages": [
              {
                "group": "JavaScript",
                "pages": [
                  {
                    "href": "articles/getting-started-with-nodejs"
                  },
                  {
                    "href": "articles/how-to-create-your-package-json"
                  }
                ]
              },
              {
                "group": "Python",
                "pages": [
                  {
                    "href": "articles/getting-started-with-python"
                  },
                  {
                    "href": "articles/how-to-create-your-requirements"
                  }
                ]
              },
              {
                "href": "articles/getting-started-with-java"
              },
              {
                "href": "articles/getting-started-with-rust"
              },
              {
                "href": "articles/getting-started-with-elixir"
              },
              {
                "href": "articles/getting-started-with-php"
              },
              {
                "href": "articles/getting-started-with-go"
              },
              {
                "href": "articles/getting-started-with-csharp"
              }
            ]
          },
          {
            "group": "Platform",
            "pages": [
              {
                "href": "platform/overview"
              },
              {
                "href": "platform/limitations-and-restrictions"
              }
            ]
          },
          {
            "group": "Company",
            "pages": [
              {
                "href": "company/brand"
              },
              {
                "href": "company/legal"
              },
              {
                "href": "company/support"
              }
            ]
          }
        ]
      }
    },
    "api-reference": {
      "content": {
        "title": "API Reference",
        "description": "Reference for the API",
        "icon": "code",
        "main_article": "api-reference/authentication",
        "contents": [
          {
            "group": "API Reference",
            "pages": [
              {
                "href": "api-reference/authentication"
              },
              {
                "href": "api-reference/limitations-and-restrictions"
              }
            ]
          },
          {
            "group": "API Endpoints",
            "pages": [
              {
                "href": "api-reference/endpoint/users/me"
              },
              {
                "href": "api-reference/endpoint/apps/upload"
              },
              {
                "href": "api-reference/endpoint/apps/status-all"
              },
              {
                "href": "api-reference/endpoint/service/status"
              },
              {
                "group": "Application",
                "pages": [
                  {
                    "href": "api-reference/endpoint/apps/info"
                  },
                  {
                    "href": "api-reference/endpoint/apps/status"
                  },
                  {
                    "href": "api-reference/endpoint/apps/logs"
                  },
                  {
                    "href": "api-reference/endpoint/apps/start"
                  },
                  {
                    "href": "api-reference/endpoint/apps/restart"
                  },
                  {
                    "href": "api-reference/endpoint/apps/stop"
                  },
                  {
                    "href": "api-reference/endpoint/apps/commit"
                  },
                  {
                    "href": "api-reference/endpoint/apps/backups/get"
                  },
                  {
                    "href": "api-reference/endpoint/apps/backups/post"
                  },
                  {
                    "href": "api-reference/endpoint/apps/delete"
                  }
                ]
              },
              {
                "group": "Application - File Manager",
                "pages": [
                  {
                    "href": "api-reference/endpoint/apps/filemanager/content"
                  },
                  {
                    "href": "api-reference/endpoint/apps/filemanager/list"
                  },
                  {
                    "href": "api-reference/endpoint/apps/filemanager/put"
                  },
                  {
                    "href": "api-reference/endpoint/apps/filemanager/patch"
                  },
                  {
                    "href": "api-reference/endpoint/apps/filemanager/delete"
                  }
                ]
              },
              {
                "group": "Application - Deploy",
                "pages": [
                  {
                    "href": "api-reference/endpoint/apps/deploy/list"
                  },
                  {
                    "href": "api-reference/endpoint/apps/deploy/info"
                  },
                  {
                    "href": "api-reference/endpoint/apps/deploy/webhooks"
                  }
                ]
              },
              {
                "group": "Application - Network",
                "pages": [
                  {
                    "href": "api-reference/endpoint/apps/network/dns"
                  },
                  {
                    "href": "api-reference/endpoint/apps/network/analytics"
                  },
                  {
                    "href": "api-reference/endpoint/apps/network/custom"
                  },
                  {
                    "href": "api-reference/endpoint/apps/network/purge_cache"
                  }
                ]
              },
              {
                "group": "Workspace",
                "pages": [
                  {
                    "href": "api-reference/endpoint/workspace/create"
                  },
                  {
                    "href": "api-reference/endpoint/workspace/delete"
                  },
                  {
                    "href": "api-reference/endpoint/workspace/get"
                  },
                  {
                    "href": "api-reference/endpoint/workspace/leave"
                  },
                  {
                    "href": "api-reference/endpoint/workspace/list"
                  }
                ]
              },
              {
                "group": "Workspace - Members",
                "pages": [
                  {
                    "href": "api-reference/endpoint/workspace/members/code"
                  },
                  {
                    "href": "api-reference/endpoint/workspace/members/invite"
                  },
                  {
                    "href": "api-reference/endpoint/workspace/members/kick"
                  },
                  {
                    "href": "api-reference/endpoint/workspace/members/perms"
                  }
                ]
              },
              {
                "group": "Workspace - Application",
                "pages": [
                  {
                    "href": "api-reference/endpoint/workspace/apps/add"
                  },
                  {
                    "href": "api-reference/endpoint/workspace/apps/remove"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "cli-reference": {
      "content": {
        "title": "CLI Reference",
        "description": "Our Command Line Application",
        "icon": "terminal-window",
        "main_article": "cli-reference/installation",
        "contents": [
          {
            "group": "CLI Reference",
            "pages": [
              {
                "href": "cli-reference/installation"
              },
              {
                "href": "cli-reference/authentication"
              },
              {
                "href": "cli-reference/commands"
              }
            ]
          }
        ]
      }
    },
    "faqs": {
      "content": {
        "title": "FAQs",
        "description": "Our FAQs",
        "icon": "question",
        "main_article": "faqs/using-autorestart-in-your-squarecloud-application",
        "contents": [
          {
            "group": "FAQs",
            "pages": [
              {
                "href": "faqs/using-autorestart-in-your-squarecloud-application"
              },
              {
                "href": "faqs/debugging-an-application"
              },
              {
                "href": "faqs/automatic-deletion-files-when-deploying-an-application-to-squarecloud"
              }
            ]
          },
          {
            "group": "Troubleshooting",
            "pages": [
              {
                "href": "faqs/troubleshooting/access-website"
              },
              {
                "href": "faqs/troubleshooting/lavalink-closed-abnormally"
              },
              {
                "href": "faqs/troubleshooting/whitelist-mongodb"
              },
              {
                "href": "faqs/troubleshooting/LACK_OF_CPU"
              },
              {
                "href": "faqs/troubleshooting/LACK_OF_RAM"
              },
              {
                "href": "faqs/troubleshooting/TOKEN_INVALID"
              },
              {
                "href": "faqs/troubleshooting/ABUSE_REQUESTS"
              },
              {
                "href": "faqs/troubleshooting/MODULE_NOT_FOUND"
              },
              {
                "href": "faqs/troubleshooting/INVALID_DEPENDENCY"
              },
              {
                "href": "faqs/troubleshooting/BETTER_SQLITE3_ERROR"
              }
            ]
          }
        ]
      }
    },
    "sdks": {
      "content": {
        "title": "SDKs",
        "description": "Our SDKs",
        "icon": "brackets-curly",
        "main_article": "sdks/introduction",
        "contents": [
          {
            "group": "SDKs",
            "pages": [
              {
                "href": "sdks/introduction"
              }
            ]
          },
          {
            "group": "JavaScript SDK",
            "pages": [
              {
                "href": "sdks/js/client"
              },
              {
                "href": "sdks/js/commit_and_upload"
              },
              {
                "href": "sdks/js/managing_application"
              },
              {
                "href": "sdks/js/managing_files"
              }
            ]
          },
          {
            "group": "Python SDK",
            "pages": [
              {
                "href": "sdks/py/installation"
              },
              {
                "href": "sdks/py/client"
              },
              {
                "href": "sdks/py/commit_and_upload"
              },
              {
                "href": "sdks/py/managing_application"
              },
              {
                "href": "sdks/py/managing_files"
              },
              {
                "href": "sdks/py/deployments"
              },
              {
                "group": "Advanced Guide",
                "pages": [
                  {
                    "href": "sdks/py/advanced/app_cache"
                  },
                  {
                    "href": "sdks/py/advanced/listeners"
                  },
                  {
                    "href": "sdks/py/advanced/using_pydantic"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "tutorials": {
      "content": {
        "title": "Tutorials",
        "description": "Our tutorials",
        "icon": "article",
        "main_article": "tutorials/introduction",
        "contents": [
          {
            "group": "Introduction",
            "pages": [
              {
                "href": "tutorials/introduction"
              }
            ]
          },
          {
            "group": "Tutorials",
            "pages": [
              {
                "href": "tutorials/managing-teams"
              },
              {
                "href": "tutorials/how-to-set-up-your-domain"
              },
              {
                "href": "tutorials/how-to-create-your-lavalink-server"
              },
              {
                "href": "tutorials/how-to-deploy-your-website"
              },
              {
                "href": "tutorials/how-to-set-up-git-integration"
              },
              {
                "href": "tutorials/timezone-change-guide"
              },
              {
                "href": "tutorials/topgg-webhook-config"
              },
              {
                "href": "tutorials/how-to-deploy-your-selenium-application"
              }
            ]
          },
          {
            "group": "APIs",
            "pages": [
              {
                "href": "tutorials/how-to-deploy-your-flask-application"
              },
              {
                "href": "tutorials/how-to-deploy-your-django-application"
              },
              {
                "href": "tutorials/how-to-deploy-your-nestjs-application"
              },
              {
                "href": "tutorials/how-to-deploy-your-express-application"
              },
              {
                "href": "tutorials/how-to-deploy-your-fastify-application"
              }
            ]
          },
          {
            "group": "Website",
            "pages": [
              {
                "href": "tutorials/how-to-deploy-your-vue-website"
              },
              {
                "href": "tutorials/how-to-deploy-your-vite-website"
              },
              {
                "href": "tutorials/how-to-deploy-your-react-website"
              },
              {
                "href": "tutorials/how-to-deploy-your-next-website"
              }
            ]
          },
          {
            "group": "Bots",
            "pages": [
              {
                "href": "tutorials/how-to-deploy-your-discord-bot"
              },
              {
                "href": "tutorials/how-to-deploy-your-whatsapp-bot"
              },
              {
                "href": "tutorials/how-to-deploy-your-telegram-bot"
              }
            ]
          }
        ]
      }
    }
  }
}