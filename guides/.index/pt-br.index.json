{
  "articles": {
    "6bxI5kS3rBKK": {
      "id": "6bxI5kS3rBKK",
      "path": "deploys/discord-bot",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "discord"
        ]
      },
      "metadata": {
        "title": "Hospedando um Bot do Discord no Square Cloud",
        "description": "Este artigo guia você na criação e hospedagem de um bot do Discord no Square Cloud.",
        "slug": "hospedando-um-bot-do-discord-no-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:46:44.000Z",
      "content": "## Introdução\n\n- Antes de começar a programar, você precisa configurar seu bot corretamente no Discord. Primeiro, é necessário ter uma conta no Discord. Se você ainda não tiver, pode criar uma visitando o [site oficial do Discord](https://discord.com/).\n- Em seguida, você precisará criar uma conta na Square Cloud, o que pode ser feito através da [página de cadastro](https://squarecloud.app/signup). Você pode usar seu e-mail para criar uma conta.\n- Por fim, você deve ter um plano pago ativo em sua conta. Você pode ver nossos planos e adquirir um de acordo com suas necessidades [aqui](https://squarecloud.app/plans).\n\n<AccordionGroup>\n  <Accordion title=\"Começando\" icon=\"rocket\" iconType=\"solid\">\n    Primeiro, acesse o [Developer Portal](https://discord.com/developers/applications) e clique em \"New Application\". Em seguida, escolha um nome para o seu bot e clique em \"Create\" para criá-lo.\n\n    <Frame>\n      <img src=\"/images/articles/discord/getting-started.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Obtendo o Token\" icon=\"key\" iconType=\"solid\">\n    Após criar seu bot, é hora de obter o token. Para isso, vá até a aba \"Bot\" e clique em \"Reset Token\", gerando assim seu token. Por fim, basta copiá-lo para usar no seu código posteriormente.\n\n    <Frame>\n      <img src=\"/images/articles/discord/getting-the-token.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Ativando Intenções Privilegiadas\" icon=\"message\" iconType=\"solid\">\n    Agora que você já tem o token do seu bot, precisa ativar as intenções necessárias. Para isso, permaneça na aba \"Bot\", role para baixo e procure por \"Privileged Gateway Intents\". Aqui, ative as seguintes intenções:\n\n    <Frame>\n      <img src=\"/images/articles/discord/intent.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n<Warning>Lembre-se de manter o token do seu bot em sigilo, pois ele pode ser usado para controlar seu bot.</Warning>\n\n# Usando bibliotecas para criação de bots\n\n<Tabs>\n  <Tab title=\"Discord.js\">\n    1. Certifique-se de ter o Node.js instalado em seu sistema. Caso não tenha, baixe-o no [site oficial do Node.js](https://nodejs.org/).\n    2. Inicialize um novo projeto Node.js usando `npm init`. Isso criará um arquivo `package.json` para o seu projeto:\n\n    ```bash\n    npm init -y\n    ```\n\n    3. Instale a biblioteca discord.js usando npm:\n\n    ```bash\n    npm install discord.js\n    ```\n\n    4. Crie um novo arquivo JavaScript (por exemplo, `index.js`) e adicione o seguinte código para criar um bot básico:\n\n    ```javascript index.js\n    const { Client, GatewayIntentBits } = require(\"discord.js\");\n\n    const client = new Client({\n      intents: [\n        GatewayIntentBits.Guilds,\n        GatewayIntentBits.GuildMessages,\n        GatewayIntentBits.MessageContent,\n      ],\n    });\n\n    client.on(\"ready\", () => {\n      console.log(`${client.user.tag}!`);\n    });\n\n    client.on(\"messageCreate\", (message) => {\n      if (message.content === \"!hello\") {\n        message.reply(\"Hello!\");\n      }\n    });\n\n    client.login(\"your token here\");\n    ```\n  </Tab>\n\n  <Tab title=\"Discord.py\">\n    1. Certifique-se de ter o Python instalado em seu sistema. Caso não tenha, baixe-o no [site oficial do Python](https://www.python.org/).\n    2. Instale a biblioteca discord.py usando pip:\n\n    ```bash\n    pip install discord.py\n    ```\n\n    3. Crie um novo arquivo Python (por exemplo, `main.py`) e adicione o seguinte código para criar um bot básico:\n\n    ```python main.py\n    import discord\n    from discord.ext import commands\n\n    intents = discord.Intents.default()\n    intents.message_content = True\n\n    client = commands.Bot(command_prefix='!', intents=intents)\n\n    @client.event\n    async def on_ready():\n        print(f'{client.user}')\n\n    @client.command()\n    async def hello(ctx):\n        await ctx.reply('Hello!')\n\n    client.run('your token here')\n    ```\n\n    4. Crie um arquivo `requirements.txt` para listar todas as bibliotecas externas necessárias ao seu projeto:\n\n    ```txt requirements.txt\n    discord.py\n    ```\n  </Tab>\n</Tabs>\n\n## Criando o arquivo de configuração do Square Cloud\n\n<Card title=\"Saiba mais: como criar o arquivo de configuração para Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  O arquivo `squarecloud.app` é um arquivo de configuração que será usado para configurar sua aplicação; ele define o nome, descrição, versão, arquivo principal, entre outros.\n</Card>\n\n## Configurando o campo START\n\n<Warning>Use este campo apenas se tiver certeza do que está fazendo.</Warning>\n\nNo arquivo de configuração do Square Cloud, o **START** é opcional e só é necessário se você estiver usando um script personalizado para iniciar o bot. No exemplo fornecido, o **START** não é necessário.\n\n## Enviando seu projeto para o Square Cloud\n\nApós seguir todos os passos, compacte os arquivos da sua aplicação em um arquivo zip onde o arquivo de configuração está localizado e faça o upload do bot em [Upload](https://squarecloud.app/dashboard/upload). Lembre-se de incluir o `requirements.txt` ou `package.json`, mas não inclua pastas como `__pycache__` ou `node_modules`. Você pode obter mais informações sobre arquivos desnecessários ao hospedar em [automatic-file-deletion-when-deploying-an-application-on-squarecloud](https://docs.squarecloud.app/faqs/automatic-file-deletion-when-deploying-an-application-on-squarecloud).\n\n## Testando o Bot\n\nSe tudo estiver configurado corretamente, o próximo passo é convidar seu bot para testes. Para isso, siga estes passos:\n\n1. Acesse o [Developer Portal](https://discord.com/developers/applications).\n2. Selecione seu bot.\n3. Navegue até a aba \"OAuth2\".\n4. Vá para \"OAuth2 URL Generator\".\n5. Marque a opção \"bot\".\n6. Escolha as permissões que seu bot terá ao ser convidado.\n7. Abaixo das permissões, será gerado um link de convite para o seu bot. Deve ser algo como:\n\n   ```txt\n   https://discord.com/oauth2/authorize?client_id=00000000000000&permissions=8&scope=bot\n   ```\n\nLembre-se, o `client_id` na URL deve ser substituído pelo ID real do seu bot. O valor de `permissions` também pode precisar ser ajustado conforme as permissões desejadas.\n\nAgora, para testar se tudo funciona, execute o seguinte comando no seu servidor: `!hello`.\n\n<Frame>\n  <img src=\"/images/articles/discord/testing-bot.png\" style={{ borderRadius: \"0.2rem\" }} />\n</Frame>\n\n## Recursos Adicionais\n\nPara mais informações sobre criação de bots com discord.py e discord.js, visite a [documentação oficial do discord.py](https://discordpy.readthedocs.io/en/latest/) e o [guia oficial do discord.js](https://discordjs.guide/). Lá você encontrará guias detalhados, tutoriais e documentação de API para ajudar a aproveitar ao máximo essas bibliotecas.\n\nSe continuar enfrentando problemas, não hesite em [entrar em contato com nossa equipe de suporte](/company/support).\n"
    },
    "9n7micjyDln3": {
      "id": "9n7micjyDln3",
      "path": "deploys/express-application",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "nodejs"
        ]
      },
      "metadata": {
        "title": "Hospedando uma Aplicação Express no Square Cloud",
        "description": "Este artigo orienta você na criação e hospedagem de uma aplicação Express no Square Cloud",
        "slug": "hospedando-uma-aplicacao-express-no-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introdução\n\n- Antes de começar, certifique-se de que você tenha o Node.js e o npm instalados no seu sistema. Se ainda não os tiver, você pode baixá-los do [site oficial do Node.js](https://nodejs.org/).\n- Em seguida, você precisará criar uma conta na Square Cloud, o que pode ser feito pela [página de cadastro](https://squarecloud.app/signup). Você pode usar seu e-mail para criar a conta.\n- Por fim, você precisa ter um plano pago ativo na sua conta. Você pode ver nossos planos e adquirir um conforme suas necessidades [aqui](https://squarecloud.app/plans).\n\n### Configurando o Express\n\nPara usar o Express, instale-o no seu sistema. Execute o seguinte comando:\n\n```bash\nnpm install express\n```\n\n### Criando um Projeto Express\n\nPara criar um novo projeto Express, crie um arquivo e escreva o seguinte código:\n\n```javascript app.js\n// Importando o módulo Express\nconst express = require('express');\n\n// Criando uma nova aplicação Express\nconst app = express();\n\n// Definindo a porta 80\n// A porta 80 é a porta padrão para tráfego HTTP.\nconst port = 80;\n\n// Definindo um handler para a rota '/'\n// Esse handler envia 'Hello World!' quando acessado.\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\n// Fazendo nossa aplicação Express ouvir na porta 80\napp.listen(port, () => {\n  // Esse bloco roda assim que o servidor está ouvindo na porta 80\n  console.log(`Example app listening on port \\${port}`);\n});\n```\n\n## Criando o arquivo de configuração squarecloud.app\n\n<Card title=\"Saiba mais: como criar o arquivo de configuração para Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  O arquivo `squarecloud.app` é um arquivo de configuração usado para definir o nome, descrição, versão, arquivo principal, entre outras coisas da sua aplicação.\n</Card>\n\n## Configurando o campo START\n\nNo arquivo de configuração da Square Cloud, o campo **START** é opcional e só é necessário se você estiver usando um script personalizado para iniciar o site ou API. No exemplo fornecido, o campo **START** não é necessário.\n\n## Comprando um Plano Antes de Enviar Seu Projeto\n\nAntes de enviar seu projeto para a Square Cloud, você precisa adquirir um plano. O tipo de plano dependerá dos recursos necessários para sua aplicação. Você pode ver nossos planos [aqui](https://squarecloud.app/plans).\n\n<Note>**Está se perguntando quanta RAM e CPU seu plano precisa para hospedar uma aplicação Express?** Não se preocupe, estamos aqui para ajudar. Express.js é um framework para Node.js que oferece recursos mínimos para construção de servidores web. É fácil de aprender, altamente flexível e adequado para uma ampla gama de aplicações. Nosso plano **[Standard](https://squarecloud.app/pay/standard)** oferece **4GB** de RAM e **4vCPU**, suficiente para a maioria das aplicações Express. Mas, se você estiver em um projeto maior ou precisar de mais estabilidade, recomendamos o plano Pro. Com recursos adicionais, você garante desempenho estável mesmo sob alta demanda. Para adquirir, clique [aqui](https://squarecloud.app/pay/pro).</Note>\n\n## Enviando o Projeto para a Square Cloud\n\nDepois de preparar seus arquivos, envie-os para a Square Cloud e hospede seu projeto.\n\n<Tabs>\n  <Tab title=\"Envio pelo Dashboard\">\n    Acesse o [Dashboard da Square Cloud](https://squarecloud.app/dashboard/upload) e faça o upload dos seus arquivos.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Envio via CLI\">\n    <Steps>\n      <Step title=\"Primeiro Passo\">\n        Primeiro, instale o CLI. Se não tiver, execute:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        Se já tiver, recomendamos atualizar com:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS e WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo Passo\">\n        Para autenticar e usar outros comandos CLI, obtenha sua chave [aqui](https://squarecloud.app/account) clicando em “Request API Key”. Depois, execute:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Terceiro Passo\">\n        Por fim, para deploy via CLI, execute passando o caminho do seu zip:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Solução de Problemas\n\n<AccordionGroup>\n  <Accordion title=\"Domínio Personalizado\" icon=\"globe\" iconType=\"solid\">\n    Se quiser usar domínio próprio, por padrão a URL será `https://mysite.squareweb.app/`. O subdomínio é definido pelo campo SUBDOMAIN. Para usar `mysite.com`, é necessário o plano Standard ou superior. Veja como em [Como configurar domínio personalizado](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Requisitos Mínimos de RAM\" icon=\"memory\" iconType=\"solid\">\n    O mínimo de RAM para hospedar um site ou API é 512MB. Mas, dependendo da sua aplicação Express, pode ser aconselhável mais RAM para evitar o erro [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM).\n  </Accordion>\n\n  <Accordion title=\"Acesso Temporariamente Negado\" icon=\"ban\" iconType=\"solid\">\n    Se receber “Your access has been temporarily denied.”, aguarde um pouco. Se persistir, contate https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Site demorou para responder...\" icon=\"clock\" iconType=\"solid\">\n    Se receber “Website took too long to respond...”, verifique o uso da porta 80. Se continuar, contate https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Recursos Adicionais\n\nPara mais informações sobre o Express, visite a [documentação oficial do Express](https://expressjs.com/). Lá você encontrará guias, tutoriais e documentação de API.\n\nSe continuar com problemas, não hesite em [contatar nossa equipe de suporte](/company/support).\n"
    },
    "mUz0Qm8wdgsu": {
      "id": "mUz0Qm8wdgsu",
      "path": "deploys/fastify-application",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "nodejs",
          "fastify"
        ]
      },
      "metadata": {
        "title": "Hospedando uma Aplicação Fastify no Square Cloud",
        "description": "Este artigo orienta você na criação e hospedagem de uma aplicação Fastify no Square Cloud",
        "slug": "hospedando-uma-aplicacao-fastify-no-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introdução\n\n- Antes de começar, verifique se você tem o Node.js e o npm instalados em seu sistema. Caso ainda não os tenha, faça o download no [site oficial do Node.js](https://nodejs.org/).\n- Em seguida, você precisará criar uma conta na Square Cloud, o que pode ser feito pela [página de cadastro](https://squarecloud.app/signup). Você pode usar seu e-mail para criar a conta.\n- Por fim, é necessário ter um plano pago ativo na sua conta. Você pode visualizar nossos planos e adquirir aquele que melhor se adequa às suas necessidades [aqui](https://squarecloud.app/plans).\n\n### Configurando o Fastify\n\nPara usar o Fastify, instale-o no seu projeto executando:\n\n```bash\nnpm install fastify\n```\n\nEsse comando instala o pacote `fastify`, permitindo utilizá-lo na sua aplicação.\n\n### Criando um projeto Fastify\n\nCrie um novo arquivo e adicione o seguinte código:\n\n```javascript app.js\n// Importando o módulo Fastify\nconst fastify = require('fastify')({ logger: true });\n\n// Definindo um manipulador para a rota '/'\nfastify.get('/', async (request, reply) => {\n  return 'Hello World!';\n});\n\n// Iniciando a aplicação Fastify na porta 80\nfastify.listen({ port: 80 })\n  .then((address) => {\n    // Executado quando o servidor estiver ouvindo na porta 80\n    fastify.log.info(`Example app listening at \\${address}`);\n  })\n  .catch((err) => {\n    // Executado se ocorrer erro ao tentar ouvir na porta 80\n    fastify.log.error(err);\n    process.exit(1);\n  });\n```\n\n## Criando o arquivo de configuração squarecloud\n\n<Card title=\"Saiba como criar o arquivo de configuração da Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  O arquivo `squarecloud.app` define nome, descrição, versão, arquivo principal e outras configurações da sua aplicação.\n</Card>\n\n## Configurando o campo START\n\nNo arquivo de configuração da Square Cloud, o campo **START** é opcional e só é necessário se você usar um script personalizado para iniciar o site ou API. No exemplo acima ele não é necessário.\n\n## Adquirindo um plano antes de fazer upload\n\nAntes de enviar seu projeto para a Square Cloud, adquira um plano compatível com os recursos que sua aplicação exige. Veja os planos disponíveis [aqui](https://squarecloud.app/plans).\n\n<Note>**Em dúvida sobre quanta RAM e CPU seu plano precisa para hospedar um app Fastify?** O plano **[Standard](https://squarecloud.app/pay/standard)** oferece **4 GB de RAM** e **4 vCPU**, suficientes para a maioria dos projetos. Para aplicações maiores ou com alta demanda, considere o plano Pro. Adquira-o [aqui](https://squarecloud.app/pay/pro).</Note>\n\n## Fazendo upload do projeto para a Square Cloud\n\nApós preparar os arquivos, você pode hospedá-lo:\n\n<Tabs>\n  <Tab title=\"Upload pelo Dashboard\">\n    Acesse o [Dashboard da Square Cloud](https://squarecloud.app/dashboard/upload) e envie seus arquivos.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Upload via CLI\">\n    <Steps>\n      <Step title=\"Primeiro passo\">\n        Instale a CLI globalmente:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        Já possui? Atualize:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS e WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo passo\">\n        Obtenha sua chave de autorização em [account](https://squarecloud.app/account) (“Request API Key”) e autentique-se:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Terceiro passo\">\n        Para fazer o deploy, execute:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Solução de problemas\n\n<AccordionGroup>\n  <Accordion title=\"Domínio personalizado\" icon=\"globe\" iconType=\"solid\">\n    Por padrão, o URL será algo como `https://mysite.squareweb.app/`. O subdomínio é definido no campo SUBDOMAIN. Para usar `mysite.com`, adquira pelo menos o plano Standard. Veja o passo a passo [aqui](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"RAM mínima\" icon=\"memory\" iconType=\"solid\">\n    O mínimo para hospedar um site ou API é 512 MB. Dependendo do tamanho do projeto, use mais RAM para evitar o erro [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM).\n  </Accordion>\n\n  <Accordion title=\"Acesso temporariamente negado\" icon=\"ban\" iconType=\"solid\">\n    Se aparecer “Your access has been temporarily denied.”, aguarde. Persistindo, contate https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website demorou a responder\" icon=\"clock\" iconType=\"solid\">\n    Verifique se a porta 80 está configurada. Persistindo, contate https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Recursos adicionais\n\nPara saber mais sobre o Fastify, visite a [documentação oficial](https://fastify.dev/).\n\nEm caso de problemas, [contate nosso suporte](/company/support).\n"
    },
    "4eI5mGTgNL7Z": {
      "id": "4eI5mGTgNL7Z",
      "path": "deploys/flask-application",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "python",
          "flask"
        ]
      },
      "metadata": {
        "title": "Hospedando uma Aplicação Flask no Square Cloud",
        "description": "Este artigo orienta você na criação e hospedagem de uma aplicação Flask no Square Cloud.",
        "slug": "hospedando-uma-aplicacao-flask-no-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Criando um novo projeto Flask\n\n- Antes de começar, verifique se Python e pip estão instalados no seu sistema. Caso não tenha, faça o download no [site oficial do Python](https://www.python.org/) e no [site oficial do Pip](https://pypi.org/).\n- Em seguida, crie uma conta na Square Cloud pela [página de cadastro](https://squarecloud.app/signup). Use seu e-mail para criar a conta.\n- Por fim, é necessário ter um plano pago ativo. Você pode ver e adquirir um plano de acordo com suas necessidades [aqui](https://squarecloud.app/plans).\n\nCom Python e pip instalados, crie um novo projeto Flask. Primeiro, instale Flask e Waitress com pip:\n\n```bash\npip install flask\npip install waitress\n```\n\nDepois, crie um arquivo Python (por exemplo, `app.py`) e adicione o código a seguir para criar uma aplicação Flask básica:\n\n```python\n\n# Importar a classe Flask do módulo flask\n\nfrom flask import Flask\n\n# Criar uma instância da classe Flask\n\napp = Flask(__name__)\n\n# Definir uma rota para a URL raiz (/) que retorna 'Hello, World!'\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n# Verificar se este script está sendo executado diretamente (e não importado)\n\nif __name__ == '__main__':\n    # Executar a aplicação Flask no host 0.0.0.0 (todas as interfaces) e porta 80\n    app.run(host='0.0.0.0', port=80)\n```\n\n## Configurando o ambiente de produção com Waitress\n\n```python\nfrom flask import Flask\n\n# Criar a instância da aplicação Flask\n\napp = Flask(__name__)\n\n# Definir uma rota para a URL raiz (/) que retorna 'Hello, World!'\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n# Se este script for executado diretamente\n\nif __name__ == '__main__':\n    from waitress import serve  # Importar a função serve do Waitress\n\n    # Servir a aplicação Flask usando Waitress no host 0.0.0.0 e porta 80\n    serve(app, host='0.0.0.0', port=80)\n    \n    # Imprimir mensagem indicando início bem-sucedido\n    print(\"Servidor iniciado com sucesso na porta 80.\")\n```\n\nNo código acima, criamos uma rota básica que retorna “Hello, World!” quando acessada. A aplicação é configurada para rodar na porta 80, padrão para tráfego HTTP.\n\n## Gerenciando dependências com o arquivo requirements.txt\n\nO arquivo `requirements.txt` lista todas as bibliotecas externas necessárias ao seu projeto. Inclua nele as bibliotecas usadas, exceto as nativas como `random` e `datetime`. Esse arquivo deve acompanhar o envio da aplicação para a Square Cloud.\n\n```txt requirements.txt\nflask\n```\n\n## Criando o arquivo de configuração squarecloud\n\n<Card title=\"Saiba como criar o arquivo de configuração para Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  O arquivo `squarecloud.app` será usado para definir nome, descrição, versão, arquivo principal, entre outras informações.\n</Card>\n\n## Configurando o campo START\n\nNo arquivo de configuração, o campo **START** é opcional e só é necessário se você usar um script personalizado para iniciar o site ou API. No exemplo, ele não é necessário.\n\n## Adquirindo um plano antes de enviar o projeto\n\nPara subir seu projeto, é preciso comprar um plano compatível com os recursos exigidos. Veja os planos disponíveis [aqui](https://squarecloud.app/plans).\n\n<Note>**Em dúvida sobre quanta RAM e CPU precisa para hospedar uma aplicação Flask?** Flask é conhecido pela eficiência, especialmente para projetos pequenos ou de aprendizado. Nosso plano **[Standard](https://squarecloud.app/pay/standard)** oferece **4 GB de RAM** e **4 vCPU**, suficientes para a maioria dos aplicativos Flask. Para projetos maiores ou maior estabilidade, considere o plano Pro [aqui](https://squarecloud.app/pay/pro).</Note>\n\n## Fazendo upload do projeto para a Square Cloud\n\n<Tabs>\n  <Tab title=\"Upload pelo Dashboard\">\n    Acesse o [Dashboard da Square Cloud](https://squarecloud.app/dashboard/upload) e envie os arquivos do seu projeto.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Upload via CLI\">\n    <Steps>\n      <Step title=\"Primeiro passo\">\n        Instale a CLI globalmente:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        Já possui? Atualize:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS e WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo passo\">\n        Obtenha sua chave de autorização em [account](https://squarecloud.app/account) (“Request API Key”) e autentique-se:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Terceiro passo\">\n        Faça o deploy passando o caminho do seu .zip:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Solução de problemas\n\n<AccordionGroup>\n  <Accordion title=\"Domínio personalizado\" icon=\"globe\" iconType=\"solid\">\n    Por padrão, a URL será `https://mysite.squareweb.app/`. Para usar `mysite.com`, compre pelo menos o plano Standard. Siga [este tutorial](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"RAM mínima\" icon=\"memory\" iconType=\"solid\">\n    O mínimo para hospedar é 512 MB. Dependendo do tamanho do app Flask, pode ser necessário mais para evitar o erro [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM).\n  </Accordion>\n\n  <Accordion title=\"Acesso temporariamente negado\" icon=\"ban\" iconType=\"solid\">\n    Se aparecer “Your access has been temporarily denied.” aguarde. Persistindo, contate https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Site demorou a responder\" icon=\"clock\" iconType=\"solid\">\n    Verifique se a porta 80 está correta. Persistindo, contate https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Recursos adicionais\n\nPara saber mais sobre Flask, visite a [documentação oficial](https://flask.palletsprojects.com/en/3.0.x/).\n\nSe precisar de ajuda, [entre em contato com o suporte](/company/support).\n"
    },
    "L5I0YzAVVaYa": {
      "id": "L5I0YzAVVaYa",
      "path": "deploys/lavalink-server",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "lavalink",
          "java"
        ]
      },
      "metadata": {
        "title": "Como criar seu Servidor Lavalink",
        "description": "Aprenda como hospedar seu servidor Lavalink e transmitir músicas de alta qualidade para seu bot do Discord.",
        "slug": "como-criar-seu-servidor-lavalink"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introdução 🚀\n\n- Siga o tutorial abaixo e hospede seu servidor **Lavalink** hoje mesmo — é super simples! Se precisar de ajuda, fale conosco pelos canais oficiais de suporte.\n- Em seguida, crie uma conta na Square Cloud pela [página de cadastro](https://squarecloud.app/signup). Use seu e-mail para se cadastrar.\n- Por fim, tenha um plano pago ativo. Veja e compre o plano ideal para você [aqui](https://squarecloud.app/plans).\n\n## Escolhendo a versão\n\nEscolha a versão desejada do **Lavalink** clicando [aqui](https://github.com/freyacodes/Lavalink/releases/). Recomendamos sempre a versão mais recente para a melhor experiência.\n\n## Criando o arquivo de configuração squarecloud\n\n<Card title=\"Saiba como criar o arquivo de configuração para Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  O arquivo `squarecloud.app` define nome, descrição, versão, arquivo principal e outros detalhes da aplicação.\n</Card>\n\n## Criando o application.yml\n\nCrie o arquivo de configuração do seu servidor Lavalink. Você pode acessar um modelo [aqui](https://github.com/freyacodes/Lavalink/blob/master/LavalinkServer/application.yml.example).\n\n<Warning>Defina o campo `port` do seu `application.yml` como: `80`.</Warning>\n\n## Reforçando a segurança\n\nRecomendamos fortemente configurar uma senha segura no campo `password` do `application.yml`. Use ao menos 32 caracteres.\n\n<Note>Lembre-se: para conectar ao Lavalink, use a porta 443 (SSL) e defina `secure` como `true`.</Note>\n\n## Fazendo upload do projeto para a Square Cloud\n\nCompacte (`.zip`) o `Lavalink.jar` e o `application.yml`. Em seguida, envie o arquivo para a Square Cloud.\n\n<Tabs>\n  <Tab title=\"Upload pelo Dashboard\">\n    Acesse o [Dashboard da Square Cloud](https://squarecloud.app/dashboard/upload) e envie seus arquivos.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Upload via CLI\">\n    <Steps>\n      <Step title=\"Primeiro passo\">\n        Instale a CLI:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        Para atualizar:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS e WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo passo\">\n        Obtenha sua API Key em [account](https://squarecloud.app/account) (“Request API Key”) e faça login:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Terceiro passo\">\n        Faça o deploy indicando o caminho do zip:\n\n        ```bash\n        squarecloud upload server.zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\nSe ainda tiver problemas, [entre em contato com o suporte](/company/support).\n"
    },
    "w1gmUmjmk3bD": {
      "id": "w1gmUmjmk3bD",
      "path": "deploys/nestjs-application",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "nodejs",
          "nest"
        ]
      },
      "metadata": {
        "title": "Hospedando uma Aplicação Nestjs no Square Cloud",
        "description": "Este artigo orienta você na criação e hospedagem de uma aplicação Nestjs no Square Cloud",
        "slug": "hospedando-uma-aplicacao-nestjs-no-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introdução\n\n- Antes de começar, certifique-se de ter Node.js e npm instalados em seu sistema. Caso não tenha, faça o download no [site oficial do Node.js](https://nodejs.org/).\n- Em seguida, crie uma conta na Square Cloud pela [página de cadastro](https://squarecloud.app/signup). Você pode usar seu e-mail para criar a conta.\n- Por fim, é necessário ter um plano pago ativo. Você pode visualizar e adquirir um plano conforme suas necessidades [aqui](https://squarecloud.app/plans).\n\n### Configurando o NestJS CLI\n\nPara usar a interface de linha de comando (CLI) do NestJS, instale-a globalmente:\n\n```bash\nnpm install -g @nestjs/cli\n```\n\n### Criando um projeto NestJS\n\nCrie um novo projeto NestJS:\n\n```bash\nnest new my-app\n```\n\nO comando `nest new my-app` cria um diretório `my-app` com todos os arquivos e dependências de uma aplicação NestJS básica.\n\n## Configurando a porta 80\n\nApós gerar o projeto, altere o arquivo `src/main.ts`:\n\n```typescript\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(80); // Porta 80\n}\nbootstrap();\n```\n\nA porta 80 é o padrão para tráfego HTTP.\n\n## Compilando a aplicação\n\nO NestJS usa TypeScript, então você deve compilar antes de executar:\n\n```bash\nnpm run build\n```\n\n## Criando o arquivo de configuração squarecloud\n\n<Card title=\"Saiba como criar o arquivo de configuração da Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  O arquivo `squarecloud.app` define nome, descrição, versão, arquivo principal, entre outros.\n</Card>\n\n## Configurando o campo MAIN\n\nDefina o arquivo principal da aplicação:\n\n```app squarecloud.app\nMAIN=dist/main.js\n```\n\n## Configurando o campo START\n\nO campo **START** é opcional; use-o apenas se necessário um script personalizado.\n\n## Adquirindo um plano antes de enviar o projeto\n\nEscolha um plano de acordo com os recursos necessários [aqui](https://squarecloud.app/plans).\n\n<Note>**Dúvidas sobre RAM e CPU?** O plano **[Standard](https://squarecloud.app/pay/standard)** oferece **4 GB** de RAM e **4 vCPU**, adequado para a maioria dos apps NestJS. Para projetos maiores, considere o plano Pro [aqui](https://squarecloud.app/pay/pro).</Note>\n\n## Fazendo upload do projeto para a Square Cloud\n\n<Tabs>\n  <Tab title=\"Upload pelo Dashboard\">\n    Acesse o [Dashboard da Square Cloud](https://squarecloud.app/dashboard/upload) e envie seus arquivos.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Upload via CLI\">\n    <Steps>\n      <Step title=\"Primeiro passo\">\n        Instale a CLI:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        Para atualizar:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS e WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo passo\">\n        Obtenha sua API Key em [account](https://squarecloud.app/account) e faça login:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Terceiro passo\">\n        Faça o deploy passando o caminho do zip:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Solução de problemas\n\n<AccordionGroup>\n  <Accordion title=\"Domínio personalizado\" icon=\"globe\" iconType=\"solid\">\n    Para usar `mysite.com`, adquira ao menos o plano Standard e siga [este guia](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"RAM mínima\" icon=\"memory\" iconType=\"solid\">\n    O mínimo é 512 MB, mas pode ser necessário mais para evitar o erro [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM).\n  </Accordion>\n\n  <Accordion title=\"Acesso temporariamente negado\" icon=\"ban\" iconType=\"solid\">\n    Se aparecer “Your access has been temporarily denied.”, aguarde ou contate https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Site demorou a responder\" icon=\"clock\" iconType=\"solid\">\n    Verifique a porta 80. Persistindo, contate https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Recursos adicionais\n\nMais sobre NestJS na [documentação oficial](https://docs.nestjs.com/). Precisa de ajuda? [Contate o suporte](/company/support).\n"
    },
    "veHHIeGEZwPG": {
      "id": "veHHIeGEZwPG",
      "path": "deploys/next-website",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "nodejs",
          "next"
        ]
      },
      "metadata": {
        "title": "Hospedando um Site Next.js no Square Cloud",
        "description": "Este artigo orienta você na criação e hospedagem de um site Next.js no Square Cloud.",
        "slug": "hospedando-um-site-nextjs-no-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introdução\n\n- Antes de começar, certifique-se de que você tem o Node.js e o npm instalados em seu sistema. Se ainda não os tiver, você pode baixá-los no [site oficial do Node.js](https://nodejs.org/).\n- Em seguida, será necessário criar uma conta no Square Cloud, o que pode ser feito através da [página de inscrição](https://squarecloud.app/signup). Você pode usar seu e-mail para criar a conta.\n- Por fim, você precisa ter um plano pago ativo em sua conta. Você pode visualizar nossos planos e adquirir um de acordo com suas necessidades [aqui](https://squarecloud.app/plans).\n\n### Criando um Projeto Next.js\n\nPara criar um novo projeto Next.js, execute o seguinte comando:\n\n```bash\nnpx create-next-app@latest my-app\n```\n\nNeste comando, `my-app` é o nome do seu novo projeto. Você pode substituí-lo por qualquer nome que desejar para o seu projeto. O comando `npx` é uma ferramenta que vem com o `npm`, o gerenciador de pacotes do Node.js. Ele é usado para executar pacotes Node.js que estão instalados localmente em seu projeto ou disponíveis remotamente no registro do npm.\n\n`create-next-app` é um pacote disponível no registro do npm que configura um novo projeto Next.js para você. Ele cuida de toda a configuração inicial, como criar o diretório do projeto, instalar dependências necessárias e configurar arquivos básicos.\n\n`@latest` é uma tag que especifica que você deseja usar a versão mais recente do pacote `create-next-app`. Isso garante que você esteja sempre usando a versão mais atualizada e, consequentemente, tenha acesso aos recursos mais recentes.\n\n## Configurando a Porta 80\n\nA porta 80 é a porta padrão para tráfego HTTP. Para hospedar um site Next.js no Square Cloud, é crucial configurar o uso da porta 80. No Next.js, você pode definir o parâmetro `-p 80` no script de inicialização para garantir que seu site seja executado corretamente nessa porta.\n\n## Criando o arquivo de configuração do squarecloud\n\n<Card title=\"Saiba mais: como criar o arquivo de configuração para o Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  O arquivo `squarecloud.app` é um arquivo de configuração que será utilizado para configurar sua aplicação; ele servirá para definir o nome, descrição, versão, arquivo principal, entre outros.\n</Card>\n\n## Configurando o Campo START\n\nNo arquivo de configuração do Square Cloud, o campo `START` é essencial para personalizar o comando de inicialização. Se você desejar compilar e iniciar seu site no Square Cloud, configure o campo `START` da seguinte forma:\n\n```app squarecloud.app\nSTART=npm run build && npm run start\n```\n\nEsse comando executará os scripts \"build\" e \"start\" definidos no seu `package.json`:\n\n```json package.json\n{\n  \"name\": \"my-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start -p 80\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"next\": \"14.1.0\"\n  },\n  \"devDependencies\": {\n    \"autoprefixer\": \"^10.0.1\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.3.0\",\n    \"eslint\": \"^8\",\n    \"eslint-config-next\": \"14.1.0\"\n  }\n}\n```\n\n## Adquirindo um Plano Antes de Enviar Seu Projeto\n\nAntes de poder enviar seu projeto para o Square Cloud, é importante entender que você precisa adquirir um plano. O tipo de plano que você escolher dependerá dos recursos necessários para sua aplicação. Você pode visualizar nossos planos [aqui](https://squarecloud.app/plans).\n\n<Note>**Está se perguntando quanta RAM e CPU seu plano precisa para hospedar um site Next.js?** Não se preocupe, estamos aqui para ajudar. O Next.js é um framework React mais conhecido por suas capacidades de renderização no lado do servidor e geração de site estático. Ele foi projetado para proporcionar uma experiência de desenvolvedor ideal através de recursos como zero-config, suporte automático a TypeScript, roteamento baseado em sistema de arquivos e suporte nativo a CSS. Nosso **[Plano Standard](https://squarecloud.app/pay/standard)** oferece **4 GB** de RAM e **4 vCPU**, o que deve ser suficiente para a maioria dos sites Next.js. No entanto, se você estiver trabalhando em um projeto maior ou precisar de mais estabilidade, recomendamos considerar nosso plano Pro. Com recursos adicionais, você pode garantir um desempenho suave mesmo sob alta demanda. Para comprar, basta clicar [aqui](https://squarecloud.app/pay/pro). </Note>\n\n## Enviando o Projeto para o Square Cloud\n\nApós preparar seus arquivos de projeto, agora você pode enviá-los para o Square Cloud e hospedar seu projeto.\n\n<Tabs>\n  <Tab title=\"Upload via Dashboard\">\n    Acesse o [Dashboard do Square Cloud](https://squarecloud.app/dashboard/upload) e envie seus arquivos de projeto.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Upload via CLI\">\n    <Steps>\n      <Step title=\"Primeiro Passo\">\n        Primeiro, você precisa ter o CLI instalado em seu ambiente. Se ainda não o tiver, execute o seguinte comando no terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        Se você já o possui, recomendamos atualizá-lo. Para isso, execute o seguinte comando no terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS e WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo Passo\">\n        Agora, para autenticar e usar outros comandos do CLI, você encontrará sua chave de autorização [aqui](https://squarecloud.app/account) clicando em \"Request API Key\". Após obter sua chave de autorização, execute o seguinte comando:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Terceiro Passo\">\n        Por fim, para implantar sua aplicação no Square Cloud usando o CLI, você precisa executar o seguinte comando, passando o caminho do seu arquivo zip:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Solução de Problemas\n\n<AccordionGroup>\n  <Accordion title=\"Domínio Personalizado\" icon=\"globe\" iconType=\"solid\">\n    Se você quiser usar um domínio personalizado para seu site hospedado no Square Cloud, observe que, por padrão, a URL será algo como `https://mysite.squareweb.app/`. O subdomínio é determinado pelo campo SUBDOMAIN no arquivo de configuração. Entretanto, se você preferir usar um domínio personalizado, como `mysite.com.br`, será necessário adquirir o plano Standard ou superior. Detalhamos cada etapa para configurar seu domínio personalizado em nosso artigo: [Como configurar seu domínio](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Quantidade Mínima de RAM\" icon=\"memory\" iconType=\"solid\">\n    A quantidade mínima de RAM necessária para hospedar um site é de 512 MB, porém, ao construir seu site diretamente no Square, é aconselhável usar uma quantidade maior, ou você poderá encontrar o erro [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM).\n  </Accordion>\n\n  <Accordion title=\"Acesso Temporariamente Negado\" icon=\"ban\" iconType=\"solid\">\n    Se você receber a mensagem \"Seu acesso foi temporariamente negado.\" ao tentar acessar o site, aguarde algum tempo. Se o problema persistir, entre em contato conosco em https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Site demorou muito para responder...\" icon=\"clock\" iconType=\"solid\">\n    Se você receber a mensagem \"Site demorou muito para responder...\" certifique-se de que configurou corretamente a porta 80 em seu site. Caso o problema persista, entre em contato conosco em https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Recursos Adicionais\n\nPara mais informações sobre Next.js e suas ferramentas, visite a [documentação oficial do Next.js](https://nextjs.org/docs). Lá, você encontrará guias detalhados, tutoriais e documentação da API para ajudá-lo a aproveitar ao máximo o Next.js.\n\nSe você continuar enfrentando problemas, não hesite em [contatar nossa equipe de suporte](/company/support).\n"
    },
    "fN9PfluMWrbs": {
      "id": "fN9PfluMWrbs",
      "path": "deploys/react-website",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "website",
          "react"
        ]
      },
      "metadata": {
        "title": "Hospedando uma Aplicação React no Square Cloud",
        "description": "Este artigo orienta você na criação e hospedagem de um site React no Square Cloud.",
        "slug": "hospedando-uma-aplicacao-react-no-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introdução\n\n- Antes de começar, certifique-se de que você tem o Node.js e o npm instalados no seu sistema. Caso ainda não tenha, você pode baixá-los no [site oficial do Node.js](https://nodejs.org/).\n- Em seguida, será necessário criar uma conta na Square Cloud, o que pode ser feito através da [página de cadastro](https://squarecloud.app/signup). Você pode usar seu e-mail para criar a conta.\n- Por fim, é necessário ter um plano pago ativo na sua conta. Você pode visualizar nossos planos e adquirir um conforme sua necessidade [aqui](https://squarecloud.app/plans).\n\n### Criando um Projeto React\n\nPara criar um novo projeto React, execute o seguinte comando:\n\n```bash\nnpx create-react-app my-react-app\n```\n\nNo comando acima, `my-react-app` é o nome do seu novo projeto. Você pode substituí-lo por qualquer nome desejado.\n\n`create-react-app` é um pacote disponível no registro npm que configura um novo projeto React para você. Ele cuida de toda a configuração inicial, como criar o diretório do projeto, instalar dependências necessárias e configurar arquivos básicos.\n\n## Configurando o Ambiente de Produção com Serve\n\nDepois de ter criado e configurado seu projeto React, é hora de prepará-lo para produção. Para isso, utilizaremos uma biblioteca chamada `serve`. Essa biblioteca é um servidor estático que pode servir seu projeto React após ele ser compilado.\n\n### Instalando a Biblioteca Serve\n\nPara instalar a biblioteca `serve`, navegue até o diretório do seu projeto no terminal e execute o seguinte comando:\n\n```bash\nnpm install serve@14.2.3\n```\n\nEsse comando instala a versão `14.2.3` da biblioteca `serve`. Se quiser instalar a versão mais recente, pode omitir o `@14.2.3`.\n\n### Configurando o Script de Inicialização\n\nApós instalar a biblioteca `serve`, você precisa configurar o script de inicialização do seu projeto para usar o `serve`. Para isso, abra o arquivo `package.json` do seu projeto e adicione um novo script chamado `start:prod`:\n\n```json\n\"scripts\": {\n  \"start\": \"react-scripts start\",\n  \"start:prod\": \"serve -s build -l 80\",\n  ...\n}\n```\n\nNo script `start:prod`, o comando `serve -s build -l 80` faz o seguinte:\n\n- `serve`: inicia o servidor `serve`.\n- `-s build`: a opção `-s` serve o diretório `build` em modo single-page application. Isso significa que todas as requisições não encontradas serão redirecionadas para `index.html`. O diretório `build` é criado ao executar `npm run build`.\n- `-l 80`: a opção `-l` seguida de `80` instrui o `serve` a escutar na porta 80. A porta 80 é a padrão para tráfego HTTP.\n\nAgora, quando quiser iniciar seu projeto em modo produção, execute o comando `npm run start:prod`. Esse comando primeiro compila seu projeto React e depois serve os arquivos compilados usando o `serve` na porta 80.\n\n## Criando o arquivo de configuração da Square Cloud\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  O arquivo squarecloud.app é um arquivo de configuração que será usado para configurar sua aplicação; ele define nome, descrição, versão, arquivo principal, entre outras coisas.\n</Card>\n\n## Configurando o Campo START\n\nNo arquivo de configuração da Square Cloud, o campo `START` é essencial para personalizar o comando de inicialização. Para compilar e iniciar sua aplicação na Square Cloud, configure o campo `START` da seguinte forma:\n\n```app squarecloud.app\nSTART=npm run build && npm run start:prod\n```\n\nEsse comando executará os scripts \"build\" e \"start:prod\" definidos no seu `package.json`:\n\n```json package.json\n{\n  \"name\": \"my-react-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@testing-library/jest-dom\": \"^5.17.0\",\n    \"@testing-library/react\": \"^13.4.0\",\n    \"@testing-library/user-event\": \"^13.5.0\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-scripts\": \"5.0.1\",\n    \"serve\": \"^14.2.3\",\n    \"web-vitals\": \"^2.1.4\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"start:prod\": \"serve -s build -l 80\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n```\n\n## Adquirindo um Plano Antes de Enviar Seu Projeto\n\nAntes de poder enviar seu projeto para a Square Cloud, é importante entender que você precisa adquirir um plano. O tipo de plano escolhido dependerá dos recursos necessários para sua aplicação. Você pode ver nossos planos aqui.\n\n<Note>**Está se perguntando quanta RAM e CPU seu plano precisa para hospedar um site em React?** Não se preocupe, estamos aqui para ajudar. O React é um framework JavaScript conhecido por sua velocidade e flexibilidade. Ele permite construir grandes aplicações web que se atualizam de forma eficiente com mudanças de dados. Também é relativamente fácil de aprender, sendo acessível para iniciantes. Nosso plano **[Standard](https://squarecloud.app/pay/standard)** oferece **4GB** de RAM e **4vCPU**, o que é suficiente para a maioria dos sites em React. Contudo, se estiver trabalhando em um projeto maior ou precisar de mais estabilidade, recomendamos considerar o plano Pro. Com recursos adicionais, você garante desempenho fluido mesmo com alta demanda. Para adquirir, basta clicar [aqui](https://squarecloud.app/pay/pro).</Note>\n\n## Enviando Projeto para a Square Cloud\n\nDepois de preparar os arquivos do seu projeto, você pode enviá-los para a Square Cloud e hospedar seu projeto.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Acesse o [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) e envie os arquivos do seu projeto.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"Primeiro Passo\">\n        Primeiro, é necessário ter a CLI instalada no seu ambiente. Caso ainda não tenha, execute:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        Se já tiver, recomendamos atualizar. Para isso:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS e WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo Passo\">\n        Agora, para autenticar e usar os demais comandos da CLI, acesse sua [chave de autorização](https://squarecloud.app/account) clicando em \"Request API Key\". Após obtê-la, execute:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Terceiro Passo\">\n        Por fim, para fazer o deploy da sua aplicação na Square Cloud usando a CLI, execute:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Solução de Problemas\n\n<AccordionGroup>\n  <Accordion title=\"Domínio Personalizado\" icon=\"globe\" iconType=\"solid\">\n    Se deseja usar um domínio personalizado na sua aplicação hospedada na Square Cloud, por padrão a URL será algo como `https://mysite.squareweb.app/`. O subdomínio é definido pelo campo SUBDOMAIN no arquivo de configuração. No entanto, para usar um domínio personalizado como `mysite.com.br`, você precisará adquirir o plano **Standard** ou superior. Detalhamos cada etapa neste artigo: [Como configurar seu domínio personalizado](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Requisito Mínimo de RAM\" icon=\"memory\" iconType=\"solid\">\n    A quantidade mínima de RAM necessária para hospedar um site é 512MB, mas ao compilar seu site diretamente na Square, é aconselhável usar mais RAM, ou você poderá enfrentar o erro [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM).\n  </Accordion>\n\n  <Accordion title=\"Acesso Temporariamente Negado\" icon=\"ban\" iconType=\"solid\">\n    Se receber a mensagem \"Your access has been temporarily denied.\" ao tentar acessar o site, aguarde algum tempo. Se o problema persistir, entre em contato em https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"O site demorou muito para responder...\" icon=\"clock\" iconType=\"solid\">\n    Se receber a mensagem \"Website took too long to respond...\" verifique se a porta 80 foi corretamente configurada no seu site. Se o problema persistir, entre em contato em https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Recursos Adicionais\n\nPara mais informações sobre o React e suas ferramentas, visite a [documentação oficial do React](https://reactjs.org/docs). Lá você encontrará guias detalhados, tutoriais e documentação da API para aproveitar ao máximo o React.\n\nSe continuar enfrentando problemas, não hesite em [entrar em contato com nosso suporte](/company/support).\n"
    },
    "6Ks4IlL4H9Kc": {
      "id": "6Ks4IlL4H9Kc",
      "path": "deploys/telegram-bot",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "bot",
          "telegram"
        ]
      },
      "metadata": {
        "title": "Hospedando um Bot do Telegram no Square Cloud",
        "description": "Este artigo orienta você na criação e hospedagem de um bot do Telegram no Square Cloud.",
        "slug": "hospedando-um-bot-do-telegram-no-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introdução\n\n- Antes de começar a codificar, você precisa configurar seu bot corretamente no Telegram. Primeiro, é necessário ter uma conta no Telegram. Se você ainda não tem uma, pode criar uma visitando o [site oficial do Telegram](https://telegram.org/).\n\n<AccordionGroup>\n  <Accordion title=\"Primeiros Passos\" icon=\"rocket\" iconType=\"solid\">\n    Primeiro, você deve acessar [Telegram](https://web.telegram.org/a/) e procurar por um bot chamado \"BotFather.\"\n\n    <Frame>\n      <img src=\"/images/articles/telegram/getting-started.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Obtendo o Token\" icon=\"key\" iconType=\"solid\">\n    Clique nele para iniciar uma conversa e digite \"start\". Quando enviar a mensagem, escolha a opção \"/newbot\". Depois disso, ele solicitará o nome que você deseja para o seu bot e, finalmente, quando você escolher o nome, ele gerará o token.\n\n    <Frame>\n      <img src=\"/images/articles/telegram/getting-the-token.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n<Warning>Lembre-se de manter o token do seu bot em segredo, pois ele pode ser usado para controlar o seu bot.</Warning>\n\n- Em seguida, você precisará criar uma conta na Square Cloud, o que pode ser feito através da [página de cadastro](https://squarecloud.app/signup). Você pode usar seu e-mail para criar uma conta.\n- Por fim, você precisa ter um plano pago ativo na sua conta. Você pode visualizar nossos planos e adquirir um de acordo com suas necessidades [aqui](https://squarecloud.app/plans).\n\n# Usando wrappers para criação de bots\n\n<Tabs>\n  <Tab title=\"node-telegram-bot-api\">\n    1. Certifique-se de que o Node.js esteja instalado no seu sistema. Caso não esteja, você pode baixá-lo no [site oficial do Node.js](https://nodejs.org/).\n    2. Inicialize um novo projeto Node.js usando `npm init`. Isto criará um novo arquivo `package.json` para o seu projeto:\n\n    ```bash\n    npm init -y\n    ```\n\n    3. Instale a biblioteca node-telegram-bot-api usando npm:\n\n    ```bash\n    npm install node-telegram-bot-api\n    ```\n\n    4. Crie um novo arquivo JavaScript (por exemplo, `index.js`) e adicione o seguinte código para criar um bot básico no Telegram:\n\n    ```javascript index.js\n    // Importing the node-telegram-bot-api library\n    const TelegramBot = require(\"node-telegram-bot-api\");\n\n    // Configuring the API key\n    const token = \"your token here\";\n\n    // Initializing the bot\n    const bot = new TelegramBot(token, { polling: true });\n\n    // Getting bot information\n    bot.getMe().then((botInfo) => {\n      // Getting the bot's name\n      const botName = botInfo.username;\n\n      // Defining a route for messages that are not commands\n      bot.on(\"message\", (msg) => {\n        // Getting the chat ID\n        const chatId = msg.chat.id;\n        // Getting the user's message\n        const userMsg = msg.text;\n        // Formatting the message to be sent\n        const responseMsg = `\\${botName} Says: \\${userMsg}`;\n        // Sending the message\n        bot.sendMessage(chatId, responseMsg);\n      });\n\n      // Printing the bot's name\n      console.log(botName);\n    });\n    ```\n  </Tab>\n\n  <Tab title=\"telebot\">\n    1. Certifique-se de ter Python e Pip (um gerenciador de pacotes para Python) instalados no seu sistema. Caso não tenha, você pode baixá-los no [site oficial do Python](https://www.python.org/) e no [site oficial do Pip](https://pypi.org/).\n    2. Instale a biblioteca telebot usando pip:\n\n    ```bash\n    pip install telebot\n    ```\n\n    3. Crie um novo arquivo Python (por exemplo, `main.py`) e adicione o seguinte código para criar um bot básico no Telegram:\n\n    ```python main.py\n\n    # Importing the telebot_router library\n\n    from telebot_router import TeleBot\n\n    # Initializing the bot\n\n    app = TeleBot(__name__)\n\n    # Defining a route for messages that are not commands\n\n    @app.route('(?!/).+')\n    def parrot(message):\n        # Getting the chat ID\n        chat_dest = message['chat']['id']\n        # Getting the user's message\n        user_msg = message['text']\n        # Getting bot information\n        bot_info = app.get_me()['result']\n        # Getting the bot's name\n        bot_name = bot_info['username']\n        # Formatting the message to be sent\n        msg = \"{} Says: {}\".format(bot_name, user_msg)\n        # Sending the message\n        app.send_message(chat_dest, msg)\n\n    # Defining the main function\n\n    if __name__ == '__main__':\n        # Configuring the API key\n        app.config['api_key'] = 'your token here'\n        # Getting bot information\n        bot_info = app.get_me()['result']\n        # Getting the bot's name\n        bot_name = bot_info['username']\n        # Printing the bot's name\n        print(f\"{bot_name}\")\n        # Starting the bot\n        app.poll(debug=True)\n    ```\n\n    4. Crie um arquivo `requirements.txt` para listar todas as bibliotecas externas necessárias para o seu projeto:\n\n    ```txt requirements.txt\n    telebot\n    ```\n  </Tab>\n</Tabs>\n\n## Criando o arquivo de configuração da Square Cloud\n\n<Card title=\"Saiba mais: como criar o arquivo de configuração para a Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  O arquivo squarecloud.app é um arquivo de configuração que será usado para configurar sua aplicação; ele definirá o nome, a descrição, a versão, o arquivo principal, entre outras coisas.\n</Card>\n\n## Configurando o campo START\n\n<Warning>Use este campo somente se tiver plena certeza do que está fazendo.</Warning>\n\nNo arquivo de configuração da Square Cloud, o campo **START** é opcional e só é necessário se você estiver usando um script personalizado para iniciar o bot. No exemplo fornecido, o campo **START** não é necessário.\n\n## Enviando o projeto para a Square Cloud\n\nDepois de preparar os arquivos do seu projeto, você pode enviá-los para a Square Cloud e hospedar o seu projeto.\n\n<Tabs>\n  <Tab title=\"Upload pelo Dashboard\">\n    Acesse o [Dashboard da Square Cloud](https://squarecloud.app/dashboard/upload) e carregue os arquivos do seu projeto.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Upload via CLI\">\n    <Steps>\n      <Step title=\"Primeiro Passo\">\n        Primeiro, você precisa ter a CLI instalada no seu ambiente. Se ainda não tiver, execute o seguinte comando no seu terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        Se você já possui a CLI, recomendamos atualizá-la. Para isso, execute o seguinte comando no seu terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS e WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo Passo\">\n        Para autenticar e usar outros comandos da CLI, você encontrará sua chave de autorização [aqui](https://squarecloud.app/account) clicando em \"Request API Key\". Após obter a chave, execute:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Terceiro Passo\">\n        Por fim, para fazer o deploy da sua aplicação na Square Cloud usando a CLI, execute:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Testando o bot\n\nSe você fez tudo corretamente, basta procurar o seu bot no Telegram e enviar uma mensagem; ele irá devolvê-la como eco.\n\n<Frame>\n  <img src=\"/images/articles/telegram/testing-bot.png\" style={{ borderRadius: \"0.2rem\" }} />\n</Frame>\n\n## Recursos adicionais\n\nPara mais informações sobre a criação de bots com telebot, visite a [documentação oficial do telebot](https://pypi.org/project/telebot/). Lá você encontrará guias detalhados, tutoriais e documentação da API para aproveitar ao máximo essas bibliotecas.\n\nSe continuar enfrentando problemas, não hesite em [entrar em contato com nossa equipe de suporte](/company/support).\n"
    },
    "k6CQUbg64Fdl": {
      "id": "k6CQUbg64Fdl",
      "path": "deploys/vite-website",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "website",
          "vite"
        ]
      },
      "metadata": {
        "title": "Hospedando uma Aplicação Vite no Square Cloud",
        "description": "Este artigo orienta você na criação e hospedagem de uma aplicação Vite no Square Cloud",
        "slug": "hospedando-uma-aplicacao-vite-no-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introdução\n\n- Antes de começar, certifique-se de que você tem o Node.js e o npm instalados no seu sistema. Caso ainda não tenha, você pode baixá-los no [site oficial do Node.js](https://nodejs.org/).\n- Em seguida, será necessário criar uma conta na Square Cloud, o que pode ser feito através da [página de cadastro](https://squarecloud.app/signup). Você pode usar seu e-mail para criar a conta.\n- Por fim, é necessário ter um plano pago ativo na sua conta. Você pode visualizar nossos planos e adquirir um conforme sua necessidade [aqui](https://squarecloud.app/plans).\n\n### Criando um Projeto Vite\n\nPara criar um novo projeto Vite, execute o seguinte comando:\n\n```bash\nnpm create vite@latest my-vite-app\n```\n\nNo comando acima, `my-vite-app` é o nome do seu novo projeto. Substitua-o por qualquer nome desejado para o seu projeto. Por padrão, esse comando configura o projeto Vite com JavaScript.\n\n### Escolhendo um Template Específico\n\nO Vite permite escolher diferentes templates para seu projeto. Ao criar um novo projeto, você pode especificar o template desejado usando a opção `--template`. Veja alguns exemplos:\n\nSelecione um template entre: `react`, `vue` e `lit`.\n\n```bash\n\n# npm 7+, extra double-dash is needed\n\nnpm create vite@latest my-vite-app -- --template [template]\n```\n\nEscolha o template que melhor atende às suas necessidades e ajuste o nome do projeto conforme necessário.\n\n### Entendendo a Diferença entre JavaScript e TypeScript\n\nQuando você escolhe JavaScript, o Vite configura o projeto com as configurações padrão de JavaScript. Por outro lado, ao escolher TypeScript, o Vite configura o projeto com as definições de TypeScript, incluindo a geração de um arquivo `tsconfig.json`.\n\n## Configurando a Porta 80\n\nA porta 80 é a padrão para tráfego HTTP. Para hospedar um app Vite na Square Cloud, configure o uso da porta 80. No Vite, você pode definir o parâmetro `--port 80` no script de inicialização para garantir que seu app seja executado corretamente nessa porta.\n\n## Configurando o Host 0.0.0.0\n\nA opção `--host 0.0.0.0` é usada para vincular o servidor Vite a todas as interfaces de rede disponíveis. Isso torna sua aplicação acessível não apenas em `localhost`, mas também em dispositivos externos na mesma rede, como outros computadores ou dispositivos móveis. Por padrão, o Vite se vincula a `localhost`, o que restringe o acesso à máquina onde está sendo executado. Definir o host como `0.0.0.0` permite que o servidor escute requisições de qualquer endereço IP.\n\n## Criando o arquivo de configuração squarecloud.app\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  O arquivo squarecloud.app é um arquivo de configuração que será usado para configurar sua aplicação; ele será usado para definir o nome, descrição, versão, arquivo principal, entre outras coisas.\n</Card>\n\n## Configurando o Campo START\n\nNo arquivo de configuração da Square Cloud, o campo `START` é essencial para customizar o comando de inicialização. Se você quiser compilar e iniciar seu app Vite na Square Cloud, configure o campo `START` da seguinte forma:\n\n```app squarecloud.app\nSTART=npm run build && npm run preview\n```\n\nEsse comando executará os scripts \"build\" e \"preview\" definidos no seu `package.json`:\n\n```json package.json\n{\n  \"name\": \"my-vite-app\",\n  \"private\": true,\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview --host 0.0.0.0 --port 80\"\n  },\n  \"devDependencies\": {\n    \"vite\": \"^5.1.4\"\n  }\n}\n```\n\n## Adquirindo um Plano Antes de Enviar Seu Projeto\n\nAntes de poder enviar seu projeto para a Square Cloud, é importante entender que você precisa adquirir um plano. O tipo de plano que você escolher dependerá dos recursos necessários para sua aplicação. Você pode ver nossos planos [aqui](https://squarecloud.app/plans).\n\n<Note>**Está se perguntando quanta RAM e CPU seu plano precisa para hospedar um site Vite?** Não se preocupe, estamos aqui para ajudar. O Vite é uma ferramenta moderna de build front-end que oferece uma experiência de desenvolvimento mais rápida e enxuta para projetos web modernos. Ele foi projetado para fornecer suporte imediato a módulos ES, permitindo inicialização instantânea do servidor e substituição de módulos a quente. Nosso plano **[Standard](https://squarecloud.app/pay/standard)** oferece **4GB** de RAM e **4vCPU**, o que deve ser suficiente para a maioria dos sites Vite. No entanto, se você estiver trabalhando em um projeto maior ou precisar de mais estabilidade, recomendamos considerar nosso plano Pro. Com recursos adicionais, você pode garantir desempenho suave mesmo sob alta demanda. Para adquirir, basta clicar [aqui](https://squarecloud.app/pay/pro).</Note>\n\n## Enviando Projeto para a Square Cloud\n\nApós preparar os arquivos do seu projeto, você pode enviá-los para a Square Cloud e hospedar seu projeto.\n\n<Tabs>\n  <Tab title=\"Upload via Dashboard\">\n    Acesse o [Dashboard da Square Cloud](https://squarecloud.app/dashboard/upload) e envie os arquivos do seu projeto.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Upload via CLI\">\n    <Steps>\n      <Step title=\"Primeiro Passo\">\n        Primeiro, você precisa ter a CLI instalada no seu ambiente. Caso ainda não tenha, execute o seguinte comando no terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        Se já tiver, recomendamos atualizá-la. Para isso, execute o seguinte comando no terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS e WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo Passo\">\n        Agora, para autenticar e usar os demais comandos da CLI, você encontrará sua chave de autorização [aqui](https://squarecloud.app/account) clicando em \"Request API Key\". Após obter sua chave de autorização, execute o seguinte comando:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Terceiro Passo\">\n        Por fim, para fazer o deploy da sua aplicação na Square Cloud usando a CLI, você precisa executar o seguinte comando, passando o caminho do seu arquivo zip:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Solução de Problemas\n\n<AccordionGroup>\n  <Accordion title=\"Domínio Personalizado\" icon=\"globe\" iconType=\"solid\">\n    Se você quiser usar um domínio personalizado para seu app hospedado na Square Cloud, observe que, por padrão, a URL será algo como `https://mysite.squareweb.app/`. O subdomínio é determinado pelo campo SUBDOMAIN no arquivo de configuração. No entanto, se preferir usar um domínio personalizado, como `mysite.com`, você precisará adquirir o plano `Standard` ou superior. Detalhamos cada etapa para configurar seu domínio personalizado em nosso artigo: [Como configurar seu domínio personalizado](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Requisitos Mínimos de RAM\" icon=\"memory\" iconType=\"solid\">\n    A quantidade mínima de RAM necessária para hospedar um site ou API é 512MB, porém, ao construir seu site diretamente na Square, é aconselhável usar uma quantidade maior, ou você poderá encontrar o erro [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM).\n  </Accordion>\n\n  <Accordion title=\"Acesso Temporariamente Negado\" icon=\"ban\" iconType=\"solid\">\n    Se você receber a mensagem \"Your access has been temporarily denied.\" ao tentar acessar o site, aguarde um pouco. Se o problema persistir, sinta-se à vontade para entrar em contato conosco em https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"O site demorou muito para responder...\" icon=\"clock\" iconType=\"solid\">\n    Se você receber a mensagem \"Website took too long to respond...\", certifique-se de ter configurado corretamente a porta 80 no seu site. Se o problema persistir, sinta-se à vontade para entrar em contato conosco em https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Recursos Adicionais\n\nPara mais informações sobre o Vite e suas ferramentas, visite a [documentação oficial do Vite](https://vitejs.dev/guide/). Lá você encontrará guias detalhados, tutoriais e documentação da API para aproveitar ao máximo o Vite.\n\nSe você continuar enfrentando qualquer problema, não hesite em [entrar em contato com nossa equipe de suporte](/company/support).\n"
    },
    "6T1BB3ROntV8": {
      "id": "6T1BB3ROntV8",
      "path": "deploys/vue-website",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "vue",
          "website"
        ]
      },
      "metadata": {
        "title": "Hospedando uma Aplicação Vue no Square Cloud",
        "description": "Este artigo orienta você na criação e hospedagem de uma aplicação Vue no Square Cloud",
        "slug": "hospedando-uma-aplicacao-vue-no-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introdução\n\n- Antes de começar, certifique-se de que você tem o Node.js e o npm instalados no seu sistema. Caso ainda não tenha, você pode baixá-los no [site oficial do Node.js](https://nodejs.org/).\n- Em seguida, será necessário criar uma conta na Square Cloud, o que pode ser feito através da [página de cadastro](https://squarecloud.app/signup). Você pode usar seu e-mail para criar a conta.\n- Por fim, é necessário ter um plano pago ativo na sua conta. Você pode visualizar nossos planos e adquirir um conforme sua necessidade [aqui](https://squarecloud.app/plans).\n\n### Criando um Projeto Vue\n\nPara criar um novo projeto Vue, execute o seguinte comando:\n\n```bash\nnpm create vue@latest\n```\n\nNesse comando, `npm create vue@latest` é usado para criar um novo projeto Vue com a versão mais recente do Vue. O comando `npm create` é uma ferramenta do `npm`, o gerenciador de pacotes do Node.js. Ele serve para inicializar um pacote npm novo ou existente.\n\n`vue@latest` é um pacote disponível no registro npm que configura um novo projeto Vue para você. Ele cuida de toda a configuração inicial, como criar o diretório do projeto, instalar dependências necessárias e configurar arquivos básicos.\n\n`@latest` é uma tag que especifica que você deseja usar a versão mais recente do pacote `vue`. Isso garante que você sempre esteja usando a versão mais atualizada e tenha acesso aos recursos mais recentes.\n\n## Configurando a Porta 80\n\nA porta 80 é a porta padrão para tráfego HTTP. Para hospedar uma aplicação Vite na Square Cloud, configure o uso da porta 80. No Vite, você pode definir o parâmetro `--port 80` no script de inicialização para garantir que seu app seja executado corretamente nessa porta.\n\n## Criando o arquivo de configuração squarecloud.app\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  O arquivo squarecloud.app é um arquivo de configuração que será usado para configurar sua aplicação; ele será usado para definir o nome, descrição, versão, arquivo principal, entre outras coisas.\n</Card>\n\n## Configurando o Campo START\n\nNo arquivo de configuração da Square Cloud, o campo `START` é essencial para customizar o comando de inicialização. Para compilar e iniciar seu app Vue na Square Cloud, configure o campo `START` da seguinte forma:\n\n```app squarecloud.app\nSTART=npm run build && npm run serve\n```\n\nEsse comando executará os scripts “build” e “serve” definidos no seu `package.json`:\n\n```json package.json\n{\n  \"name\": \"vue-project\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"serve\": \"vite preview --port 80\"\n  },\n  \"dependencies\": {\n    \"vue\": \"^3.4.21\"\n  },\n  \"devDependencies\": {\n    \"@vitejs/plugin-vue\": \"^5.0.4\",\n    \"vite\": \"^5.2.8\"\n  }\n}\n```\n\n## Adquirindo um Plano Antes de Enviar Seu Projeto\n\nAntes de poder enviar seu projeto para a Square Cloud, é importante entender que você precisa adquirir um plano. O tipo de plano que você escolher dependerá dos recursos necessários para sua aplicação. Você pode ver nossos planos [aqui](https://squarecloud.app/plans).\n\n<Note>**Está se perguntando quanta RAM e CPU seu plano precisa para hospedar um site Vue.js?** Não se preocupe, estamos aqui para ajudar. O Vue.js é um framework JavaScript progressivo, conhecido por sua adaptabilidade e simplicidade. Ele foi projetado para ser adotado de forma incremental, facilitando que desenvolvedores comecem em pequenos passos e escalem conforme necessário. O Vue.js também enfatiza uma renderização declarativa e uma abordagem orientada a componentes, tornando intuitiva a construção de interfaces modernas. Nosso plano **[Standard](https://squarecloud.app/pay/standard)** oferece **4GB** de RAM e **4vCPU**, o que deve ser suficiente para a maioria dos sites Vue.js. No entanto, se você estiver trabalhando em um projeto maior ou precisar de mais estabilidade, recomendamos considerar nosso plano Pro. Com recursos adicionais, você pode garantir desempenho suave mesmo sob alta demanda. Para adquirir, basta clicar [aqui](https://squarecloud.app/pay/pro).</Note>\n\n## Enviando Projeto para a Square Cloud\n\nApós preparar os arquivos do seu projeto, você pode enviá-los para a Square Cloud e hospedar seu projeto.\n\n<Tabs>\n  <Tab title=\"Upload via Dashboard\">\n    Acesse o [Dashboard da Square Cloud](https://squarecloud.app/dashboard/upload) e envie os arquivos do seu projeto.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Upload via CLI\">\n    <Steps>\n      <Step title=\"Primeiro Passo\">\n        Primeiro, você precisa ter a CLI instalada no seu ambiente. Caso ainda não tenha, execute:\n\n        ```bash\n        npm install -g @squarecloud/cli\n        ```\n\n        Se já tiver, recomendamos atualizá-la executando:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS e WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo Passo\">\n        Agora, para autenticar e usar os demais comandos da CLI, obtenha sua chave de autorização [aqui](https://squarecloud.app/account) clicando em “Request API Key”. Depois de obtê-la, execute:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Terceiro Passo\">\n        Por fim, para fazer o deploy da sua aplicação na Square Cloud usando a CLI, execute:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Solução de Problemas\n\n<AccordionGroup>\n  <Accordion title=\"Domínio Personalizado\" icon=\"globe\" iconType=\"solid\">\n    Se você quiser usar um domínio personalizado para seu app hospedado na Square Cloud, observe que, por padrão, a URL será algo como `https://mysite.squareweb.app/`. O subdomínio é determinado pelo campo SUBDOMAIN no arquivo de configuração. No entanto, se preferir usar um domínio personalizado, como `mysite.com`, você precisará adquirir o plano **Standard** ou superior. Detalhamos cada etapa para configurar seu domínio personalizado em nosso artigo: [Como configurar seu domínio personalizado](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Requisitos Mínimos de RAM\" icon=\"memory\" iconType=\"solid\">\n    A quantidade mínima de RAM necessária para hospedar um site ou API é 512MB, mas ao construir seu site diretamente na Square, é aconselhável usar uma quantidade maior, ou você poderá encontrar o erro [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM).\n  </Accordion>\n\n  <Accordion title=\"Acesso Temporariamente Negado\" icon=\"ban\" iconType=\"solid\">\n    Se você receber a mensagem “Your access has been temporarily denied.” ao tentar acessar o site, aguarde um pouco. Se o problema persistir, entre em contato em https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"O site demorou muito para responder...\" icon=\"clock\" iconType=\"solid\">\n    Se você receber a mensagem “Website took too long to respond...”, certifique-se de ter configurado corretamente a porta 80 no seu site. Se o problema persistir, entre em contato em https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Recursos Adicionais\n\nPara mais informações sobre Vue e suas ferramentas, visite a [documentação oficial do Vue](https://vuejs.org/). Lá você encontrará guias detalhados, tutoriais e documentação da API para ajudar você a aproveitar ao máximo o Vue.\n\nSe você continuar enfrentando problemas, não hesite em [entrar em contato com nossa equipe de suporte](/company/support).\n"
    },
    "7x3Iy9P6E1uc": {
      "id": "7x3Iy9P6E1uc",
      "path": "deploys/website",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "website"
        ]
      },
      "metadata": {
        "title": "Hospedando Seu Site/API no Square Cloud",
        "description": "Aprenda como hospedar seu site ou API no Square Cloud usando o arquivo de configuração squarecloud.app.",
        "slug": "hospedando-seu-siteapi-no-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introdução\n\n- Crie uma conta na Square Cloud, o que pode ser feito através da [página de cadastro](https://squarecloud.app/signup). Você pode usar seu e-mail para criar uma conta.\n- Tenha um plano pago ativo na sua conta. Você pode visualizar nossos planos e adquirir um conforme suas necessidades [aqui](https://squarecloud.app/plans).\n\n## Criando o arquivo de configuração squarecloud.app\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  O arquivo squarecloud.app é um arquivo de configuração que será usado para\n  configurar sua aplicação; ele servirá para definir o nome, descrição,\n  versão, arquivo principal, entre outras coisas.\n</Card>\n\n### Parâmetros importantes do site\n\nA **porta do site** precisa ser **80**; se você estiver usando um site estático, não precisa definir o parâmetro `START`.\n\nNo arquivo de configuração squarecloud.app:\n\n- `SUBDOMAIN`: se estiver hospedando um site, defina este parâmetro para o subdomínio desejado.\n- `START`: um comando de inicialização customizado (se necessário).\n\n<Note>A URL do site será: `meu-parametro-subdominio`.squareweb.app</Note>\n\n```systemd This example host a website without custom startup command\nMAIN=index.html\nMEMORY=512\nVERSION=recommended\nDISPLAY_NAME=Meu site estático simples!\nSUBDOMAIN=meu-site-estatico-simples\n```\n\n```systemd This example use all parameters and custom startup command in a website\nMAIN=index.js\nMEMORY=512\nVERSION=recommended\nDISPLAY_NAME=Meu site Next.js simples!\nSUBDOMAIN=meu-site-nextjs-simples\nSTART=npm run build && npm run start\n```\n\n# Suporte para múltiplas tecnologias\n\n<CardGroup cols={2}>\n  <Card title=\"React\" icon=\"react\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-react-website\">\n    Aprenda como hospedar seu site React na Square Cloud.\n  </Card>\n\n  <Card title=\"Next.js\" icon=\"node-js\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-next-website\">\n    Aprenda como hospedar seu site Next.js na Square Cloud.\n  </Card>\n\n  <Card title=\"NestJs\" icon=\"js\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-nestjs-application\">\n    Aprenda como hospedar sua aplicação NestJs na Square Cloud.\n  </Card>\n\n  <Card title=\"Vite\" icon=\"rocket\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-vite-website\">\n    Aprenda como hospedar seu site Vite na Square Cloud.\n  </Card>\n\n  <Card title=\"Vue\" icon=\"vuejs\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-vue-website\">\n    Aprenda como hospedar seu site Vue na Square Cloud.\n  </Card>\n\n  <Card title=\"Flask\" icon=\"flask\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-flask-application\">\n    Aprenda como hospedar sua aplicação Flask na Square Cloud.\n  </Card>\n\n  <Card title=\"Django\" icon=\"python\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-django-application\">\n    Aprenda como hospedar sua aplicação Django na Square Cloud.\n  </Card>\n\n  <Card title=\"Lavalink\" icon=\"java\" href=\"https://docs.squarecloud.app/tutorials/how-to-create-your-lavalink-server\">\n    Aprenda como hospedar seu servidor Lavalink e transmitir música de alta qualidade para seu bot do Discord.\n  </Card>\n</CardGroup>\n\nSeguindo estes passos, você terá seu site ou API funcionando perfeitamente na Square Cloud. Se encontrar algum problema ou precisar de mais assistência, não hesite em entrar em contato com nossa [equipe de suporte](../company/support).\n"
    },
    "HXeR7IXfcx96": {
      "id": "HXeR7IXfcx96",
      "path": "deploys/whatsapp-bot",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "bot",
          "whatsapp"
        ]
      },
      "metadata": {
        "title": "Hospedando um Bot do Whatsapp no Square Cloud",
        "description": "Este artigo orienta você na criação e hospedagem de um bot do Whatsapp no Square Cloud.",
        "slug": "hospedando-um-bot-do-whatsapp-no-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introdução\n\n- Antes de começar a codificar é necessário configurar seu bot no WhatsApp corretamente. Primeiro, você precisa ter o WhatsApp baixado em seu telefone. Se ainda não o tiver, você pode visitar o [site oficial do WhatsApp](https://www.whatsapp.com/coronavirus/get-started?lang=en). Após instalar e configurar o WhatsApp, você pode começar a programar seu bot.\n- Em seguida, será necessário criar uma conta na Square Cloud, o que pode ser feito através da [página de cadastro](https://squarecloud.app/signup). Você pode usar seu e-mail para criar uma conta.\n- Por fim, você precisa ter um plano pago ativo em sua conta. Você pode ver nossos planos e adquirir um de acordo com suas necessidades [aqui](https://squarecloud.app/plans).\n\n<AccordionGroup>\n  <Accordion title=\"Caminho remoto para a versão Web do WhatsApp\" icon=\"file\" iconType=\"solid\">\n    Se o seu código requer acesso ao caminho remoto da versão Web do WhatsApp, siga este procedimento.\n    Você pode acessar [wa-version](https://github.com/wppconnect-team/wa-version/tree/main/html), escolher a versão desejada (a mais recente é sempre recomendada) e clicar em \"Raw\". Após a página abrir, basta copiar o URL, que será utilizado mais tarde. URL de exemplo:\n    \"https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2412.54.html\"\n\n    <Frame>\n      <img src=\"/images/articles/whatsapp/remote-path.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n# Iniciando o Projeto\n\n1. Certifique-se de ter o Node.js instalado em seu sistema. Se não tiver, você pode baixá-lo do [site oficial do Node.js](https://nodejs.org/).\n2. Inicialize um novo projeto Node.js usando `npm init`. Isso criará um novo arquivo `package.json` para o seu projeto:\n\n```bash\nnpm init -y\n```\n\n3. Instale as bibliotecas whatsapp-web.js e qrcode via npm:\n\n```bash\nnpm install whatsapp-web.js qrcode\n```\n\n4. Crie um novo arquivo JavaScript (por exemplo, `index.js`) e adicione o seguinte código para criar um bot básico do WhatsApp:\n\n```javascript index.js\n// Importando os módulos necessários\nconst { Client } = require(\"whatsapp-web.js\");\nconst qrcode = require(\"qrcode\");\n\n// Criando uma nova instância do client\nconst client = new Client({\n  puppeteer: {\n    // Executa o Chrome em modo headless (sem interface gráfica).\n    headless: true,\n    args: [\n      // Desativa os recursos de sandbox do Chrome. Isso é necessário ao executar\n      // o Puppeteer em certos ambientes, como contêineres Docker.\n      \"--no-sandbox\",\n      // Flag adicional de sandbox para desativar o setuid sandbox.\n      \"--disable-setuid-sandbox\",\n    ],\n  },\n  // Configurando a opção webVersionCache\n  webVersionCache: {\n    // Define o tipo como \"remote\", o que significa que a versão Web do WhatsApp será obtida de um URL remoto\n    type: \"remote\",\n    // Definindo o caminho remoto para a versão Web do WhatsApp\n    remotePath: \"URL PATH HERE\",\n  },\n});\n\n// Este evento é disparado quando o whatsapp-web.js gera um novo QR code\nclient.on(\"qr\", async (qr) => {\n  // Aqui estamos usando a biblioteca qrcode para gerar um QR Code e salvá-lo como um arquivo\n  try {\n    await qrcode.toFile(\"./qrcode.png\", qr);\n    console.log(\"QR Code salvo como qrcode.png\");\n  } catch (err) {\n    console.error(err);\n  }\n});\n\n// Este evento é disparado quando o client está pronto\nclient.on(\"ready\", () => {\n  // Este log será exibido no console quando o client estiver pronto, ou seja, após o QR Code ter sido escaneado com sucesso e a sessão do WhatsApp Web ter sido iniciada\n  console.log(\"Client está pronto!\");\n});\n\n// Este evento é disparado quando uma mensagem é criada\nclient.on(\"message_create\", (msg) => {\n  // Aqui estamos registrando o corpo da mensagem no console\n  console.log(msg.body);\n  // Se a mensagem for \"!ping\"\n  if (msg.body == \"!ping\") {\n    // Responde com \"pong\"\n    msg.reply(\"pong\");\n  }\n});\n\n// Inicializando o client\nclient.initialize();\n```\n\n## Criando o arquivo de configuração do squarecloud\n\n<Card title=\"Saiba mais: como fazer o arquivo de configuração para o Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  O arquivo squarecloud.app é um arquivo de configuração que será usado para configurar sua aplicação; será usado para definir o nome, descrição, versão, arquivo principal, entre outras coisas.\n</Card>\n\n## Configurando o Campo START\n\n<Warning>Apenas use este campo se tiver certeza do que está fazendo.</Warning>\n\nNo arquivo de configuração do Square Cloud, o **START** é opcional e só é necessário se você estiver usando um script personalizado para iniciar o bot. No exemplo fornecido, o **START** não é necessário.\n\n## Enviando o Projeto para o Square Cloud\n\nDepois de preparar seus arquivos de projeto, você pode enviá-los para o Square Cloud e hospedar seu projeto.\n\n<Tabs>\n  <Tab title=\"Envio pelo Painel\">\n    Acesse o [Painel do Square Cloud](https://squarecloud.app/dashboard/upload) e envie seus arquivos de projeto.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Envio via CLI\">\n    <Steps>\n      <Step title=\"Primeiro Passo\">\n        Primeiro, você precisa ter a CLI instalada em seu ambiente. Se ainda não tiver, execute o seguinte comando em seu terminal:\n\n        ```bash\n        npm install -g @squarecloud/cli\n        ```\n\n        Se já tiver, recomendamos atualizá-la. Para isso, execute o seguinte comando em seu terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS e WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo Passo\">\n        Agora, para autenticar e usar outros comandos da CLI, você encontrará sua chave de autorização [aqui](https://squarecloud.app/account) clicando em \"Request API Key\". Após obter sua chave de autorização, execute o seguinte comando:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Terceiro Passo\">\n        Finalmente, para implantar sua aplicação no Square Cloud usando a CLI, você precisa executar o seguinte comando, passando o caminho de seu arquivo zip:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Recursos Adicionais\n\nPara mais informações sobre criação de bots com whatsapp-web.js, visite a [documentação oficial do whatsapp-web.js](https://wwebjs.dev/). Lá, você encontrará guias detalhados, tutoriais e documentação da API para ajudá-lo a aproveitar ao máximo essas bibliotecas.\n\nSe você continuar enfrentando problemas, não hesite em [entrar em contato com nossa equipe de suporte](/company/support).\n"
    }
  },
  "snippets": {
    "_snippets/node-introduction": {
      "path": "_snippets/node-introduction",
      "content": ""
    },
    "_snippets/python-introduction": {
      "path": "_snippets/python-introduction",
      "content": "## 🚀 Introdução\n\n- Antes de começar, certifique-se de ter o Python instalado no seu sistema. Caso ainda não tenha, você pode baixá-lo no [site oficial do Python](https://www.python.org/).\n- Em seguida, você precisará criar uma conta na Square Cloud, o que pode ser feito através da [página de login](https://squarecloud.app/login). Você pode usar seu e-mail para criar sua conta.\n- Por fim, é necessário ter um plano pago ativo na sua conta. Você pode visualizar nossos planos e adquirir aquele que melhor atenda às suas necessidades [aqui](https://squarecloud.app/plans).\n"
    },
    "_snippets/requirements-txt": {
      "path": "_snippets/requirements-txt",
      "content": "#### 📝 Criando o arquivo requirements.txt\n\nPara criar seu arquivo requirements.txt, você precisa listar todas as suas dependências no corpo do arquivo.\nVeja como ficaria ele possuindo as dependências Flask e waitress.\n\n\nflask\nwaitress\n\n\nNote que apenas listando assim, o gerenciador de pacotes instalará a versão mais recente do pacote. \nCaso queira uma versão específica, passe dois sinais de igual e o numero da versão correspondente.\n\nflask==3.1.0\nwaitress==3.0.2\n\n\nSe você utilizar do comando `pip freeze`, serão listados além da suas dependências, as dependências delas.\nExemplificando, se você possui o `discord-py` instalado como dependência, o pip listará o `aiohttp` que é uma dependência da \nbiblioteca discord-py. Isso gera um arquivo mais extenso desnecessáriamente e se utilizado no ambiente global, pode haver \ndependências desnecessárias vindas de outros projetos."
    }
  }
}