{
  "articles": {
    "khZSiGFSAtdV": {
      "id": "khZSiGFSAtdV",
      "path": "managing-teams",
      "metadata": {
        "title": "Gerenciando Suas Equipes na Square Cloud",
        "description": "Aprenda como funciona o sistema de equipes e como gerenciar suas equipes"
      },
      "updated_at": "2025-12-31",
      "content": "Introdução  Antes de começar, você precisará criar uma conta no Square Cloud, o que pode ser feito através da página de cadastro. Você pode usar seu e-mail para criar uma conta.  Por fim, é necessário ter um plano pago ativo em sua conta. Você pode ver nossos planos e adquiri-los aqui.  Criando Seu Time  Para criar seu time, você deve acessar o dashboard, clicar no seu perfil e escolher a opção \"Create a Team\". Por fim, basta escolher o nome do seu time e confirmar. Assim, ele será criado e você poderá acessá-lo novamente selecionando seu perfil e escolhendo o time desejado.  Create Team Image  Adicionando Membros ao Time  Para adicionar um novo membro ao time, siga estes passos:  Primeiro passo Peça ao usuário que deseja adicionar para acessar a página de configurações e acionar o botão request team code. Em seguida, ele deve enviar o código de conta gerado a você. Lembre-se de que esse código só pode ser usado uma vez e expira após 5 minutos.  Segunda passo Acesse o dashboard, navegue até seu perfil e selecione o time ao qual deseja adicionar o usuário. Depois, vá para a aba \"Members\", clique no botão \"Invite a member\" e insira o código de conta do usuário que você deseja convidar. Second Step  Funções  Cada membro do time possui uma função que fornece permissões específicas para ações nas aplicações. A seguir, veja a lista de permissões:  \\<Accordion title=\"Manager\" icon={}> Além das permissões de visualização, pode controlar o ciclo de vida das aplicações iniciando, parando e reiniciando serviços.   \\<Accordion title=\"Maintain\" icon={}> Além das permissões de manager, pode fazer upload, download e editar arquivos e configurações das aplicações.   \\<Accordion title=\"Admin\" icon={}> Possui acesso total, incluindo visualizar métricas, gerenciar aplicações, editar arquivos, acessar dados confidenciais e realizar backups e restaurações do sistema.    Adicionando Aplicações ao Time  Para adicionar aplicações ao seu time, siga estes passos:  Primero Passo Acesse o time ao qual deseja adicionar uma nova aplicação. First Step  Segundo Passo Clique em \"Add new\" e selecione a aplicação que deseja adicionar ao time escolhido. Second Step  Se você continuar enfrentando problemas, não hesite em entrar em contato com nossa equipe de suporte. "
    },
    "RuhBYxAxVJqj": {
      "id": "RuhBYxAxVJqj",
      "path": "deploys/how-to-deploy-flask",
      "metadata": {
        "title": "Como subir uma aplicação Flask",
        "description": "Aprenda como enviar sua aplicação Flask"
      },
      "updated_at": "2025-12-31",
      "content": "💻 Preparando sua aplicação  📖 Dependências  Tenha certeza de listar todas as dependências necessárias de seu projeto em seu arquivo de dependências, seja ele pyproject.toml ou requirements.txt. Deve conter no arquivo o Flask e o webserver usado que, neste artigo usaremos o waitress.  📂 Arquivos necessários  Enquanto prepara seu projeto para envio, certifique-se de incluir, além do seu código, o squarecloud.app/config e o seu arquivo de dependencia previamente preparado. Você pode encontrar mais informações sobre como criar o squarecloud.app/config aqui. Caso envie através de nosso dashboard, não é necessário criar o arquivo de configuração previamente basta compactar o código e o arquivo de dependências.  ⚙️ Configurando o webserver  Para configurar seu webserver waitress, é necessário que modifique seu código para que fique semelhante ao seguinte.  ☁️ Enviando o projeto  Compacte todos os arquivos de código necessários, arquivos de dependências e de configuração. Após isso, anexe o zip na página de upload ou envie utilizando de nossa API. "
    },
    "eAnvDXUoHxtZ": {
      "id": "eAnvDXUoHxtZ",
      "path": "deploys/how-to-deploy-nextjs",
      "metadata": {
        "title": "Como subir uma aplicação Next",
        "description": "Aprenda como enviar sua aplicação Next"
      },
      "updated_at": "2025-05-27",
      "content": "🚀 Introdução  Você precisará criar uma conta na Square Cloud, o que pode ser feito através da página de login. Você pode usar seu e-mail para criar sua conta.  Por fim, é necessário ter um plano pago ativo na sua conta. Você pode visualizar nossos planos e adquirir aquele que melhor atenda às suas necessidades aqui.  💻 Preparando aplicação  🗑️ Arquivos desnecessários  Os seguintes arquivos nunca devem ser enviados junto à sua aplicação next:  node\\_modules;  package-lock.json;  .next;  📖 Dependências  É importante que mantenha todas as dependências necessárias no campo \"dependencies\" do package.json. Em um ambiente de produção, todas as dependencias de desenvolvimento, as \"devDependencies\", não são instaladas.  ⚙️ Configurando o webserver  Para configurar corretamente o webserver next, você precisa informar a porta 80 no comando de \"start\" do next em seu package.json. Confira um exemplo de package.json com os scripts corretos abaixo.  ☁️ Enviando o projeto  Configuração  Em seu arquivo squarecloud.app/config, precisam ser informados os campos START e SUBDOMAIN contendo respectivamente, npm run build && npm run start e o subdomínio desejado.  📦 Envio da aplicação  Na página de upload, anexe o zip que contém todo o necessário e confirme a configuração citada no tópico anterior. E pronto, assim você hospedou sua aplicação next. "
    },
    "siYjfAtAynUS": {
      "id": "siYjfAtAynUS",
      "path": "deploys/how-to-deploy-react",
      "metadata": {
        "title": "Como subir uma aplicação React",
        "description": "Aprenda como enviar sua aplicação React"
      },
      "updated_at": "2025-12-31",
      "content": "🚀 Introdução  Você precisará criar uma conta na Square Cloud, o que pode ser feito através da página de login. Você pode usar seu e-mail para criar sua conta.  Por fim, é necessário ter um plano pago ativo na sua conta. Você pode visualizar nossos planos e adquirir aquele que melhor atenda às suas necessidades aqui.  💻 Preparando aplicação  🗑️ Arquivos desnecessários  Os seguintes arquivos nunca devem ser enviados junto à sua aplicação react:  node\\_modules;  package-lock.json;  📖 Dependências  É importante que mantenha todas as dependências necessárias no campo \"dependencies\" do package.json. Em um ambiente de produção, todas as dependencias de desenvolvimento, as \"devDependencies\", não são instaladas. Neste artigo, usaremos para servir os arquivos de produção a biblioteca \"serve\", portanto é necessário instalar a mesma.  ⚙️ Configurando o webserver  Para configurar corretamente o webserver, você precisa informar a porta 80 no comando de \"start:prod\" do serve em seu package.json. Confira um exemplo de package.json com os scripts corretos abaixo.  ☁️ Enviando o projeto  Configuração  Em seu arquivo squarecloud.app/config, precisam ser informados os campos START e SUBDOMAIN contendo respectivamente, npm run build && npm run start:prod e o subdomínio desejado.  📦 Envio da aplicação  Na página de upload, anexe o zip que contém todo o necessário e confirme a configuração citada no tópico anterior. E pronto, assim você hospedou sua aplicação react. "
    },
    "EXynVFQcvkkg": {
      "id": "EXynVFQcvkkg",
      "path": "deploys/how-to-deploy-vite",
      "metadata": {
        "title": "Como subir uma aplicação Vite",
        "description": "Aprenda como enviar sua aplicação Vite"
      },
      "updated_at": "2025-12-31",
      "content": "🚀 Introdução  Você precisará criar uma conta na Square Cloud, o que pode ser feito através da pagina de login. Você pode usar seu e-mail, Discord ou ambos para criar sua conta.  Por fim, é necessário ter um plano pago ativo na sua conta. Você pode visualizar nossos planos e adquirir aquele que melhor atenda às suas necessidades aqui.  💻 Preparando aplicação  Atualmente existem duas maneiras de se hospedar websites gerenciados pelo vite, uma delas é utilizar do comando de vite preview e a outra é efetuar o build e enviar apenas os arquivos estáticos. As duas formas serão abordadas a seguir.  🗑️ Arquivos desnecessários  À depender do modo de envio, você terá arquivos específicos para enviar. Contudo, de maneira geral, os seguintes arquivos nunca devem ser enviados junto à sua aplicação:  node\\_modules;  package-lock.json.  Envio com build local  Esta forma de envio requer primeiramente realizar o build de sua aplicação vite em seu ambiente local. Para realização de tal tarefa siga o passo a passo.  Abra o terminal na raiz de seu projeto;  Execute o comando npm run build que executará o script build definido no package.json, vite build;  Isto gerará a pasta dist contendo todo seu site em arquivos estáticos.  Entre na pasta dist gerada e renomeie o arquivo html para vite.html;  Compacte todo o conteúdo da pasta dist, sendo o arquivo vite.html e demais arquivos e pastas que tem junto a ele.  Lembrando que a compactação deve ser feita compactando como .zip.  Após feito estes passos, você pode anexar o zip e apenas configurar nome, arquivo principal(vite.html) e marcar a opção \"Publicar na Web\" e informe o subdomínio que deseja usar.  Envio com build no ambiente  Esta forma de envio requer primeiramente que modifique seu arquivo package.json transferindo todas as dependências de desenmvolvimento, \"devdependencies\", para as dependências, \"dependencies\". Esta organização, se deve ao fato de que, por se tratar de um ambiente de produção, não são instaladas nenhuma dependência de desenvolvimento.  Ainda em seu package.json, informe o script de \"preview\" como vite preview --host 0.0.0.0 --port 80. Esta mudança faz com que o webserver vite, seja aberto em todas as interfaces de rede e porta 80(http), possibilitando seu roteamento para a 443(https).  Compacte sua aplicação incluindo todos os arquivos necessários para sua execução, ou seja, não inclua os arquivos citados nos tópicos anteriores. No momento de envio, marque a opção de publicar na web e marque a opção de comando de inicialização, informando respectivamente o subdomínio desejado e os comandos npm run build && npm run preview. "
    },
    "WZKgzoWHvOBK": {
      "id": "WZKgzoWHvOBK",
      "path": "troubleshooting/apps/dependencies/better-sqlite3/binding-file",
      "metadata": {
        "title": "Resolvendo 'Não foi possível localizar o arquivo de vínculos'",
        "description": "Aprenda como resolver o problema 'Não foi possível localizar o arquivo de vínculos' em seu aplicativo."
      },
      "updated_at": "2025-05-30",
      "content": "Quando isso ocorre?  Esse problema acontece quando a biblioteca better-sqlite3 ou uma biblioteca que depende dela, como quick.db, não está atualizada.  Por que isso ocorre?  Esse erro ocorre porque a biblioteca better-sqlite3 não foi atualizada para a versão mais recente. Nas versões 11.x.x e anteriores do better-sqlite3, a biblioteca não era compatível com o Node.js LTS v22.x.x.  Como corrigir  Para corrigir esse problema, você precisa atualizar a biblioteca better-sqlite3 para a versão mais recente. Lembre-se de atualizar também as bibliotecas que dependem do better-sqlite3, como o quick.db.  Verificar as últimas versões das bibliotecas:  npm better-sqlite3  npm quick.db  Atualizar o better-sqlite3 no seu package.json  Depois de verificar a versão mais recente da biblioteca, você pode atualizá-la no seu package.json. Por exemplo, se a versão atual for 11.10.0, você pode usar o seguinte:  Remover arquivos para uma instalação limpa  Após atualizar o seu package.json, você deve remover os arquivos e pastas: node\\_modules, package-lock.json e a pasta .npm.  Reiniciar sua aplicação  Por fim, simplesmente reinicie sua aplicação clicando no botão azul. Se você seguiu todos os passos corretamente, sua aplicação não deverá mais encontrar esse erro.  Se você continuar enfrentando problemas, não hesite em entrar em contato com nossa equipe de suporte. "
    }
  },
  "snippets": [
    {
      "path": "_snippets/node-introduction",
      "availableLanguages": [
        "pt-br"
      ]
    },
    {
      "path": "_snippets/python-introduction",
      "availableLanguages": [
        "pt-br"
      ]
    },
    {
      "path": "_snippets/requirements-txt",
      "availableLanguages": [
        "en",
        "es",
        "pt-br",
        "zh"
      ]
    },
    {
      "path": "_snippets/requirements-txt",
      "availableLanguages": [
        "en",
        "es",
        "pt-br",
        "zh"
      ]
    },
    {
      "path": "_snippets/requirements-txt",
      "availableLanguages": [
        "en",
        "es",
        "pt-br",
        "zh"
      ]
    },
    {
      "path": "_snippets/requirements-txt",
      "availableLanguages": [
        "en",
        "es",
        "pt-br",
        "zh"
      ]
    }
  ]
}