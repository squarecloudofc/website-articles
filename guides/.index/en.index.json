{
  "articles": {
    "UWMXxDJsEBZK": {
      "id": "UWMXxDJsEBZK",
      "path": "application/automatic-file-deletion",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Automatic Deletion of Files When Deploying an Application to Square Cloud",
        "description": "Learn about the files that are automatically deleted when deploying an application to Square Cloud.",
        "slug": "automatic-deletion-of-files-when-deploying-an-application-to-square-cloud"
      },
      "created_at": "2025-05-30T20:46:20.000Z",
      "updated_at": "2025-05-30T20:46:20.000Z",
      "content": "When deploying your application to Square Cloud, you might encounter a scenario where certain files are automatically deleted during the deployment process. Understanding the files that are subject to automatic deletion is crucial for ensuring a smooth deployment experience. Here, we provide a list of files that are commonly deleted during deployment and need to be excluded from your deployment package.\n\n## List of Files to Exclude:\n\n- `.cache`\n- `.config`\n- `.composer`\n- `.dockerenv`\n- `.git`\n- `.husky`\n- `.logs`\n- `.local`\n- `.npm`\n- `.next`\n- `.pki`\n- `.replit`\n- `.upm`\n- `.vscode`\n- `__pycache__`\n- `Cargo.lock`\n- `.npmrc`\n- `node_modules`\n- `package-lock.json`\n- `replit.nix`\n- `replit_zip_error_log.txt`\n- `target`\n- `yarn.lock`\n- `.venv`\n- `.breakpoints`\n- `pycache`\n\nThese files are typically related to development environments, build configurations, and dependencies. Square Cloud may automatically remove them during the deployment process to optimize the application's performance and reduce unnecessary data transfer.\n\nIt's important to note that certain development tools and platforms generate these files for local development purposes. However, they are not essential for the application to run in a production environment. Therefore, excluding them during deployment ensures a more efficient and streamlined application deployment process.\n\nTo prevent these files from being deleted during deployment, make sure to exclude them from your deployment package or configure your deployment process accordingly. Understanding and managing these files will help you deploy your application smoothly on Square Cloud while maintaining a clean and efficient deployment package.\n\nFor more information on deploying applications on Square Cloud and managing whitelists, refer to the [Square Cloud documentation](https://squarecloud.app/docs).\n"
    },
    "ZGnnnKgeEFUT": {
      "id": "ZGnnnKgeEFUT",
      "path": "application/autorestart",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "How to use Auto Restart in Square Cloud",
        "description": "Learn how to use Auto Restart in Square Cloud to automatically restart your application in case it crashes.",
        "slug": "how-to-use-auto-restart-in-square-cloud"
      },
      "created_at": "2025-05-30T21:17:05.000Z",
      "updated_at": "2025-05-30T21:17:05.000Z",
      "content": "A **Square Cloud exclusive technology**, Auto Restart is a powerful feature in Square Cloud that allows your application to **automatically restart in case it crashes**. This ensures that **your app** remains **accessible and functional** even in the **event of unexpected failures**.\n\n## Enabling Auto Restart\n\nWith Auto Restart, follow these steps to enable it in your application's configuration file:\n\n### 1. Config File\n\nCreate or edit your `squarecloud.app` or `squarecloud.config` file. See how to do it [here](...).\r\nThe squarecloud.app file is a configuration file that will be used to configure your application;\r\nit will be used to define the name, description, version, main file, among other things.\n\n### 2. Locate Parameters\n\nLocate the `AUTORESTART` parameter in the configuration file. Or add it if it doesn't exist.\n\n### 3. Set the value\n\nSet the value of `AUTORESTART` to `true`.\n\nHere's an example of how to enable Auto Restart in your configuration file:\n\n```systemd squarecloud.app OR squarecloud.config\nAUTORESTART=true\n```\n\n## How Auto Restart Works\n\nAuto Restart is a proactive feature that monitors the health of your application. If your application crashes or becomes unresponsive, Auto Restart takes action to get it back up and running.\n\n### 1. Application goes down\n\nWhen your application crashes or becomes unresponsive, Auto Restart detects the issue if AUTORESTART is enabled in your configuration file.\n\n### 2. Application Uptime Verification\n\nIf the **application uptime is > 60 seconds**, will proceed to next step.\n\n### 3. Application Exit Status Verification\n\nIf the **application exit status is 1**, will proceed to next step.\n\n### 4. Application Recent Restart Verification\">\n\nIf the **application didn't restart in the last 60 minutes**, will proceed to next step.\n\n### 5. Application Exception Verification\n\nIf the application logs contain any of the excluded errors, Auto Restart will not restart the application.\r\nExamples of excluded errors include:\n\n**SyntaxError**\n\n```json\nSyntaxError: Unexpected token 'X'..\r\nSyntaxError: Unexpected identifier 'X'..\r\nSyntaxError: Invalid or unexpected token 'X'..\n```\n\n**Version didn't find**\n\n```json\nnpm ERR! notarget No matching version found for\r\nERROR: Could not find a version that satisfies the requirement\r\nAnd variations of this error.\n```\n\n**Module not found**\n\n```json\nError: Cannot find module 'X'\r\nModule not found: Can't resolve 'X' in 'Y'\r\nAnd variations of this error.\n```\n\n**Invalid dependency file**\n\n```json\nERROR: Invalid requirement: 'X'\r\nERROR: Could not open requirements file: 'X'\r\nnpm ERR! code EJSONPARSE... npm ERR! Failed to parse json\r\nAnd variations of this error.\n```\n\nIf the application logs contain any of these errors, Auto Restart will not restart the application.\n\n### 6. Application Restart\n\nAUTORESTART automatically restarts your application to bring it back. 😉\n\n<Alert intent=\"info\" title=\"Cooldown Between Restarts\" description=\"Cooldown between restarts is 60 minutes.\" />\n\n## Best Practices\n\nHere are some best practices to make the most of Auto Restart:\n\n- Regularly review your application's logs to understand the reasons for any crashes or restarts. This can help you identify and address underlying issues.\n- Keep your MAIN file and memory allocation parameters up-to-date to ensure optimal performance and resource usage.\n\n## Conclusion\n\nAuto Restart in Square Cloud is a valuable feature that enhances the reliability of your application. By automatically handling crashes and unresponsiveness, it helps maintain a seamless user experience. Ensure that you have a plan with Auto Restart enabled and configure it in your `squarecloud.app` or `squarecloud.config` file to make the most of this feature.\n"
    },
    "SHMdYiGrXgNM": {
      "id": "SHMdYiGrXgNM",
      "path": "application/debugging",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "How to debug your Application",
        "description": "Learn how to debug your application using discord.py and discord.js.",
        "slug": "how-to-debug-your-application"
      },
      "created_at": "2025-05-30T20:46:20.000Z",
      "updated_at": "2025-05-30T20:46:20.000Z",
      "content": "## Debugging in [**discord.js**](https://old.discordjs.dev/#/docs/discord.js/14.14.1/class/Client?scrollTo=e-debug)\n\nWith discord.js, you can utilize the \"debug\" and \"error\" events for debugging. Here's an example:\n\n```js\n// The client listens for a 'debug' event\r\nclient.on('debug', (info) => {\r\n    // Logs the debug info to the console\r\n    console.log(`Debug Info: ${info}`);\r\n});\r\n\r\n// The client listens for an 'error' event\r\nclient.on('error', (error) => {\r\n    // Logs the error message to the console\r\n    console.error(`Encountered an Error: ${error.message}`);\r\n});\n```\n\nIn this code, we use the 'debug' event; it is triggered to provide general debugging information, and the debug messages are logged to the console. Similarly, when the 'error' event is triggered, the error message is logged to the console.\n\n## Debugging in [**discord.py**](https://discordpy.readthedocs.io/en/stable/logging.html?highlight=debug)\n\nWith discord.py, you can use the logging module for debugging. Here's an example:\n\n```py\nimport logging\r\nimport logging.handlers\r\n\r\n# Sets up the logger for discord\r\nlogger = logging.getLogger('discord')\r\nlogger.setLevel(logging.DEBUG)\r\nlogging.getLogger('discord.http').setLevel(logging.INFO)\r\n\r\n# Sets up the handler for the logger\r\nhandler = logging.StreamHandler()\r\ndt_fmt = '%Y-%m-%d %H:%M:%S'\r\nformatter = logging.Formatter('[{asctime}] [{levelname:<8}] {name}: {message}', dt_fmt, style='{')\r\nhandler.setFormatter(formatter)\r\nlogger.addHandler(handler)\r\n\r\n# Runs the bot\r\nclient.run(\"your token here\", log_handler=None)\n```\n\nIn this code, all debugging information and errors are logged to the console.\n"
    },
    "EXynVFQcvkkg": {
      "id": "EXynVFQcvkkg",
      "path": "deploys/how-to-deploy-vite",
      "author": {
        "name": "Square Cloud"
      },
      "created_at": "2025-05-30T00:14:55.000Z",
      "updated_at": "2025-05-30T16:46:52.000Z",
      "content": "import { pages } from \"../_snippets/pages.mdx\"\n\n## 🚀 Introduction\n\n- You will need to create an account on Square Cloud, which can be done through the [login page](https://squarecloud.app/signin). You can use your email, Discord, or both to create your account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase the one that best suits your needs [here](https://squarecloud.app/pricing).\n\n## 💻 Preparing the Application\n\nCurrently, there are two ways to host websites managed by Vite: using the `vite preview` command or performing a local build and uploading only the static files. Both methods will be explained below.\n\n### 🗑️ Unnecessary Files\n\nDepending on the upload method, you'll have specific files to include. However, in general, the following files should never be uploaded with your application:\n\n- `node_modules`;\n- `package-lock.json`.\n\n### Upload with Local Build\n\nThis method requires first building your Vite application locally. To do this:\n\n- Open the terminal in your project root;\n- Run the command `npm run build`, which will execute the `build` script defined in your `package.json` (usually `vite build`);\n\nThis will generate the `dist` folder containing your entire site as static files.\n\n- Go into the generated `dist` folder and rename the HTML file to `vite.html`;\n- Compress all contents of the `dist` folder, including `vite.html` and all other files and folders.\n\nThe compression should be done in `.zip` format.\n\nAfter completing these steps, you can upload the ZIP file, set the name, define the main file (`vite.html`), check the \"Publish on Web\" option, and specify the desired subdomain.\n\n### Upload with Build in the Environment\n\nThis method requires you to first modify your `package.json`, moving all development dependencies (`devDependencies`) to regular dependencies (`dependencies`). This is because, in production environments, development dependencies are not installed.\n\nIn your `package.json`, also set the \"preview\" script as `vite preview --host 0.0.0.0 --port 80`.\r\nThis ensures that the Vite web server is accessible on all network interfaces using port 80 (HTTP), allowing routing to port 443 (HTTPS).\n\nCompress your application, including all necessary files for execution, except the files previously mentioned as unnecessary.\n\nDuring upload, select \"Publish on Web\" and enable the \"Startup Command\" option, entering the desired subdomain and the following command `npm run build && npm run preview`\n"
    },
    "ycAMJkhidJBd": {
      "id": "ycAMJkhidJBd",
      "path": "troubleshooting/apps/module-not-found",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Solving MODULE_NOT_FOUND",
        "description": "Learn how to resolve the MODULE_NOT_FOUND issue in your application.",
        "slug": "solving-modulenotfound"
      },
      "created_at": "2025-05-30T20:03:16.000Z",
      "updated_at": "2025-05-30T20:03:16.000Z",
      "content": "## When does it occur?\n\nThis error occurs when your application tries to use a library that is not installed in the environment.\n\n```bash javascript\nError: Cannot find module 'discord.js'\n```\n\n```bash python\nModuleNotFoundError: No module named 'discord.py'\n```\n\n## Why does it occur?\n\nThis can happen when you try to use a library that is not installed by default in the environment. For example, the `discord.js` library is not installed by default in the JavaScript environment.\n\n## How to fix\n\nTo fix this, you need to add the missing library to your project's dependency files. These files list the libraries that will be installed in the environment. In the case of Python, this file is called `requirements.txt`, and for JavaScript, it is called `package.json`.\n\nHere is an example of the content of these files after adding the missing libraries:\n\n```json package.json \n{\r\n  \"name\": \"my-app\",\r\n  \"version\": \"1.0.0\",\r\n  \"dependencies\": {\r\n    \"discord.js\": \"14.14.1\",\r\n    // other dependencies...\r\n  }\r\n}\n```\n\n```txt requirements.txt\ndiscord.py\r\n# other dependencies...\n```\n\n### Reboot Your Application\n\nAfter adding the necessary libraries to your project's dependency files, you should reboot your application. This allows your environment to recognize and install the newly added libraries.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](https://squarecloud.app/sac).\n"
    },
    "HnApBohkKdCD": {
      "id": "HnApBohkKdCD",
      "path": "troubleshooting/resources/cpu",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Solving LACK_OF_CPU",
        "description": "Learn how to resolve the LACK_OF_CPU issue in your application.",
        "slug": "solving-lackofcpu"
      },
      "created_at": "2025-05-30T20:03:16.000Z",
      "updated_at": "2025-05-30T20:03:16.000Z",
      "content": "## When does it occur?\n\nThis issue occurs when your application is using more CPU than is available.\n\n```bash\n[SQUARE-SHIELD] LACK_OF_CPU\n```\n\n## Why does it occur?\n\nThis issue occurs when your application is using more CPU than is available. This can happen when your application is under heavy load, or when your application is not optimized to use less CPU.\n\n## How to fix\n\nThe CPU allocated to your application is determined by your current plan. To address this, consider upgrading to a higher plan on the [plans page](https://squarecloud.app/plans). Alternatively, optimize your application to reduce CPU usage.\n\n### Resubmitting your application\n\nAfter upgrading your plan, it's important to remove your application and resubmit it to reflect the updated CPU allocation.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](https://squarecloud.app/sac).\n"
    },
    "JRmKSJYAPonx": {
      "id": "JRmKSJYAPonx",
      "path": "troubleshooting/apps/token",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Solving TOKEN_INVALID",
        "description": "Learn how to resolve the TOKEN_INVALID code error and ensure smooth communication with the Discord API.",
        "slug": "solving-tokeninvalid"
      },
      "created_at": "2025-05-30T20:03:16.000Z",
      "updated_at": "2025-05-30T20:03:16.000Z",
      "content": "## When does it occur?\n\nThe authentication token for your Discord bot was not found or appears to be invalid. This might happen if the token is regenerated, revoked, or the bot's access to the server is restricted.\n\n```bash discord.js\nError [TOKEN_INVALID]: An invalid token was provided.\n```\n\n```bash discord.py\nLoginFailure: Improper token has been passed.\n```\n\n## Why does it occur?\n\nYou will encounter this error when your application attempts to authenticate with the Discord API using an invalid or outdated bot token.\n\n## How to fix\n\nEnsure that the token provided when creating the Discord.js client is accurate and up-to-date. If you suspect the token might be invalid, regenerate it on the Discord Developer Portal.\n\n### Regenerate the Token\n\nIf you have confirmed that the current token is invalid or compromised, generate a new one on the [Discord Developer Portal](https://discord.com/developers/applications).\n\n### Update the Token in Your Code\n\nIf you are using a `.env` file to store the token, make sure to update the file with the new token.\n\nGenerally, the token is stored in `.env` or `config,json` files. If you are using a different method to store the token, update the code accordingly.\n\n### Keep the library up to date\n\nEnsure you are using the latest version of your library. Developers regularly update the library to fix bugs and address compatibility issues.\n\n```bash Update discord.js\nnpm install discord.js@latest\r\n# or update in your package.json\n```\n\n```bash Update discord.py\npip install discord.py\r\n# or update in your requirements.txt\n```\n\n### Reboot Your Application\n\nAfter implementing the changes, restart your application to apply the updates. This ensures that the new token and any code modifications take effect.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](https://squarecloud.app/sac).\n"
    },
    "BXIKsiTzqDSh": {
      "id": "BXIKsiTzqDSh",
      "path": "troubleshooting/apps/dependencies/invalid-file",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Solving INVALID_DEPENDENCY",
        "description": "Learn how to resolve the Solving INVALID_DEPENDENCY issue in your application.",
        "slug": "solving-invaliddependency"
      },
      "created_at": "2025-05-30T20:03:16.000Z",
      "updated_at": "2025-05-30T20:03:16.000Z",
      "content": "## When does it occur?\n\nThis issue occurs when your dependency file could not be located in the root of your application.\n\n## Why does it occur?\n\nThis issue occurs when your dependency file could not be located in the root of your application. This can happen when your dependency file does not exist or its nominated with an extra `.txt`.\n\n## How to fix\n\n### For Node.js (package.json)\n\n1. **Navigate to the root directory of your project:**\r\n   Ensure that you are in the main directory of your application.\n\n2. **Check for the presence of `package.json`:**\r\n   Verify whether the `package.json` file exists in the root directory. If it is not present, create one using the following command:\n   ```bash\n   npm init -y\n   ```\n   This command initializes a default `package.json` file.\n\n3. **Ensure correct naming:**\r\n   Confirm that the file is named exactly as `package.json` and does not have any additional extensions (e.g., `package.json.txt`). If there are any discrepancies, rename the file accordingly.\n\n### For Python (requirements.txt)\n\n1. **Navigate to the root directory of your project:**\r\n   Make sure you are in the main directory of your application.\n\n2. **Check for the presence of `requirements.txt`:**\r\n   Confirm whether the `requirements.txt` file exists in the root directory. If it is missing, create one.\n\n3. **Ensure correct naming:**\r\n   Verify that the file is named exactly as `requirements.txt` without any additional extensions (e.g., `requirements.txt.txt`). If the name is incorrect, rename the file accordingly.\n\n4. **Add dependencies to the file:**\r\n   Open the `requirements.txt` file and add the necessary dependencies for your Python project. For example:\n\n```plaintext requirements.txt\ndiscord.py\n```\n\n### Additional Tips:\n\n- **Double-check file extensions:**\r\n  Ensure that the file extensions are correct (e.g., `.json` for Node.js, `.txt` for Python). Incorrect extensions might lead to the `INVALID_DEPENDENCY` error.\n\n- **Review documentation and guides:**\r\n  Consult the documentation for your specific programming language ([Node.js]()/[Python](...)).\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](https://squarecloud.app/sac).\n"
    },
    "TURSSLUVhXJQ": {
      "id": "TURSSLUVhXJQ",
      "path": "troubleshooting/apps/lavalink/connection",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Solving Lavalink Closed Abnormally issue",
        "description": "Due to recent Lavalink updates you may come across the following error: Lavalink Closed Abnormally. This article will help you solve this issue.",
        "slug": "solving-lavalink-closed-abnormally-issue"
      },
      "created_at": "2025-05-30T20:03:16.000Z",
      "updated_at": "2025-05-30T20:03:16.000Z",
      "content": "title: \"Solving Lavalink Closed Abnormally issue\"\r\ndescription: \"Due to recent Lavalink updates you may come across the following error: Lavalink Closed Abnormally. This article will help you solve this issue.\"\n\n## When does it occur?\n\nWhen you are trying to connect your Lavalink server to your app hosted on Square Cloud, you may come across the following error:\n\n```\nError: Unexpected server response: 400\r\nError: WebSocket closed abnormally with code 1006.\n```\n\n## Why does it occur?\n\nYou will receive this error if you are using a Lavalink version that is not compatible with the library you are using.\r\nFor example, if you are using the Lavalink version 4.0.0, you will receive this error if you are using the Lavalink client version 3, as the Lavalink version 4 is entirely REST.\n\n## How to fix\n\nTo fix this error, you will need to update your Lavalink client to the latest version. Or use a Lavalink version that is compatible with your Lavalink client.\n\n### Bonus Tips:\n\n- Remember to open your Lavalink server in port 80.\n- Connect in your Lavalink server using port 443 and option `secure: true`.\n\nCongratulations! You have successfully solved the Lavalink Closed Abnormally issue. Now you can connect your Lavalink to your app hosted on Square Cloud.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](https://squarecloud.app/sac).\n"
    },
    "dHIgwyjxOfxd": {
      "id": "dHIgwyjxOfxd",
      "path": "troubleshooting/resources/network/requests",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Solving ABUSE_REQUESTS",
        "description": "Learn how to address the ABUSE_REQUESTS error, caused by excessive requests to Discord and/or Amino APIs, and ensure your application runs smoothly.",
        "slug": "solving-abuserequests"
      },
      "created_at": "2025-05-30T20:03:16.000Z",
      "updated_at": "2025-05-30T20:03:16.000Z",
      "content": "## When does it occur?\n\nThe ABUSE\\_REQUESTS error occurs when your application is shut down due to a high volume of requests made to the Discord and/or Amino APIs. This may result from inefficient coding practices, lack of caching mechanisms, or surpassing the allocated request limits.\n\n```bash\n[SQUARE-SHIELD] ABUSE_REQUESTS\n```\n\n## Why does it occur?\n\nThis error typically arises when your application exceeds the permissible limits for making requests to the Discord and/or Amino APIs. It could be a consequence of a rapid increase in user activity or inefficient coding that generates an excessive number of API calls.\n\n## How to fix\n\nAddressing the ABUSE\\_REQUESTS error involves monitoring and optimizing the sections of your code responsible for API requests, implementing effective caching mechanisms, and, if necessary, requesting an increase in your API request limit through the official support channels.\n\n### Monitor and Optimize Your Code\n\n- Identify Problematic Code: Use logging tools or profiling to pinpoint sections of your code that generate a large number of API requests.\n- Optimize API Calls: Review and optimize the code responsible for API calls. Minimize unnecessary requests and ensure that each call is essential for your application's functionality.\n\n### Implement Caching Mechanisms\n\n- Use Local Caching: Store frequently requested data locally to avoid unnecessary API calls. This reduces the load on the servers and improves response times.\n- Set Expiry Times: Implement caching with expiration times to ensure that your application fetches fresh data when necessary while minimizing the number of API requests.\n\n### Request an Increase in Request Limit\n\nIf your application genuinely requires a higher API request limit, consider reaching out to the Discord and/or Amino support channels to request an increase. Provide justifications for the increased limit and any measures you've taken to optimize your code.\n\n### Keep Your Application Updated\n\nEnsure your application is using the latest version of any libraries or SDKs interacting with the APIs. Regularly check for updates, as developers often release new versions to address performance issues and improve efficiency.\n\n```bash Update discord.js\nnpm install discord.js@latest\r\n# or update in your package.json\n```\n\n```bash Update discord.py\npip install discord.py\r\n# or update in your requirements.txt\n```\n\n### Test and Restart Your Application\n\nAfter making the necessary changes, thoroughly test your application to ensure that the modifications effectively reduce the number of API requests. Additionally, restart your application to apply the updates and monitor its performance.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](https://squarecloud.app/sac).\n"
    },
    "WZKgzoWHvOBK": {
      "id": "WZKgzoWHvOBK",
      "path": "troubleshooting/apps/dependencies/better-sqlite3/binding-file",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Solving 'Could not locate the bindings file'",
        "description": "Learn how to resolve the 'Could not locate the bindings file' issue in your application.",
        "slug": "solving-could-not-locate-the-bindings-file"
      },
      "created_at": "2025-05-30T20:03:16.000Z",
      "updated_at": "2025-05-31T02:31:10.000Z",
      "content": "## When does it occur?\n\nThis issue happens when the `better-sqlite3` library or a library that depends on it, like `quick.db`, is not updated.\n\n```bash\nError: Could not locate the bindings file. Tried:\r\n → /application/node_modules/better-sqlite3/build/better_sqlite3.node\r\n [...]\n```\n\n## Why does it occur?\n\nThis error occurs because the `better-sqlite3` library has not been updated to the latest version. In `better-sqlite3` **11.x.x and earlier**, the library **was not support Node.js LTS v22**.x.x.\n\n## How to fix\n\nTo fix this issue, you need to update the `better-sqlite3` library to the latest version. Remember to update libraries that depend on `better-sqlite3`, like `quick.db`.\n\n### Check the latest versions of the libraries:\n\n- [npm better-sqlite3](https://www.npmjs.com/package/better-sqlite3)\n- [npm quick.db](https://www.npmjs.com/package/quick.db)\n\n### Update the `better-sqlite3` in your `package.json`\n\nAfter checking the latest version of the library, you can update it in your `package.json`. For example, if the current version is 11.10.0, you can use the following:\n\n```json Update manually in your package.json\n\"better-sqlite3\": \"^11.10.0\",\r\n\"quick.db\": \"^9.1.7\" // or any other library that depends on better-sqlite3\n```\n\n```bash Update using the terminal\nnpm install better-sqlite3@latest\n```\n\n### Removing files for a clean installation\n\nAfter updating your `package.json`, you should remove the files and folders: `node_modules`, `package-lock.json`, and the `.npm` folder.\n\n### Reboot Your Application\n\nIn conclusion, simply restart your application by clicking on the blue button. If you have followed all the steps correctly, your application should no longer encounter this error.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](https://squarecloud.app/sac).\n"
    }
  },
  "snippets": {
    "_snippets/requirements-txt": {
      "path": "_snippets/requirements-txt",
      "content": "#### 📝 Creating the requirements.txt File\r\n\r\nTo create your requirements.txt file, you need to list all your dependencies inside the file.\r\nHere’s how it would look with the Flask and waitress dependencies.\r\n\r\n```txt\r\nflask\r\nwaitress\r\n```\r\n\r\nNote that by listing this way, the package manager will install the latest version of each package.\r\nIf you want a specific version, use double equals followed by the corresponding version number.\r\n\r\n```txt\r\nflask==3.1.0\r\nwaitress==3.0.2\r\n```\r\n\r\nIf you use the pip freeze command, it will list not only your dependencies but also their dependencies.\r\nFor example, if you have discord-py installed, pip will also list aiohttp, which is a dependency of the\r\ndiscord-py library. This results in a larger file than necessary and, if used in the global environment, it may\r\ninclude unnecessary dependencies from other projects."
    }
  }
}