{
  "articles": {
    "VOzKxc4yeZuD": {
      "id": "VOzKxc4yeZuD",
      "path": "managing-teams",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Managing Your Teams on Square Cloud",
        "description": "Learn how the team system works and how to manage your teams",
        "slug": "managing-your-teams-on-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Introduction\n\n- Before you start, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have a paid plan active on your account. You can view our plans and purchase one [here](https://squarecloud.app/pricing).\n\n## Creating Your Team\n\nTo create your team, you should go to the [dashboard](https://squarecloud.app/dashboard), click on your profile and choose the \"Create a Team\" option. Finally, just choose the name of your team and confirm. Thus, it will be created and you can access it by selecting your profile again and choosing the desired team.\n\n<Frame>\n  <img src=\"/images/articles/teams/create-team.png\" style={{ borderRadius: \"0.2rem\" }} />\n</Frame>\n\n## Adding Team Members\n\nTo add a new member to the team, follow these steps:\n\n<Steps>\n  <Step title=\"First Step\" icon=\"check\">\n    Ask the user you want to add to access the [config](https://squarecloud.app/account) page and trigger the `request team code` button. They should then send you the generated account code. Remember that this code can only be used once and expires after **5 minutes**.\n  </Step>\n\n  <Step title=\"Second Step\" icon=\"star\">\n    Access the [dashboard](https://squarecloud.app/dashboard), navigate to your profile, and select the team where you want to add the user. Then, go to the \"Members\" tab, click on the \"Invite a member\" button, and enter the user's account code you wish to invite.\n\n    <Frame>\n      <img src=\"/images/articles/teams/add-member.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Step>\n</Steps>\n\n<Warning>Only share your account code with trusted individuals.</Warning>\n\n### Roles\n\nEach member in the team has a certain role that provides specific permissions to be performed on the applications. Below you can see a list of permissions:\n\n<AccordionGroup>\n  <Accordion title=\"View\" icon=\"eye\">\n    Can view panels, metrics, logs and system alerts to monitor the overall integrity and performance.\n  </Accordion>\n\n  <Accordion title=\"Manager\" icon=\"user-tie\">\n    In addition to viewing permissions, you can control the lifecycle of applications by starting, stopping, and restarting services.\n  </Accordion>\n\n  <Accordion title=\"Maintain\" icon=\"wrench\">\n    Beyond manager permissions, you can upload, download, and edit files and application settings.\n  </Accordion>\n\n  <Accordion title=\"Admin\" icon=\"user-shield\">\n    Has full access, including viewing metrics, managing applications, editing files, accessing confidential data, and performing system backups and restores.\n  </Accordion>\n</AccordionGroup>\n\n<Note>\n  Only the Admin role can view files such as `.env` `.env.production` and configuration file (`squarecloud.app/.config`)\n</Note>\n\n## Adding Applications to the Team\n\nTo add applications to your team, follow these steps:\n\n<Steps>\n  <Step title=\"First Step\" icon=\"check\">\n    Access the team to which you want to add a new application.\n\n    <Frame>\n      <img src=\"/images/articles/teams/team.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Step>\n\n  <Step title=\"Second Step\" icon=\"star\">\n    Click on \"Add new\" and select the application you want to add to the chosen team.\n\n    <Frame>\n      <img src=\"/images/articles/teams/add-app.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Step>\n</Steps>\n\n<Warning>Only the team owner can add applications.</Warning>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "YDjmh3kfN3Aq": {
      "id": "YDjmh3kfN3Aq",
      "path": "selenium-application",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Hosting a Selenium on Square Cloud",
        "description": "This article guides you to automate web navigation using Selenium and Chromium on Square Cloud.",
        "slug": "hosting-a-selenium-on-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Creating a New Selenium Script\n\n- Before you start, make sure you have **Python** and **pip** installed on your system. If you don't have them yet, you can download them from the [official Python website](https://www.python.org/) and the [official Pip website](https://pypi.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\nWith Python and pip installed, you can create a new Selenium script. First, install Selenium using pip:\n\n```bash\npip install selenium\n```\n\nNext, create a new Python file (for example, `main.py`) and add the following code to create a basic Selenium script:\n\n```python\nimport time\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nfrom selenium.webdriver.chrome.service import Service\n\n# Define options for Chromium\noptions = Options()\noptions.add_argument(\"--headless\")  # Run in the background. This means that the browser runs without opening a browser window.\noptions.add_argument(\"--no-sandbox\")  # Required when you are running as root. This allows Selenium to start in a user-unsupported environment.\noptions.add_argument(\"--disable-dev-shm-usage\")  # This overcomes limitations when dealing with elements on large pages.\n\n# Initialize the driver\nservice = Service('/usr/bin/chromedriver') # On Square Cloud, the path to the Chromium driver is '/usr/bin/chromedriver'\ndriver = webdriver.Chrome(service=service, options=options)\n\n# Set the window size to larger dimensions\ndriver.set_window_size(1920, 1080)  # Adjust these values as needed\n\n# Open the web page\ndriver.get('https://www.google.com')\n\n# Loop to take a print of the page every 1 minute\nwhile True:\n    driver.save_screenshot('page.png')\n    print(\"Page print saved.\")\n    time.sleep(60)  # Pause for 60 seconds\n```\n\n## Managing Dependencies with the requirements.txt file\n\nThe `requirements.txt` file is a file that lists all the external libraries needed for your project. You should list all the libraries that your project will use, excluding native libraries like `random` and `datetime`. This file should be included when submitting your application to Square Cloud.\n\n```txt requirements.txt\nselenium\n```\n\n## Chromium path\n\nIn the example provided above, it's not necessary to explicitly define the Chromium path because the Selenium WebDriver can automatically find the browser if it's installed in a standard system location. The ChromeDriver, specified with `Service('/usr/bin/chromedriver')`, knows where to look for the Chromium/Chrome executable.\n\nIn Square Cloud, Chromium is installed in `/usr/bin/chromium`, which is standard. Therefore, the Selenium WebDriver can automatically locate it through the specified ChromeDriver. Thus, there's no need to explicitly specify the Chromium path in the code, unless there are specific reasons to do so, such as custom installations or different environment configurations.\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal: `npm install -g @squarecloud/cli` If you already have it, we\n        recommend updating it. To do this, run the following command in your\n        terminal:\n\n        ```bash\n        squarecloud update\n        ```\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Additional Resources\n\nFor more information about Selenium and its tools, visit the [official Selenium documentation](https://www.selenium.dev/pt-br/documentation/webdriver/getting_started/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most out of Selenium.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "4imtR0fS09d7": {
      "id": "4imtR0fS09d7",
      "path": "timezone-change-guide",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "How to Change Timezone",
        "description": "Learn how to change the timezone to suit your application's needs.",
        "slug": "how-to-change-timezone"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Introduction\n\nThe Square Cloud servers are located in Tampa, Florida, USA. By default, the timezone is set according to this location. However, in this article, we will teach you how you can customize the timezone of your application to whichever you desire.\n\n## Getting Started\n\nThe following sections provide code examples for both Javascript and Python:\n\n<Tabs>\n  <Tab title=\"Javascript\">\n    <Tabs>\n      <Tab title=\"Native\">\n        ```javascript index.js\n        // Create a Date object\n        const date = new Date();\n        // Convert the date to a string using a specific timezone\n        const dateString = date.toLocaleString(\"pt-BR\", {\n          timeZone: \"America/Sao_Paulo\",\n        });\n        console.log(dateString); // Outputs the date and time in the \"America/Sao_Paulo\" timezone\n        ```\n      </Tab>\n\n      <Tab title=\"Moment\">\n        ```javascript index.js\n        const moment = require('moment');\n        require('moment-timezone');\n\n        // Create a Moment.js object with the current date and time\n        const date = moment();\n\n        // Change the timezone to \"America/Sao_Paulo\"\n        const time = date.tz('America/Sao_Paulo');\n\n        // Define the format string for date and time representation\n        // YYYY: Represents the year with four digits (e.g., 2022)\n        // MM: Represents the month as a zero-padded decimal number (e.g., 01 for January, 02 for February, ..., 12 for December)\n        // DD: Represents the day of the month as a zero-padded decimal number (e.g., 01, 02, ..., 31)\n        // HH: Represents the hour as a zero-padded decimal number in 24-hour clock format (e.g., 00 for midnight, 13 for 1 PM, ..., 23 for 11 PM)\n        // mm: Represents the minute as a zero-padded decimal number (e.g., 00, 01, ..., 59)\n        // ss: Represents the second as a zero-padded decimal number (e.g., 00, 01, ..., 59)\n        const formattedTime = time.format('YYYY-DD-MM HH:mm:ss');\n        console.log(formattedTime); // Outputs the date and time in the \"America/Sao_Paulo\" timezone\n        ```\n      </Tab>\n    </Tabs>\n  </Tab>\n\n  <Tab title=\"Python\">\n    <Tabs>\n      <Tab title=\"Native\">\n        ```python main.py\n        from datetime import datetime, timedelta\n\n        # Create a datetime object\n        now = datetime.now()\n\n        # Create a timedelta object to represent the timezone difference\n        time_difference = timedelta(hours=-3)  # The timezone difference between UTC and \"America/Sao_Paulo\" is -3 hours\n\n        # Change the timezone\n        time = now + time_difference\n\n        # Define the format string for date and time representation\n        # %Y: Represents the year with four digits (e.g., 2022)\n        # %d: Represents the day of the month as a zero-padded decimal number (e.g., 01, 02, ..., 31)\n        # %m: Represents the month as a zero-padded decimal number (e.g., 01 for January, 02 for February, ..., 12 for December)\n        # %H: Represents the hour as a zero-padded decimal number in 24-hour clock format (e.g., 00 for midnight, 13 for 1 PM, ..., 23 for 11 PM)\n        # %M: Represents the minute as a zero-padded decimal number (e.g., 00, 01, ..., 59)\n        # %S: Represents the second as a zero-padded decimal number (e.g., 00, 01, ..., 59)\n        formatted_time = time.strftime('%Y-%d-%m %H:%M:%S')\n        print(formatted_time)  # Outputs the formatted date and time in the \"America/Sao_Paulo\" timezone\n        ```\n      </Tab>\n\n      <Tab title=\"Pytz\">\n        ```python main.py\n        from datetime import datetime\n        import pytz\n\n        # Create a datetime object with the current time in UTC\n        now = datetime.now(pytz.utc)\n\n        # Define the timezone for \"America/Sao_Paulo\"\n        tz = pytz.timezone('America/Sao_Paulo')\n\n        # Convert the UTC datetime to \"America/Sao_Paulo\" timezone\n        time = now.astimezone(tz)\n\n        # Define the format string for date and time representation\n        # %Y: Represents the year with four digits (e.g., 2022)\n        # %d: Represents the day of the month as a zero-padded decimal number (e.g., 01, 02, ..., 31)\n        # %m: Represents the month as a zero-padded decimal number (e.g., 01 for January, 02 for February, ..., 12 for December)\n        # %H: Represents the hour as a zero-padded decimal number in 24-hour clock format (e.g., 00 for midnight, 13 for 1 PM, ..., 23 for 11 PM)\n        # %M: Represents the minute as a zero-padded decimal number (e.g., 00, 01, ..., 59)\n        # %S: Represents the second as a zero-padded decimal number (e.g., 00, 01, ..., 59)\n        formattedTime = time.strftime('%Y-%d-%m %H:%M:%S')\n        print(formattedTime)  # Outputs the date and time in the \"America/Sao_Paulo\" timezone\n        ```\n      </Tab>\n    </Tabs>\n  </Tab>\n</Tabs>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "X5iJN6tDkAUI": {
      "id": "X5iJN6tDkAUI",
      "path": "topgg-webhook-config",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Configure Top.gg Webhook on Square Cloud",
        "description": "A detailed guide to setting up the Top.gg webhook on Square Cloud.",
        "slug": "configure-topgg-webhook-on-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Introduction\n\n- This guide assumes you have an approved bot on [top.gg](https://top.gg/) and are using either Node.js or Python for your project.\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/pricing).\n\n## Setting Up the Environment\n\n<Tabs>\n  <Tab title=\"Node.js\">\n    1. Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n    2. Start a new Node.js project with the following command:\n\n    ```bash Terminal\n    npm init -y\n    ```\n\n    This command creates a package.json file in the current directory.\n\n    2. Install the necessary libraries:\n\n    ```bash Terminal\n    npm install @top-gg/sdk express\n    ```\n  </Tab>\n\n  <Tab title=\"Python\">\n    1. Ensure you have Python and Pip (a package manager for Python) installed on your system. If not, you can download them from the [official Python website](https://www.python.org/) and the [official Pip website](https://pypi.org/).\n    2. Install the `flask` and `waitress` libraries using pip:\n\n    ```bash\n    pip install flask\n    pip install waitress\n    ```\n  </Tab>\n</Tabs>\n\n## Setting Up the Project\n\n**1. Get your webhook authentication:**\n\n- Go to your Top.gg profile [here](https://top.gg/user/me).\n- Click \"edit\" on the bot you want to receive notifications for votes.\n- Under \"GENERAL\", choose the \"webhook\" option.\n- Set the webhook authentication in \"Authorization\". In this example, we used \"myappsquare\".\n\n**2. Implement the webhook listener:**\n\nThe following sections provide code examples for both Javascript and Python:\n\n<Tabs>\n  <Tab title=\"Node.js\">\n    We will use the example provided by the top.gg documentation [here](https://docs.top.gg/docs/Libraries/javascript), with some modifications.\n\n    ```javascript index.js\n    // Import libraries\n    const Topgg = require(\"@top-gg/sdk\");\n    const express = require(\"express\");\n\n    // Create Express app and Top.gg webhook instances\n    const app = express();\n    const webhook = new Topgg.Webhook(\"YOUR_AUTHORIZATION\");\n\n    // Define route for '/topgg' endpoint (POST requests)\n    app.post(\"/topgg\", webhook.listener((vote) => {\n      // Log vote received message with user ID\n      console.log(`Vote received successfully! User ID: ${vote.user}`);\n    }));\n\n    // Start server on port 80 (default HTTP)\n    app.listen(80);\n    ```\n  </Tab>\n\n  <Tab title=\"Python\">\n    For Python, you can use the following code:\n\n    ```python app.py\n    # Import the necessary libraries\n    import logging\n    import json\n    from waitress import serve\n    from flask import Flask, request, abort\n\n    # Create an instance of the Flask app\n    app = Flask(__name__)\n\n    # Define your authorization token\n    AUTH_TOKEN = 'YOUR_AUTHORIZATION'\n\n    # Define a route for the '/topgg' endpoint that accepts POST requests\n    @app.route(\"/topgg\", methods=[\"POST\"])\n    def hook():\n        # Check the authorization header\n        auth = request.headers.get('Authorization')\n        if auth != AUTH_TOKEN:\n            logging.error('Access denied')\n            abort(401)  # Unauthorized\n\n        # Convert the request data from bytes to a JSON dictionary\n        data = json.loads(request.data)\n        # Print the ID of the user who voted\n        print(f'Vote received successfully! User ID: {data[\"user\"]}')\n        # Return a response with the string \"Data received\" and status 200 to indicate that the request was processed successfully\n        return \"Data received\"\n\n    # Check if this script is being run directly and not imported as a module\n    if __name__ == \"__main__\":\n        # Set the log message format to exclude the log level\n        logging.basicConfig(format='%(message)s', level=logging.INFO)\n        # Serve our Flask app on port 80 and listen on all network interfaces\n        serve(app, host=\"0.0.0.0\", port=80)\n    ```\n  </Tab>\n</Tabs>\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Uploading Your Application to Square Cloud\n\nAfter following all the steps, put your application files into a `.zip` file, including the configuration file.\n\nIf your application is a Node.js project, take a look at our article on [Node.js](\"https://docs.squarecloud.app/articles/getting-started-with-nodejs\").\n\nIf your application is a Python project, take a look at our article on [Python](\"https://docs.squarecloud.app/articles/getting-started-with-python\").\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login \n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you need to execute the following command, passing the path of your zip file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your application hosted on Square Cloud, note that by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer to use a custom domain, such as `mysite.com`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to Set Up Your Custom Domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website or API is 512MB. However, depending on the size and complexity of your project, it may be advisable to use a larger amount of RAM to avoid the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporary Access Denied\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" when trying to access the site, please wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your application. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Starting Tests\n\nIf you have done everything correctly, try accessing your site using the subdomain defined in the configuration file. If you defined it as \"mysite\", to access it will be `https://mysite.squareweb.app/`. After you access and only \"Cannot GET /\" or \"Method Not Allowed\" appears, everything is okay.\n\nNow, you need to go back to the previous page where the authorization was defined. In the Webhook URL field, you should put the URL of your site with the route that will receive the votes.\n\n- For the JavaScript code we created with `app.post(\"/topgg\", webhook.listener((vote) => {...})`, the route that will receive the votes is \"/topgg\". So, if your website is \"https://mysite.squareweb.app\", you should put \"https://mysite.squareweb.app/topgg\" as the Webhook URL.\n\n- For the Python code we created with `@app.route(\"/topgg\", methods=[\"POST\"])`, the route that will receive the votes is also \"/topgg\". So, the Webhook URL would be the same \"https://mysite.squareweb.app/topgg\".\n\n<Frame>\n  <img src=\"/images/articles/topgg/example-url.png\" style={{ borderRadius: \"0.2rem\" }} />\n</Frame>\n\nFinally, click on the \"Send Test\" button. After that, check the terminal. If everything went well, the message you defined in `console.log` or `print` should appear in the terminal.\n\n<Frame>\n  <img src=\"/images/articles/topgg/example-send.png\" style={{ borderRadius: \"0.2rem\" }} />\n</Frame>\n\nAnd with that, if everything has been configured correctly, your webhook will be ready to send notifications when your bot receives a vote on top.gg.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "6bxI5kS3rBKK": {
      "id": "6bxI5kS3rBKK",
      "path": "deploys/discord-bot",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Hosting a Discord Bot on Square Cloud",
        "description": "This article guides you through creating and hosting a Discord bot on Square Cloud.",
        "slug": "hosting-a-discord-bot-on-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Introduction\n\n- Before you start coding, you need to set up your bot properly on Discord. First, it's necessary to have a Discord account. If you don't have one yet, you can create one by visiting the [official Discord website](https://discord.com/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n<AccordionGroup>\n  <Accordion title=\"Getting Started\" icon=\"rocket\" iconType=\"solid\">\n    First, go to the [Developer Portal](https://discord.com/developers/applications) and click on \"New Application\". Next, you will need to choose a name for your bot and click on \"Create\" to create it.\n\n    <Frame>\n      <img src=\"/images/articles/discord/getting-started.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Getting the Token\" icon=\"key\" iconType=\"solid\">\n    After creating your bot, it's time to get the token. To do this, you should go to the \"Bot\" tab and click on \"Reset Token\", thus generating your token. Finally, just copy it to use it in your code later.\n\n    <Frame>\n      <img src=\"/images/articles/discord/getting-the-token.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Activating Privileged Intents\" icon=\"message\" iconType=\"solid\">\n    Now that you already have your bot's token, you need to activate the necessary intents. To do this, you should still be in the \"Bot\" tab, scroll down and look for \"Privileged Gateway Intents\". Here, you should activate the following intents:\n\n    <Frame>\n      <img src=\"/images/articles/discord/intent.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n<Warning>Remember to keep your bot's token secret as it can be used to control your bot.</Warning>\n\n# Using wrappers for bot creation\n\n<Tabs>\n  <Tab title=\"Discord.js\">\n    1. Ensure you have Node.js installed on your system. If not, you can download it from the [official Node.js website](https://nodejs.org/).\n    2. Initialize a new Node.js project using `npm init`. This will create a new `package.json` file for your project:\n\n    ```bash\n    npm init -y\n    ```\n\n    3. Install the discord.js library using npm:\n\n    ```bash\n    npm install discord.js\n    ```\n\n    4. Create a new JavaScript file (e.g., `index.js`) and add the following code to create a basic Discord bot:\n\n    ```javascript index.js\n    const { Client, GatewayIntentBits } = require(\"discord.js\");\n\n    const client = new Client({\n      intents: [\n        GatewayIntentBits.Guilds,\n        GatewayIntentBits.GuildMessages,\n        GatewayIntentBits.MessageContent,\n      ],\n    });\n\n    client.on(\"ready\", () => {\n      console.log(`${client.user.tag}!`);\n    });\n\n    client.on(\"messageCreate\", (message) => {\n      if (message.content === \"!hello\") {\n        message.reply(\"Hello!\");\n      }\n    });\n\n    client.login(\"your token here\");\n    ```\n  </Tab>\n\n  <Tab title=\"Discord.py\">\n    1. Ensure you have Python installed on your system. If not, you can download it from the [official Python website](https://www.python.org/).\n    2. Install the discord.py library using pip:\n\n    ```bash\n    pip install discord.py\n    ```\n\n    3. Create a new Python file (e.g., `main.py`) and add the following code to create a basic Discord bot:\n\n    ```python main.py\n    import discord\n    from discord.ext import commands\n\n    intents = discord.Intents.default()\n    intents.message_content = True\n\n    client = commands.Bot(command_prefix='!', intents=intents)\n\n    @client.event\n    async def on_ready():\n        print(f'{client.user}')\n\n    @client.command()\n    async def hello(ctx):\n        await ctx.reply('Hello!')\n\n    client.run('your token here')\n    ```\n\n    4. Create a `requirements.txt` file to list all external libraries needed for your project:\n\n    ```txt requirements.txt\n    discord.py\n    ```\n  </Tab>\n</Tabs>\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\n<Warning>Only use this field if you are really sure about what you are doing.</Warning>\n\nIn the Square Cloud configuration file, the **START** field is optional and only needed if you are using a custom script to start the bot. In the provided example, the **START** field is not necessary.\n\n## Uploading your project to Square Cloud\n\nAfter following all the steps, package your application files into a zip file where the configuration file is and upload the bot at [Upload](https://squarecloud.app/dashboard/upload). Remember to include the `requirements.txt` or `package.json` file, but do not include files like `__pycache__` or `node_modules`. You can get more information about unnecessary files when hosting at [automatic-file-deletion-when-deploying-an-application-on-squarecloud](https://docs.squarecloud.app/faqs/automatic-file-deletion-when-deploying-an-application-on-squarecloud).\n\n## Testing the Bot\n\nIf you've done everything correctly, the next step is to invite your bot for testing. To do this, follow these steps:\n\n1. Access the [Developer Portal](https://discord.com/developers/applications).\n2. Select your bot.\n3. Navigate to the \"OAuth2\" tab.\n4. Go to \"OAuth2 URL Generator\".\n5. Check the \"bot\" option.\n6. Choose the permissions your bot will have if it's invited using this invite.\n7. Below the permissions, an invite link for your bot will be generated. It should look something like this:\n\n```txt\nhttps://discord.com/oauth2/authorize?client_id=00000000000000&permissions=8&scope=bot\n```\n\nRemember, the `client_id` in the URL should be replaced with your bot's actual client ID. The `permissions` value may also need to be adjusted based on the permissions you want your bot to have.\n\nNow, to test if everything is working, execute the following command on your server: `!hello`.\n\n<Frame>\n  <img src=\"/images/articles/discord/testing-bot.png\" style={{ borderRadius: \"0.2rem\" }} />\n</Frame>\n\n## Additional Resources\n\nFor more information on creating bots with discord.py and discord.js, visit the [official discord.py documentation](https://discordpy.readthedocs.io/en/latest/) and the [official discord.js guide](https://discordjs.guide/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of these libraries.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "s8otOA6S1DKJ": {
      "id": "s8otOA6S1DKJ",
      "path": "deploys/django-application",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Hosting a Django Application on Square Cloud",
        "description": "This article guides you on creating and hosting a Django application on Square Cloud.",
        "slug": "hosting-a-django-application-on-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Creating a New Django Project\n\n- Before getting started, make sure you have Python and pip installed on your system. If you don't already have them, you can download them from the [official Python website](https://www.python.org/) and [official Pip website](https://pypi.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\nWith Python and pip installed, you can create a new Django project. First, install Django using pip:\n\n```bash\npip install django\n```\n\nThen, create a new Python file (e.g., `app.py`) and add the following code to create a basic Django application:\n\n```python app.py\nfrom django.conf import settings\nfrom django.http import HttpResponse\nfrom django.urls import path\nfrom django.core.wsgi import get_wsgi_application\n\n# Basic Django settings\nsettings.configure(\n    DEBUG=False,  # Turn off debug mode\n    SECRET_KEY='mysecretkey',  # Set your secret key\n    ALLOWED_HOSTS=['*'],  # Allow all hosts for simplicity\n    ROOT_URLCONF=__name__,  # Set the root URL configuration to this module\n    MIDDLEWARE_CLASSES=(),  # Use an empty tuple to disable middleware\n)\n\n# Simple view\ndef index(request):\n    return HttpResponse(\"Hello world!\")  # Return a simple HTTP response\n\n# URL configuration\nurlpatterns = [\n    path('', index),  # Map the root URL to the index view\n]\n\n# WSGI application\napplication = get_wsgi_application()\n\n# WSGI server\nif __name__ == \"__main__\":\n    from wsgiref.simple_server import make_server\n    httpd = make_server('', 80, application)  # Serve the application using the WSGI server on port 80\n    print(\"Django server running on port 80...\")\n    httpd.serve_forever()  # Start the server\n```\n\nIn the above code, we create a basic route that returns \"Hello, World!\" when accessed. The application is configured to run on port 80, which is the default port for HTTP traffic.\n\n## Managing Dependencies with the requirements.txt file\n\nThe `requirements.txt` file is a file that lists all external libraries required for your project. You should list all libraries your project will use, excluding native libraries like `random` and `datetime`. This file should be included when submitting your application to Square Cloud.\n\n```txt requirements.txt\ndjango\n```\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the **START** field is optional and is only necessary if you are using a custom script to start the website. In the example provided, the **START** field is not necessary.\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans [here](https://squarecloud.app/plans).\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host a Django application?** Don't worry, we're here to help. Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design. It's built by experienced developers and takes care of much of the hassle of web development, so you can focus on writing your app without needing to reinvent the wheel. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most Django applications. However, if you're working on a larger project and seeking extra stability, we recommend considering our Pro plan. With additional resources, you can maintain stability even during peak demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your application hosted on Square Cloud, note that by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer to use a custom domain, such as `mysite.com`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to Set Up Your Custom Domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website or API is 512MB. However, depending on the size and complexity of your Django application, it may be advisable to use a larger amount of RAM to avoid the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporary Access Denied\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" when trying to access the site, please wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your application. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about Django and its tools, visit the [official Django documentation](https://docs.djangoproject.com/en/5.0/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most out of Django.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "9n7micjyDln3": {
      "id": "9n7micjyDln3",
      "path": "deploys/express-application",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Hosting an Express Application on Square Cloud",
        "description": "This article guides you on creating and hosting an Express app on Square Cloud",
        "slug": "hosting-an-express-application-on-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Introduction\n\n- Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n### Setting up Express\n\nTo use Express, you need to install it on your system. Run the following command:\n\n```bash\nnpm install express\n```\n\nThis command installs the `express` package on your system, which allows you to use Express in your terminal.\n\n### Creating an Express Project\n\nTo create a new Express project, you can start by creating a new file and writing the following code:\n\n```javascript app.js\n// Importing the Express module\nconst express = require('express');\n\n// Creating a new Express application\nconst app = express();\n\n// Setting the port to 80\n// Port 80 is the default port for HTTP traffic.\nconst port = 80;\n\n// Defining a route handler for the route '/'\n// This route handler sends 'Hello World!' when accessed.\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\n// Making our Express application listen on port 80\napp.listen(port, () => {\n  // This block of code will run once the server is listening on port 80\n  console.log(`Example app listening on port ${port}`);\n});\n```\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the **START** field is optional and is only necessary if you are using a custom script to start the website or API. In the example provided, the **START** field is not necessary.\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans [here](https://squarecloud.app/plans).\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host an Express application?** Don't worry, we're here to help. Express.js is a framework for Node.js that provides minimal features for web server construction. It's easy to learn, highly flexible, and suitable for a wide range of applications, making it a great choice for web development. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most Express applications. However, if you're working on a larger project or need more stability, we recommend considering our Pro plan. With additional resources, you can ensure smooth performance even under high demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your app hosted on Square Cloud, note that by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer using a custom domain, such as `mysite.com`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to set up your custom domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website or API is 512MB. However, depending on the size and complexity of your Express application, it may be advisable to use a larger amount of RAM to avoid the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporarily Denied Access\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" when trying to access the site, wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your application. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about Express and its tools, visit the [official Express documentation](https://expressjs.com/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of Express.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "mUz0Qm8wdgsu": {
      "id": "mUz0Qm8wdgsu",
      "path": "deploys/fastify-application",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Hosting a Fastify Application on Square Cloud",
        "description": "This article guides you on creating and hosting a Fastify app on Square Cloud",
        "slug": "hosting-a-fastify-application-on-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Introduction\n\n- Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n### Setting up Fastify\n\nTo use Fastify, you need to install it on your system. Run the following command:\n\n```bash\nnpm install fastify\n```\n\nThis command installs the `fastify` package on your system, which allows you to use Fastify in your terminal.\n\n### Creating a Fastify Project\n\nTo create a new Fastify project, you can start by creating a new file and writing the following code:\n\n```javascript app.js\n// Importing the Fastify module\nconst fastify = require('fastify')({ logger: true });\n\n// Defining a route handler for the route '/'\n// This route handler sends 'Hello, World!' when accessed.\nfastify.get('/', async (request, reply) => {\n  return 'Hello World!';\n});\n\n// Making our Fastify application listen on port 80\nfastify.listen({ port: 80 })\n  .then((address) => {\n    // This block of code will run once the server is listening on port 80\n    fastify.log.info(`Example app listening at ${address}`);\n  })\n  .catch((err) => {\n    // This block of code will run if there is an error when trying to listen on port 80\n    fastify.log.error(err);\n    process.exit(1);\n  });\n```\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the **START** field is optional and is only necessary if you are using a custom script to start the website or API. In the example provided, the **START** field is not necessary.\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans [here](https://squarecloud.app/plans).\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host a Fastify application?** Don't worry, we're here to help. Fastify is a web framework highly focused on providing the best developer experience with the least overhead and a powerful plugin architecture. It's easy to learn, highly flexible, and suitable for a wide range of applications, making it a great choice for web development. Fastify also has excellent production capabilities, making it a robust choice for building and deploying production-grade applications. It's designed to be efficient, fast, and lightweight, ensuring your applications run smoothly and reliably. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most Fastify applications. However, if you're working on a larger project or need more stability, we recommend considering our Pro plan. With additional resources, you can ensure smooth performance even under high demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your application hosted on Square Cloud, note that by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer using a custom domain, such as `mysite.com`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to set up your custom domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website or API is 512MB. However, depending on the size and complexity of your Fastify application, it may be advisable to use a larger amount of RAM to avoid the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporarily Denied Access\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" when trying to access the site, wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your application. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about Fastify and its tools, visit the [official Fastify documentation](https://fastify.dev/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of Fastify.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "4eI5mGTgNL7Z": {
      "id": "4eI5mGTgNL7Z",
      "path": "deploys/flask-application",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Hosting a Flask Application on Square Cloud",
        "description": "This article guides you through creating and hosting a Flask application on Square Cloud.",
        "slug": "hosting-a-flask-application-on-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Creating a New Flask Project\n\n- Before getting started, make sure you have Python and pip installed on your system. If you don't already have them, you can download them from the [official Python website](https://www.python.org/) and [official Pip website](https://pypi.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\nWith Python and pip installed, you can create a new Flask project. First, install Flask using pip:\n\n```bash\npip install flask\npip install waitress\n```\n\nThen, create a new Python file (e.g., `app.py`) and add the following code to create a basic Flask application:\n\n```python\n# Import the Flask class from the flask module\nfrom flask import Flask\n\n# Create an instance of the Flask class\napp = Flask(__name__)\n\n# Define a route for the root URL (/) that returns 'Hello, World!'\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n# Check if this script is being executed directly (not imported as a module)\nif __name__ == '__main__':\n    # Run the Flask application on host 0.0.0.0 (all available network interfaces) and port 80\n    app.run(host='0.0.0.0', port=80)\n```\n\n## Configuring the Production Environment with Waitress\n\n```python\nfrom flask import Flask\n\n# Create a Flask application instance\napp = Flask(__name__)\n\n# Define a route for the root URL (/) that returns 'Hello, World!'\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n# If this script is executed directly (not imported as a module)\nif __name__ == '__main__':\n    from waitress import serve  # Import serve function from Waitress\n    \n    # Serve the Flask application using Waitress on host 0.0.0.0 (all interfaces) and port 80\n    serve(app, host='0.0.0.0', port=80)\n    \n    # Print a message to indicate successful server start on port 80\n    print(\"Server successfully started on port 80.\")\n```\n\nIn the above code, we create a basic route that returns \"Hello, World!\" when accessed. The application is configured to run on port 80, which is the default port for HTTP traffic.\n\n## Managing Dependencies with the requirements.txt file\n\nThe `requirements.txt` file is a file that lists all external libraries required for your project. You should list all libraries your project will use, excluding native libraries like `random` and `datetime`. This file should be included when submitting your application to Square Cloud.\n\n```txt requirements.txt\nflask\n```\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the **START** field is optional and is only necessary if you are using a custom script to start the website or API. In the example provided, the **START** field is not necessary.\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans [here](https://squarecloud.app/plans).\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host a Flask Application?** Don't worry, we're here to help. Flask is known for its efficiency, especially for small projects or learning purposes. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most Flask applications. However, if you're working on a larger project and seeking extra stability, we recommend considering our Pro plan. With additional resources, you can maintain stability even during peak demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your application hosted on Square Cloud, note that by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer to use a custom domain, such as `mysite.com`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to Set Up Your Custom Domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website or API is 512MB. However, depending on the size and complexity of your Flask application, it may be advisable to use a larger amount of RAM to avoid the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporary Access Denied\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" when trying to access the site, please wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your application. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about Flask and its tools, visit the [official Flask documentation](https://flask.palletsprojects.com/en/3.0.x/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most out of Flask.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "L5I0YzAVVaYa": {
      "id": "L5I0YzAVVaYa",
      "path": "deploys/lavalink-server",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "How to create your Lavalink Server",
        "description": "Learn how to host your Lavalink server and stream high-quality music to your Discord bot.",
        "slug": "how-to-create-your-lavalink-server"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Introduction 🚀\n\n- Follow the tutorial below and host your Lavalink server today it\"s super simple! If you need any assistance, feel free to reach out to us through our official support channels.\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email, to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n## Choosing the Version\n\nChoose your desired version of `Lavalink` by clicking [here](https://github.com/freyacodes/Lavalink/releases/). We recommend selecting the latest version for the best experience.\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Creating the application.yml\n\nCreate a configuration file for your Lavalink server. You can access an example file [here](https://github.com/freyacodes/Lavalink/blob/master/LavalinkServer/application.yml.example).\n\n<Warning>Set the `port` field in your `application.yml` file to: `80`.</Warning>\n\n## Enhancing Security\n\nIt is highly recommended to configure a secure password in the `password` field of your configuration file (application.yml). We recommend using a password with at least 32 characters.\n\n<Note>It is important to remember that you must use port 443 (SSL) and the `secure` option in `true` to connect to your lavalink.</Note>\n\n## Uploading Project to Square Cloud\n\nCreate a compressed file (.zip) containing the `Lavalink.jar` and `application.yml`. Then, upload your configuration file to Square Cloud.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login \n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you need to execute the following command, passing the path of your zip file:\n\n        ```bash\n        squarecloud upload server.zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "w1gmUmjmk3bD": {
      "id": "w1gmUmjmk3bD",
      "path": "deploys/nestjs-application",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Hosting a Nestjs Application on Square Cloud",
        "description": "This article guides you on creating and hosting a Nestjs app on Square Cloud",
        "slug": "hosting-a-nestjs-application-on-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Introduction\n\n- Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n### Setting up NestJS CLI\n\nTo use the NestJS command-line interface (CLI), you need to install it globally on your system. Run the following command:\n\n```bash\nnpm install -g @nestjs/cli\n```\n\nThis command installs the `@nestjs/cli` package globally on your system, which allows you to use the `nest` command from anywhere in your terminal.\n\n### Creating a NestJS Project\n\nTo create a new NestJS project, run the following command:\n\n```bash\nnest new my-app\n```\n\nIn this command, `nest new my-app` is used to create a new NestJS project. The `nest new` command is a tool that comes with `nest`, the NestJS CLI (Command Line Interface). It is used to initialize a new NestJS application.\n\n`my-app` is the name of the new application. This command creates a new directory named `my-app` and sets up the necessary files and dependencies for a basic NestJS application.\n\n## Configuring Port 80\n\nAfter generating the NestJS project with the command `nest new my-app`, the file you need to modify to change the port is `main.ts`. This file is located at the root of your project directory, inside the `src` folder.\n\n```typescript\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(80); // Change the port number here to 80\n}\nbootstrap();\n```\n\nPort 80 is the default port for HTTP traffic.\n\n## Building the Application\n\nNestJS uses TypeScript, so you could compile your TypeScript code to JavaScript before you can run your application.\n\nYou can build your application by running the following command:\n\n```bash\nnpm run build\n```\n\nThis command runs the `build` script defined in your `package.json` file, which in turn runs the `nest build` command. This command compiles your TypeScript code to JavaScript.\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the MAIN field\n\nYou need to specify the main file of your application in the `MAIN` field of squarecloud.app. For a NestJS application, the main file is the compiled JavaScript file of your `main.ts` file, which is `dist/main.js`.\n\nHere's how you can set it:\n\n```app squarecloud.app\nMAIN=dist/main.js\n```\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the **START** field is optional and is only necessary if you are using a custom script to start the website or API. In the example provided, the **START** field is not necessary.\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans [here](https://squarecloud.app/plans).\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host a NestJS application?** Don't worry, we're here to help. NestJS is a progressive Node.js framework for building efficient and scalable server-side applications. It's modular, testable, and strongly typed with TypeScript, making it a great choice for complex back-end development. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most Nestjs applications. However, if you're working on a larger project or need more stability, we recommend considering our Pro plan. With additional resources, you can ensure smooth performance even under high demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your app hosted on Square Cloud, note that by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer using a custom domain, such as `mysite.com`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to set up your custom domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website or API is 512MB. However, depending on the size and complexity of your NestJS application, it may be advisable to use a larger amount of RAM to avoid the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporarily Denied Access\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" when trying to access the site, wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your application. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about Nestjs and its tools, visit the [official Nestjs documentation](https://docs.nestjs.com/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of Nestjs.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "veHHIeGEZwPG": {
      "id": "veHHIeGEZwPG",
      "path": "deploys/next-website",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Hosting a Next.js Website on Square Cloud",
        "description": "This article guides you on creating and hosting a Next.js website on Square Cloud.",
        "slug": "hosting-a-nextjs-website-on-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Introduction\n\n- Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n### Creating a Next.js Project\n\nTo create a new Next.js project, run the following command:\n\n```bash\nnpx create-next-app@latest my-app\n```\n\nIn this command, `my-app` is the name of your new project. You can replace `my-app` with any name you want for your project. The `npx` command is a tool that comes with `npm`, the Node.js package manager. It is used to run Node.js packages that are installed locally in your project or are available remotely on the npm registry.\n\n`create-next-app` is a package available on the npm registry that sets up a new Next.js project for you. It takes care of all the initial setup, such as creating the project directory, installing necessary dependencies, and configuring basic files.\n\n`@latest` is a tag specifying that you want to use the latest version of the `create-next-app` package. This ensures you're always using the most updated version and, consequently, have access to the latest features.\n\n## Configuring Port 80\n\nPort 80 is the default port for HTTP traffic. To host a Next.js website on Square Cloud, it's crucial to configure the use of port 80. In Next.js, you can set the `-p 80` parameter in the startup script to ensure your website runs correctly on this port.\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the `START` field is essential for customizing the startup command. If you want to build and start your website on Square Cloud, configure the `START` field as follows:\n\n```app squarecloud.app\nSTART=npm run build && npm run start\n```\n\nThis command will execute the \"build\" and \"start\" scripts defined in your `package.json`:\n\n```json package.json\n{\n  \"name\": \"my-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start -p 80\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"next\": \"14.1.0\"\n  },\n  \"devDependencies\": {\n    \"autoprefixer\": \"^10.0.1\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.3.0\",\n    \"eslint\": \"^8\",\n    \"eslint-config-next\": \"14.1.0\"\n  }\n}\n```\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans [here](https://squarecloud.app/plans).\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host a Next.js website?** Don't worry, we're here to help. Next.js is a React framework best known for its server-side rendering and static site generation capabilities. It's designed to provide an optimal developer experience through features like zero-config, automatic TypeScript support, file-system based routing, and built-in CSS support. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most Next.js websites. However, if you're working on a larger project or need more stability, we recommend considering our Pro plan. With additional resources, you can ensure smooth performance even under high demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your website hosted on Square Cloud, note that, by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer to use a custom domain, such as `mysite.com.br`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to set up your custom domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirement\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website is 512MB, however, when building your site directly on Square, it is advisable to use a higher amount, or you may encounter the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporary access Denied\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" after trying to access the site, please wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your website. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about Next.js and its tools, visit the [official Next.js documentation](https://nextjs.org/docs). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of Next.js.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "fN9PfluMWrbs": {
      "id": "fN9PfluMWrbs",
      "path": "deploys/react-website",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Hosting a React Application on Square Cloud",
        "description": "This article guides you on creating and hosting a React website on Square Cloud.",
        "slug": "hosting-a-react-application-on-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Introduction\n\n- Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n### Creating a React Project\n\nTo create a new React project, run the following command:\n\n```bash\nnpx create-react-app my-react-app\n```\n\nIn the above command, `my-react-app` is the name of your new project. You can replace `my-react-app` with any desired name for your project.\n\n`create-react-app` is a package available in the npm registry that sets up a new React project for you. It takes care of all the initial setup, such as creating the project directory, installing necessary dependencies, and configuring basic files.\n\n## Configuring the Production Environment with Serve\n\nAfter having your React project created and configured, it's time to prepare it for production. For this, we will use a library called `serve`. This library is a static server that can serve your React project after it has been built.\n\n### Installing the Serve Library\n\nTo install the `serve` library, navigate to your project directory in the terminal and run the following command:\n\n```bash\nnpm install serve@14.2.3\n```\n\nThis command installs version `14.2.3` of the `serve` library. If you want to install the latest version, you can omit the `@14.2.3`.\n\n### Configuring the Startup Script\n\nAfter installing the `serve` library, you need to configure your project's startup script to use `serve`. To do this, open your project's `package.json` file and add a new script called `start:prod`:\n\n```json\n\"scripts\": {\n  \"start\": \"react-scripts start\",\n  \"start:prod\": \"serve -s build -l 80\",\n  ...\n}\n```\n\nIn the `start:prod` script, `serve -s build -l 80` does the following:\n\n- `serve`: This is the command to start the `serve` server.\n- `-s build`: The `-s` option serves the `build` directory in single-page application mode. This means all not-found requests will be redirected to `index.html`. The `build` directory is created when you run `npm run build`.\n- `-l 80`: The `-l` option followed by `80` tells `serve` to listen on port 80. Port 80 is the default port for HTTP traffic.\n\nNow, when you want to start your project in production mode, you can run the `npm run start:prod` command. This command first builds your React project and then serves the built files using `serve` on port 80.\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the `START` field is essential for customizing the startup command. If you want to build and start your application on Square Cloud, configure the `START` field as follows:\n\n```app squarecloud.app\nSTART=npm run build && npm run start:prod\n```\n\nThis command will execute the \"build\" and \"start:prod\" scripts defined in your `package.json`:\n\n```json package.json\n{\n  \"name\": \"my-react-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@testing-library/jest-dom\": \"^5.17.0\",\n    \"@testing-library/react\": \"^13.4.0\",\n    \"@testing-library/user-event\": \"^13.5.0\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-scripts\": \"5.0.1\",\n    \"serve\": \"^14.2.3\",\n    \"web-vitals\": \"^2.1.4\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"start:prod\": \"serve -s build -l 80\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n```\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans here.\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host a React website?** Don't worry, we're here to help. React is a JavaScript framework known for its speed and flexibility. It allows developers to build large web applications that can update and render efficiently in response to data changes. It's also relatively easy to learn, making it accessible for beginners. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most React websites. However, if you're working on a larger project or need more stability, we recommend considering our Pro plan. With additional resources, you can ensure smooth performance even under high demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your application hosted on Square Cloud, note that, by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer to use a custom domain, such as `mysite.com.br`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to set up your custom domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirement\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website is 512MB, however, when building your site directly on Square, it is advisable to use a higher amount, or you may encounter the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporary access Denied\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" after trying to access the site, please wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your website. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about React and its tools, visit the [official React documentation](https://reactjs.org/docs). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of React.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "6Ks4IlL4H9Kc": {
      "id": "6Ks4IlL4H9Kc",
      "path": "deploys/telegram-bot",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Hosting a Telegram Bot on Square Cloud",
        "description": "This article guides you through creating and hosting a Telegram bot on Square Cloud.",
        "slug": "hosting-a-telegram-bot-on-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Introduction\n\n- Before you start coding, you need to set up your bot properly on Telegram. First, it's necessary to have a Telegram account. If you don't have one yet, you can create one by visiting the [official Telegram website](https://telegram.org/).\n\n<AccordionGroup>\n  <Accordion title=\"Getting Started\" icon=\"rocket\" iconType=\"solid\">\n    First, you should access [Telegram](https://web.telegram.org/a/) and search for a bot called \"BotFather.\"\n\n    <Frame>\n      <img src=\"/images/articles/telegram/getting-started.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Getting the Token\" icon=\"key\" iconType=\"solid\">\n    Click on it to start a conversation and type \"start.\" When it sends the message, choose the \"/newbot\" option. After that, it will ask for the name you want for your bot, and finally, when you choose the name, it will generate the token.\n\n    <Frame>\n      <img src=\"/images/articles/telegram/getting-the-token.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n<Warning>Remember to keep your bot's token secret as it can be used to control your bot.</Warning>\n\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n# Using wrappers for bot creation\n\n<Tabs>\n  <Tab title=\"node-telegram-bot-api\">\n    1. Ensure you have Node.js installed on your system. If not, you can download it from the [official Node.js website](https://nodejs.org/).\n    2. Initialize a new Node.js project using `npm init`. This will create a new `package.json` file for your project:\n\n    ```bash\n    npm init -y\n    ```\n\n    3. Install the node-telegram-bot-api library using npm:\n\n    ```bash\n    npm install node-telegram-bot-api\n    ```\n\n    4. Create a new JavaScript file (e.g., `index.js`) and add the following code to create a basic Discord bot:\n\n    ```javascript index.js\n    // Importing the node-telegram-bot-api library\n    const TelegramBot = require(\"node-telegram-bot-api\");\n\n    // Configuring the API key\n    const token = \"your token here\";\n\n    // Initializing the bot\n    const bot = new TelegramBot(token, { polling: true });\n\n    // Getting bot information\n    bot.getMe().then((botInfo) => {\n      // Getting the bot's name\n      const botName = botInfo.username;\n\n      // Defining a route for messages that are not commands\n      bot.on(\"message\", (msg) => {\n        // Getting the chat ID\n        const chatId = msg.chat.id;\n        // Getting the user's message\n        const userMsg = msg.text;\n        // Formatting the message to be sent\n        const responseMsg = `${botName} Says: ${userMsg}`;\n        // Sending the message\n        bot.sendMessage(chatId, responseMsg);\n      });\n\n      // Printing the bot's name\n      console.log(botName);\n    });\n    ```\n  </Tab>\n\n  <Tab title=\"telebot\">\n    1. Ensure you have Python and Pip (a package manager for Python) installed on your system. If not, you can download them from the [official Python website](https://www.python.org/) and the [official Pip website](https://pypi.org/).\n    2. Install the telebot library using pip:\n\n    ```bash\n    pip install telebot\n    ```\n\n    3. Create a new Python file (e.g., `main.py`) and add the following code to create a basic Telegram bot:\n\n    ```python main.py\n    # Importing the telebot_router library\n    from telebot_router import TeleBot\n\n    # Initializing the bot\n    app = TeleBot(__name__)\n\n    # Defining a route for messages that are not commands\n    @app.route('(?!/).+')\n    def parrot(message):\n        # Getting the chat ID\n        chat_dest = message['chat']['id']\n        # Getting the user's message\n        user_msg = message['text']\n        # Getting bot information\n        bot_info = app.get_me()['result']\n        # Getting the bot's name\n        bot_name = bot_info['username']\n        # Formatting the message to be sent\n        msg = \"{} Says: {}\".format(bot_name, user_msg)\n        # Sending the message\n        app.send_message(chat_dest, msg)\n        \n    # Defining the main function\n    if __name__ == '__main__':\n        # Configuring the API key\n        app.config['api_key'] = 'your token here'\n        # Getting bot information\n        bot_info = app.get_me()['result']\n        # Getting the bot's name\n        bot_name = bot_info['username']\n        # Printing the bot's name\n        print(f\"{bot_name}\") \n        # Starting the bot\n        app.poll(debug=True)\n    ```\n\n    4. Create a `requirements.txt` file to list all external libraries needed for your project:\n\n    ```txt requirements.txt\n    telebot\n    ```\n  </Tab>\n</Tabs>\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\n<Warning>Only use this field if you are really sure about what you are doing.</Warning>\n\nIn the Square Cloud configuration file, the **START** field is optional and only needed if you are using a custom script to start the bot. In the provided example, the **START** field is not necessary.\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Testing the Bot\n\nIf you have done everything correctly, simply search for your bot on Telegram and send a message; it will echo it back to you.\n\n<Frame>\n  <img src=\"/images/articles/telegram/testing-bot.png\" style={{ borderRadius: \"0.2rem\" }} />\n</Frame>\n\n## Additional Resources\n\nFor more information on creating bots with telebot, visit the [official telebot documentation](https://pypi.org/project/telebot/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of these libraries.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "k6CQUbg64Fdl": {
      "id": "k6CQUbg64Fdl",
      "path": "deploys/vite-website",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Hosting a Vite Application on Square Cloud",
        "description": "This article guides you on creating and hosting a Vite app on Square Cloud",
        "slug": "hosting-a-vite-application-on-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Introduction\n\n- Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n### Creating a Vite Project\n\nTo create a new Vite project, run the following command:\n\n```bash\nnpm create vite@latest my-vite-app\n```\n\nIn the above command, `my-vite-app` is the name of your new project. Replace it with any desired name for your project. By default, this command sets up a Vite project with JavaScript.\n\n### Choosing a Specific Template\n\nVite allows choosing different templates for your project. When creating a new project, you can specify the desired template using the `--template` option. Here are some examples:\n\nSelect a template by: `react`, `vue` & `lit`.\n\n```bash\n# npm 7+, extra double-dash is needed:\nnpm create vite@latest my-vite-app -- --template [template]\n```\n\nChoose the template that best suits your needs and adjust the project name as needed.\n\n### Understanding the Difference Between JavaScript and TypeScript\n\nWhen you choose JavaScript, Vite configures the project with default JavaScript settings. On the other hand, when choosing TypeScript, Vite configures the project with TypeScript settings, including generating a `tsconfig.json` file.\n\n## Configuring Port 80\n\nPort 80 is the default port for HTTP traffic. To host a Vite app on Square Cloud, configure the use of port 80. In Vite, you can set the `--port 80` parameter in the startup script to ensure your app runs correctly on this port.\n\n## Configuring Host 0.0.0.0\n\nThe `--host 0.0.0.0` option is used to bind the Vite server to all available network interfaces. This makes your application accessible not only on `localhost`, but also on external devices within the same network, such as other computers or mobile devices. By default, Vite binds to `localhost`, which restricts access to the machine where it's running. Setting the host to `0.0.0.0` allows the server to listen for incoming requests from any IP address.\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the `START` field is essential to customize the startup command. If you want to build and start your Vite app on Square Cloud, configure the `START` field as follows:\n\n```app squarecloud.app\nSTART=npm run build && npm run preview\n```\n\nThis command will execute the \"build\" and \"preview\" scripts defined in your `package.json`:\n\n```json package.json\n{\n  \"name\": \"my-vite-app\",\n  \"private\": true,\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview --host 0.0.0.0 --port 80\"\n  },\n  \"devDependencies\": {\n    \"vite\": \"^5.1.4\"\n  }\n}\n\n```\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans [here](https://squarecloud.app/plans).\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host a Vite website?** Don't worry, we're here to help. Vite is a modern front-end build tool that provides a faster and leaner development experience for modern web projects. It's designed to provide out-of-the-box support for ES modules, enabling instant server start-up and hot module replacement. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most Vite websites. However, if you're working on a larger project or need more stability, we recommend considering our Pro plan. With additional resources, you can ensure smooth performance even under high demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your app hosted on Square Cloud, note that by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer using a custom domain, such as `mysite.com`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to set up your custom domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website or API is 512MB, however, when building your site directly on Square, it's advisable to use a higher amount, or you may encounter the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporarily Denied Access\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" when trying to access the site, wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your website. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about Vite and its tools, visit the [official Vite documentation](https://vitejs.dev/guide/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of Vite.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "6T1BB3ROntV8": {
      "id": "6T1BB3ROntV8",
      "path": "deploys/vue-website",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Hosting a Vue Application on Square Cloud",
        "description": "This article guides you on creating and hosting a Vue app on Square Cloud",
        "slug": "hosting-a-vue-application-on-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Introduction\n\n- Before you begin, make sure you have Node.js and npm installed on your system. If you don't have them yet, you can download them from the [official Node.js website](https://nodejs.org/).\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n### Creating a Vue Project\n\nTo create a new Vue project, run the following command:\n\n```bash\nnpm create vue@latest\n```\n\nIn this command, `npm create vue@latest` is used to create a new Vue project with the latest version of Vue. The `npm create` command is a tool that comes with `npm`, the Node.js package manager. It is used to initialize a new or existing npm package.\n\n`vue@latest` is a package available on the npm registry that sets up a new Vue project for you. It takes care of all the initial setup, such as creating the project directory, installing necessary dependencies, and configuring basic files.\n\n`@latest` is a tag specifying that you want to use the latest version of the `vue` package. This ensures you're always using the most updated version and, consequently, have access to the latest features.\n\n## Configuring Port 80\n\nPort 80 is the default port for HTTP traffic. To host a Vite app on Square Cloud, configure the use of port 80. In Vite, you can set the `--port 80` parameter in the startup script to ensure your app runs correctly on this port.\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\nIn the Square Cloud configuration file, the `START` field is essential to customize the startup command. If you want to build and start your Vite app on Square Cloud, configure the `START` field as follows:\n\n```app squarecloud.app\nSTART=npm run build && npm run serve\n```\n\nThis command will execute the \"build\" and \"serve\" scripts defined in your `package.json`:\n\n```json package.json\n{\n  \"name\": \"vue-project\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"serve\": \"vite preview --port 80\"\n  },\n  \"dependencies\": {\n    \"vue\": \"^3.4.21\"\n  },\n  \"devDependencies\": {\n    \"@vitejs/plugin-vue\": \"^5.0.4\",\n    \"vite\": \"^5.2.8\"\n  }\n}\n```\n\n## Purchasing a Plan Before Uploading Your Project\n\nBefore you can upload your project to Square Cloud, it's important to understand that you need to purchase a plan. The type of plan you choose will depend on the resources required by your application. You can view our plans [here](https://squarecloud.app/plans).\n\n<Note>**Are you wondering how much RAM and CPU your plan needs to host a Vue.js website?** Don't worry, we're here to help. Vue.js is a progressive JavaScript framework known for its adaptability and simplicity. It's designed to be incrementally adoptable, making it easy for developers to start small and scale up as needed. Vue.js also emphasizes a declarative rendering and component-oriented approach, making it intuitive to build modern web interfaces. Our **[Standard](https://squarecloud.app/pay/standard)** plan offers **4GB** of RAM and **4vCPU**, which should be sufficient for most Vue.js websites. However, if you're working on a larger project or need more stability, we recommend considering our Pro plan. With additional resources, you can ensure smooth performance even under high demand. To purchase, simply click [here](https://squarecloud.app/pay/pro).</Note>\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Troubleshooting\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    If you want to use a custom domain for your app hosted on Square Cloud, note that by default, the URL will be something like `https://mysite.squareweb.app/`. The subdomain is determined by the SUBDOMAIN field in the configuration file. However, if you prefer using a custom domain, such as `mysite.com`, you'll need to purchase the `Standard` plan or a higher plan. We detail each step to set up your custom domain in our article: [How to set up your custom domain](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    The minimum amount of RAM required to host a website or API is 512MB, however, when building your site directly on Square, it's advisable to use a higher amount, or you may encounter the [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) error.\n  </Accordion>\n\n  <Accordion title=\"Temporarily Denied Access\" icon=\"ban\" iconType=\"solid\">\n    If you receive the message \"Your access has been temporarily denied.\" when trying to access the site, wait for some time. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    If you receive the message \"Website took too long to respond...\" make sure you have correctly set port 80 on your website. If the issue persists, feel free to contact us at https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Additional Resources\n\nFor more information about Vue and its tools, visit the [official Vue documentation](https://vuejs.org/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of Vue.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "7x3Iy9P6E1uc": {
      "id": "7x3Iy9P6E1uc",
      "path": "deploys/website",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Hosting Your Website/API on Square Cloud",
        "description": "Learn how to host your website or API on Square Cloud using the squarecloud.app configuration file.",
        "slug": "hosting-your-websiteapi-on-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Introduction\n\n- Create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to\n  configure your application; it will be used to define the name, description,\n  version, main file, among other things.\n</Card>\n\n### Important website parameters\n\nThe **website port** needs to be **80**, if you are using a static website, you don't need to set the `START` parameter.\n\nIn squarecloud.app configuration file:\n\n- `SUBDOMAIN`: If you are hosting a website, set this parameter to your desired subdomain.\n- `START`: A custom startup command (if needed).\n\n<Note>Website url will be: `my-subdomain-parameter`.squareweb.app</Note>\n\n```systemd This example host a website without custom startup command\nMAIN=index.html\nMEMORY=512\nVERSION=recommended\nDISPLAY_NAME=My simple static website!\nSUBDOMAIN=mysite-simple-website\n```\n\n```systemd This example use all parameters and custom startup command in a website\nMAIN=index.js\nMEMORY=512\nVERSION=recommended\nDISPLAY_NAME=My simple nextjs website!\nSUBDOMAIN=mysite-nextjs-website\nSTART=npm run build && npm run start\n```\n\n# Support for multiple technologies\n\n<CardGroup cols={2}>\n  <Card title=\"React\" icon=\"react\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-react-website\">\n    Learn how to host your React website on Square Cloud.\n  </Card>\n\n  <Card title=\"Next.js\" icon=\"node-js\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-next-website\">\n    Learn how to host your Next.js website on Square Cloud.\n  </Card>\n\n  <Card title=\"NestJs\" icon=\"js\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-nestjs-application\">\n    Learn how to host your NestJs application on Square Cloud.\n  </Card>\n\n  <Card title=\"Vite\" icon=\"rocket\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-vite-website\">\n    Learn how to host your Vite website on Square Cloud.\n  </Card>\n\n  <Card title=\"Vue\" icon=\"vuejs\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-vue-website\">\n    Learn how to host your Vue website on Square Cloud.\n  </Card>\n\n  <Card title=\"Flask\" icon=\"flask\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-flask-application\">\n    Learn how to host your Flask application on Square Cloud.\n  </Card>\n\n  <Card title=\"Django\" icon=\"python\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-django-application\">\n    Learn how to host your Django application on Square Cloud.\n  </Card>\n\n  <Card title=\"Lavalink\" icon=\"java\" href=\"https://docs.squarecloud.app/tutorials/how-to-create-your-lavalink-server\">\n    Learn how to host your Lavalink server and stream high-quality music to your Discord bot.\n  </Card>\n</CardGroup>\n\nBy following these steps, you'll have your website or API up and running smoothly on Square Cloud. If you encounter any issues or need further assistance, don't hesitate to reach out to our [support team](../company/support).\n"
    },
    "HXeR7IXfcx96": {
      "id": "HXeR7IXfcx96",
      "path": "deploys/whatsapp-bot",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Hosting a Whatsapp Bot on Square Cloud",
        "description": "This article guides you through creating and hosting a Whatsapp bot on Square Cloud.",
        "slug": "hosting-a-whatsapp-bot-on-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Introduction\n\n- Before you start coding it is necessary to properly set up your bot on WhatsApp. First, you need to have WhatsApp downloaded on your phone. If you don't have it yet, you can visit the [official WhatsApp website](https://www.whatsapp.com/coronavirus/get-started?lang=en). After having WhatsApp installed and configured, you can start programming your bot.\n- Next, you will need to create an account on Square Cloud, which can be done through the [sign up page](https://squarecloud.app/signup). You can use your email to create an account.\n- Finally, you need to have an active paid plan on your account. You can view our plans and purchase one according to your needs [here](https://squarecloud.app/plans).\n\n<AccordionGroup>\n  <Accordion title=\"Remote path to the WhatsApp Web version\" icon=\"file\" iconType=\"solid\">\n    If your code requires accessing the remote path to the WhatsApp Web version, here's how to do it.\n    You can access [wa-version](https://github.com/wppconnect-team/wa-version/tree/main/html), choose the desired version (the most recent one is always recommended), and click on \"Raw\". After the page opens, simply copy the URL, which will be used later. Example URL:\n    \"https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2412.54.html\"\n\n    <Frame>\n      <img src=\"/images/articles/whatsapp/remote-path.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n# Starting Project\n\n1. Ensure you have Node.js installed on your system. If not, you can download it from the [official Node.js website](https://nodejs.org/).\n2. Initialize a new Node.js project using `npm init`. This will create a new `package.json` file for your project:\n\n```bash\nnpm init -y\n```\n\n3. Install the whatsapp-web.js and qrcode library using npm:\n\n```bash\nnpm install whatsapp-web.js qrcode\n```\n\n4. Create a new JavaScript file (e.g., `index.js`) and add the following code to create a basic Whatsapp bot:\n\n```javascript index.js\n// Importing the necessary modules\nconst { Client } = require(\"whatsapp-web.js\");\nconst qrcode = require(\"qrcode\");\n\n// Creating a new instance of the client\nconst client = new Client({\n  puppeteer: {\n    // Runs Chrome in headless mode (without a user interface).\n    headless: true,\n    args: [\n      // Disables Chrome's sandboxing features. This is necessary when running\n      // Puppeteer in certain environments like Docker containers.\n      \"--no-sandbox\",\n      // Additional sandboxing flag to disable setuid sandbox.\n      \"--disable-setuid-sandbox\",\n    ],\n  },\n  // Setting the webVersionCache option\n  webVersionCache: {\n    // Setting the type as \"remote\", which means that the WhatsApp Web version will be fetched from a remote URL\n    type: \"remote\",\n    // Setting the remote path for the WhatsApp Web version\n    remotePath: \"URL PATH HERE\",\n  },\n});\n\n// This event is fired when whatsapp-web.js generates a new QR code\nclient.on(\"qr\", async (qr) => {\n  // Here we are using the qrcode library to generate a QR Code and save it as a file\n  try {\n    await qrcode.toFile(\"./qrcode.png\", qr);\n    console.log(\"QR Code saved as qrcode.png\");\n  } catch (err) {\n    console.error(err);\n  }\n});\n\n// This event is fired when the client is ready\nclient.on(\"ready\", () => {\n  // This log will be displayed in the console when the client is ready, i.e., after the QR Code has been successfully scanned and the WhatsApp Web session has been started\n  console.log(\"Client is ready!\");\n});\n\n// This event is fired when a message is created\nclient.on(\"message_create\", (msg) => {\n  // Here we are logging the body of the message to the console\n  console.log(msg.body);\n  // If the message is \"!ping\"\n  if (msg.body == \"!ping\") {\n    // Reply with \"pong\"\n    msg.reply(\"pong\");\n  }\n});\n\n// Initializing the client\nclient.initialize();\n```\n\n## Creating the squarecloud config file\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n</Card>\n\n## Configuring the START Field\n\n<Warning>Only use this field if you are really sure about what you are doing.</Warning>\n\nIn the Square Cloud configuration file, the **START** field is optional and only needed if you are using a custom script to start the bot. In the provided example, the **START** field is not necessary.\n\n## Uploading Project to Square Cloud\n\nAfter preparing your project files, you can now upload them to Square Cloud and host your project.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Access the [Square Cloud\n    Dashboard](https://squarecloud.app/dashboard/upload) and upload your project\n    files.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        First, you need to have the CLI installed in your environment. If you\n        don't have it yet, run the following command in your terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        If you already have it, we recommend updating it. To do this, run the following command in your terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Now, to authenticate and use other CLI commands, you will find your\n        authorization key [here](https://squarecloud.app/account) by clicking on\n        \"Request API Key\". After obtaining your authorization key, run the\n        following command:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finally, to deploy your application to Square Cloud using the CLI, you\n        need to execute the following command, passing the path of your zip\n        file:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Additional Resources\n\nFor more information on creating bots with whatsapp-web.js, visit the [official whatsapp-web.js documentation](https://wwebjs.dev/). There, you'll find detailed guides, tutorials, and API documentation to help you make the most of these libraries.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "NCY86gSzghbg": {
      "id": "NCY86gSzghbg",
      "path": "faqs/automatic-deletion-files-when-deploying-an-application-to-squarecloud",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Automatic Deletion of Files When Deploying an Application to Square Cloud",
        "description": "Learn about the files that are automatically deleted when deploying an application to Square Cloud.",
        "slug": "automatic-deletion-of-files-when-deploying-an-application-to-square-cloud"
      },
      "created_at": "2025-06-25T20:06:44.000Z",
      "updated_at": "2025-06-25T20:06:44.000Z",
      "content": "When deploying your application to Square Cloud, you might encounter a scenario where certain files are automatically deleted during the deployment process. Understanding the files that are subject to automatic deletion is crucial for ensuring a smooth deployment experience. Here, we provide a list of files that are commonly deleted during deployment and need to be excluded from your deployment package.\n\n## List of Files to Exclude:\n\n- `.cache`\n- `.config`\n- `.composer`\n- `.dockerenv`\n- `.git`\n- `.husky`\n- `.logs`\n- `.local`\n- `.npm`\n- `.next`\n- `.pki`\n- `.replit`\n- `.upm`\n- `.vscode`\n- `__pycache__`\n- `Cargo.lock`\n- `.npmrc`\n- `node_modules`\n- `package-lock.json`\n- `replit.nix`\n- `replit_zip_error_log.txt`\n- `target`\n- `yarn.lock`\n- `.venv`\n- `.breakpoints`\n- `pycache`\n\nThese files are typically related to development environments, build configurations, and dependencies. Square Cloud may automatically remove them during the deployment process to optimize the application's performance and reduce unnecessary data transfer.\n\nIt's important to note that certain development tools and platforms generate these files for local development purposes. However, they are not essential for the application to run in a production environment. Therefore, excluding them during deployment ensures a more efficient and streamlined application deployment process.\n\nTo prevent these files from being deleted during deployment, make sure to exclude them from your deployment package or configure your deployment process accordingly. Understanding and managing these files will help you deploy your application smoothly on Square Cloud while maintaining a clean and efficient deployment package.\n\nFor more information on deploying applications on Square Cloud and managing whitelists, refer to the [Square Cloud documentation](https://docs.squarecloud.app/).\n"
    },
    "gn6TMunQHekg": {
      "id": "gn6TMunQHekg",
      "path": "faqs/debugging-an-application",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "How to debug your Application",
        "description": "Learn how to debug your application using discord.py and discord.js.",
        "slug": "how-to-debug-your-application"
      },
      "created_at": "2025-06-25T20:06:44.000Z",
      "updated_at": "2025-06-25T20:06:44.000Z",
      "content": "## Debugging in [**discord.js**](https://old.discordjs.dev/#/docs/discord.js/14.14.1/class/Client?scrollTo=e-debug)\n\nWith discord.js, you can utilize the \"debug\" and \"error\" events for debugging. Here's an example:\n\n```js\n// The client listens for a 'debug' event\nclient.on('debug', (info) => {\n    // Logs the debug info to the console\n    console.log(`Debug Info: ${info}`);\n});\n\n// The client listens for an 'error' event\nclient.on('error', (error) => {\n    // Logs the error message to the console\n    console.error(`Encountered an Error: ${error.message}`);\n});\n```\n\nIn this code, we use the 'debug' event; it is triggered to provide general debugging information, and the debug messages are logged to the console. Similarly, when the 'error' event is triggered, the error message is logged to the console.\n\n## Debugging in [**discord.py**](https://discordpy.readthedocs.io/en/stable/logging.html?highlight=debug)\n\nWith discord.py, you can use the logging module for debugging. Here's an example:\n\n```py\nimport logging\nimport logging.handlers\n\n# Sets up the logger for discord\nlogger = logging.getLogger('discord')\nlogger.setLevel(logging.DEBUG)\nlogging.getLogger('discord.http').setLevel(logging.INFO)\n\n# Sets up the handler for the logger\nhandler = logging.StreamHandler()\ndt_fmt = '%Y-%m-%d %H:%M:%S'\nformatter = logging.Formatter('[{asctime}] [{levelname:<8}] {name}: {message}', dt_fmt, style='{')\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\n\n# Runs the bot\nclient.run(\"your token here\", log_handler=None)\n```\n\nIn this code, all debugging information and errors are logged to the console.\n"
    },
    "40YYvpqHgNUA": {
      "id": "40YYvpqHgNUA",
      "path": "faqs/using-autorestart-in-your-squarecloud-application",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "How to use Auto Restart in Square Cloud",
        "description": "Learn how to use Auto Restart in Square Cloud to automatically restart your application in case it crashes.",
        "slug": "how-to-use-auto-restart-in-square-cloud"
      },
      "created_at": "2025-06-25T20:06:44.000Z",
      "updated_at": "2025-06-25T20:06:44.000Z",
      "content": "A **Square Cloud exclusive technology**, Auto Restart is a powerful feature in Square Cloud that allows your application to **automatically restart in case it crashes**. This ensures that **your app** remains **accessible and functional** even in the **event of unexpected failures**.\n\n## Enabling Auto Restart\n\nWith Auto Restart, follow these steps to enable it in your application's configuration file:\n\n<Steps>\n  <Step title=\"Config file\">\n    Create or edit your `squarecloud.app` or `squarecloud.config` file.\n\n    <Card title=\"How to create a configuration file\" href=\"/getting-started/config-file\">\n      The squarecloud.app file is a configuration file that will be used to configure your application; it will be used to define the name, description, version, main file, among other things.\n    </Card>\n  </Step>\n\n  <Step title=\"Locate parameter\">\n    Locate the `AUTORESTART` parameter in the configuration file. Or add it if it doesn't exist.\n  </Step>\n\n  <Step title=\"Set value\">\n    Set the value of `AUTORESTART` to `true`.\n\n    Here's an example of how to enable Auto Restart in your configuration file:\n\n    ```systemd squarecloud.app OR squarecloud.config\n    AUTORESTART=true\n    ```\n  </Step>\n</Steps>\n\n## How Auto Restart Works\n\nAuto Restart is a proactive feature that monitors the health of your application. If your application crashes or becomes unresponsive, Auto Restart takes action to get it back up and running.\n\n<Steps>\n  <Step title=\"Application goes down\">\n    When your application crashes or becomes unresponsive, Auto Restart detects the issue if AUTORESTART is enabled in your configuration file.\n  </Step>\n\n  <Step title=\"Application Uptime Verification\">\n    If the **application uptime is > 60 seconds**, will proceed to next step.\n  </Step>\n\n  <Step title=\"Application Exit Status Verification\">\n    If the **application exit status is 1**, will proceed to next step.\n  </Step>\n\n  <Step title=\"Application Recent Restart Verification\">\n    If the **application didn't restart in the last 60 minutes**, will proceed to next step.\n  </Step>\n\n  <Step title=\"Application Exception Verification\">\n    If the application logs contain any of the excluded errors, Auto Restart will not restart the application.\n\n    Examples of excluded errors include:\n\n    <CodeGroup>\n      ```json SyntaxError\n      SyntaxError: Unexpected token 'X'..\n      SyntaxError: Unexpected identifier 'X'..\n      SyntaxError: Invalid or unexpected token 'X'..\n      ```\n\n      ```json Version didn't find\n      npm ERR! notarget No matching version found for\n      ERROR: Could not find a version that satisfies the requirement\n      And variations of this error.\n      ```\n\n      ```json Module not found\n      Error: Cannot find module 'X'\n      Module not found: Can't resolve 'X' in 'Y'\n      And variations of this error.\n      ```\n\n      ```json Invalid dependency file\n      ERROR: Invalid requirement: 'X'\n      ERROR: Could not open requirements file: 'X'\n      npm ERR! code EJSONPARSE... npm ERR! Failed to parse json\n      And variations of this error.\n      ```\n    </CodeGroup>\n\n    If the application logs contain any of these errors, Auto Restart will not restart the application.\n  </Step>\n\n  <Step title=\"Application Restart\">\n    AUTORESTART automatically restarts your application to bring it back. 😉\n    <Info>Cooldown between restarts is 60 minutes.</Info>\n  </Step>\n</Steps>\n\n## Best Practices\n\nHere are some best practices to make the most of Auto Restart:\n\n- Regularly review your application's logs to understand the reasons for any crashes or restarts. This can help you identify and address underlying issues.\n- Keep your MAIN file and memory allocation parameters up-to-date to ensure optimal performance and resource usage.\n\n## Conclusion\n\nAuto Restart in Square Cloud is a valuable feature that enhances the reliability of your application. By automatically handling crashes and unresponsiveness, it helps maintain a seamless user experience. Ensure that you have a plan with Auto Restart enabled and configure it in your `squarecloud.app` or `squarecloud.config` file to make the most of this feature.\n"
    },
    "FAXZCLR37apW": {
      "id": "FAXZCLR37apW",
      "path": "set-up/domain",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "How to set up your custom domain",
        "description": "Learn how to configure your domain on Square Cloud",
        "slug": "how-to-set-up-your-custom-domain"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Introduction\n\n\\-- To configure your domain, you need to have the Standard plan or higher. You can purchase it on various domain registration platforms like:\n\n- [Registro.br](https://registro.br/)\n- [Square Space](https://squarespace.com/) \\*previously: Google Domains\n- [GoDaddy](https://www.godaddy.com/)\n- [Namecheap](https://www.namecheap.com/)\n\nChoose a platform that suits your needs and purchase your domain.\n\n## Configuring DNS on Cloudflare\n\n- Access the website where you purchased your domain, such as [Hostinger](https://www.hostinger.com.br/) or [Registro.br](https://registro.br/).\n- Next, go to [Cloudflare](https://cloudflare.com/), navigate to \"Websites\" and click on \"Add a site\".\n\n<Frame>\n  <img src=\"/images/articles/cloudflare/add-site.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\nAfter entering your domain, copy the provided nameservers and paste them on the website where you purchased the domain, in the DNS/Nameservers section.\n\n## Configuring your domain on Square Cloud\n\n- Choose the site you want to configure the domain for in the [dashboard](https://squarecloud.app/dashboard), then go to the **Settings** option and enter your domain in place of \"example.com.\"\n\n<Frame>\n  <img src=\"/images/articles/cloudflare/domain-setup.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n- Now that the domain is configured on Square Cloud, go back to Cloudflare, select your domain, and choose the DNS option.\n- Finally, point your domain to \"cname.squareweb.app\" with the type \"CNAME\", replacing \"name\" with your domain, and another with the type TXT with the value that will appear in \"DNS Configuration\" after clicking \"save\".\n\n<Frame>\n  <img src=\"/images/articles/cloudflare/record-dns.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n## Good to know\n\n### www redirect to your domain\n\n- To redirect www to your domain, create a new record with the name \"www\" and the type \"A\", pointing to 192.0.2.1 (cloudflare internal IP).\n- Go to the \"Page Rules\" option on Cloudflare and create a new rule with the following settings:\n\n<Frame>\n  <img src=\"/images/articles/cloudflare/page-rule-www.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n### Troubleshooting\n\n- If you receive the Unauthorized DNS error, try clearing your browser cache and accessing the site again in 5 minutes. If the issue persists, [contact our team](/company/support).\n\n<Frame>\n  <img src=\"/images/articles/cloudflare/unauthorized-dns.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n- If you receive the Cloudflare 1015 error, it means your domain is not configured correctly. Check your domain configuration and ensure it is correctly pointed to Square Cloud. If the issue persists, [contact our team](/company/support).\n"
    },
    "rjW9Lm3dvqMG": {
      "id": "rjW9Lm3dvqMG",
      "path": "set-up/git-integration",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "How to set up Git integration in your application",
        "description": "Learn how to configure Git integration on Square Cloud",
        "slug": "how-to-set-up-git-integration-in-your-application"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-25T19:58:28.000Z",
      "content": "## Getting the GitHub Access Token\n\n- Visit the [Personal access tokens](https://github.com/settings/tokens) page to obtain your access token. Click on **\"Generate new token\"** and choose the **\"classic\"** option.\n- When choosing the classic token option, **select only** the **\"repos\" option** and do **not set an expiration time**. Remember to give a name to your token so that you can identify it later.\n\n<Frame>\n  <img src=\"/images/articles/github/new-personal-access-token.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n- Finally, click on **\"Generate token\"** at the bottom of the page. Your access token will be displayed for you to **copy**.\n\n<Frame>\n  <img src=\"/images/articles/github/copy-access-token.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n## Configuring the Access Token in Square Cloud\n\n- After obtaining the access token, go to the [dashboard](https://squarecloud.app/dashboard), select your app, navigate to the Deploy section, and **paste your token in the corresponding field**. Click on **\"Save\"**.\n\n<Frame>\n  <img src=\"/images/articles/github/deploy-webhook-git.gif\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n- After saving, a URL webhook will be displayed that **you need to copy**.\n\n## Configuring the Square Cloud Webhook on GitHub\n\n- Now, access your application's repository (which can be private or public) and go to **\"Deploy\"**. Then, click on **\"Webhooks\"** and then on **\"Add Webhook\"**.\n- Paste your webhook in the Payload URL field, set the Content Type to **application/json**, and click on **\"Add Webhook\"**.\n\n<Frame>\n  <img src=\"/images/articles/github/add-webhook.gif\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n## Setting a branch for webhook\n\n- If you want to set a branch for the webhook, you can set a query parameter in the webhook URL.\n- Access the **webhook Payload URL** field in your GitHub repository and insert on the end of the webhook URL `?branch=name` where `name` is the name of the desired branch.\n\n<Note>\n  In this example, the desired branch will be `main`\n</Note>\n\n<Frame>\n  <img src=\"/images/articles/github/setting_branch.gif\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n## Deploy\n\n- If you have followed all the steps correctly, simply commit to your repository. Your application on Square Cloud will be updated.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "MSr4udchT5XR": {
      "id": "MSr4udchT5XR",
      "path": "faqs/troubleshooting/ABUSE_REQUESTS",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Solving ABUSE_REQUESTS",
        "description": "Learn how to address the ABUSE_REQUESTS error, caused by excessive requests to Discord and/or Amino APIs, and ensure your application runs smoothly.",
        "slug": "solving-abuserequests"
      },
      "created_at": "2025-06-25T20:06:44.000Z",
      "updated_at": "2025-06-25T20:06:44.000Z",
      "content": "## When does it occur?\n\nThe ABUSE\\_REQUESTS error occurs when your application is shut down due to a high volume of requests made to the Discord and/or Amino APIs. This may result from inefficient coding practices, lack of caching mechanisms, or surpassing the allocated request limits.\n\n```bash\n[SQUARE-SHIELD] ABUSE_REQUESTS\n```\n\n## Why does it occur?\n\nThis error typically arises when your application exceeds the permissible limits for making requests to the Discord and/or Amino APIs. It could be a consequence of a rapid increase in user activity or inefficient coding that generates an excessive number of API calls.\n\n## How to fix\n\nAddressing the ABUSE\\_REQUESTS error involves monitoring and optimizing the sections of your code responsible for API requests, implementing effective caching mechanisms, and, if necessary, requesting an increase in your API request limit through the official support channels.\n\n### Monitor and Optimize Your Code\n\n- Identify Problematic Code: Use logging tools or profiling to pinpoint sections of your code that generate a large number of API requests.\n- Optimize API Calls: Review and optimize the code responsible for API calls. Minimize unnecessary requests and ensure that each call is essential for your application's functionality.\n\n### Implement Caching Mechanisms\n\n- Use Local Caching: Store frequently requested data locally to avoid unnecessary API calls. This reduces the load on the servers and improves response times.\n- Set Expiry Times: Implement caching with expiration times to ensure that your application fetches fresh data when necessary while minimizing the number of API requests.\n\n### Request an Increase in Request Limit\n\nIf your application genuinely requires a higher API request limit, consider reaching out to the Discord and/or Amino support channels to request an increase. Provide justifications for the increased limit and any measures you've taken to optimize your code.\n\n### Keep Your Application Updated\n\nEnsure your application is using the latest version of any libraries or SDKs interacting with the APIs. Regularly check for updates, as developers often release new versions to address performance issues and improve efficiency.\n\n```bash Update discord.js\nnpm install discord.js@latest\n# or update in your package.json\n```\n\n```bash Update discord.py\npip install discord.py\n# or update in your requirements.txt\n```\n\n### Test and Restart Your Application\n\nAfter making the necessary changes, thoroughly test your application to ensure that the modifications effectively reduce the number of API requests. Additionally, restart your application to apply the updates and monitor its performance.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "xLeDzdCaI4Sz": {
      "id": "xLeDzdCaI4Sz",
      "path": "faqs/troubleshooting/BETTER_SQLITE3_ERROR",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Solving 'Could not locate the bindings file'",
        "description": "Learn how to resolve the 'Could not locate the bindings file' issue in your application.",
        "slug": "solving-could-not-locate-the-bindings-file"
      },
      "created_at": "2025-06-25T20:06:44.000Z",
      "updated_at": "2025-06-25T20:06:44.000Z",
      "content": "## When does it occur?\n\nThis issue happens when the `better-sqlite3` library or a library that depends on it, like `quick.db`, is not updated.\n\n```bash\nError: Could not locate the bindings file. Tried:\n → /application/node_modules/better-sqlite3/build/better_sqlite3.node\n [...]\n```\n\n## Why does it occur?\n\nThis error occurs because the `better-sqlite3` library has not been updated to the latest version. In `better-sqlite3` **11.x.x and earlier**, the library **was not support Node.js LTS v22**.x.x.\n\n## How to fix\n\nTo fix this issue, you need to update the `better-sqlite3` library to the latest version. Remember to update libraries that depend on `better-sqlite3`, like `quick.db`.\n\n### Check the latest versions of the libraries:\n\n- [npm better-sqlite3](https://www.npmjs.com/package/better-sqlite3)\n- [npm quick.db](https://www.npmjs.com/package/quick.db)\n\n### Update the `better-sqlite3` in your `package.json`\n\nAfter checking the latest version of the library, you can update it in your `package.json`. For example, if the current version is 11.10.0, you can use the following:\n\n```json Update manually in your package.json\n\"better-sqlite3\": \"^11.10.0\",\n\"quick.db\": \"^9.1.7\" // or any other library that depends on better-sqlite3\n```\n\n```bash Update using the terminal\nnpm install better-sqlite3@latest\n```\n\n### Removing files for a clean installation\n\nAfter updating your `package.json`, you should remove the files and folders: `node_modules`, `package-lock.json`, and the `.npm` folder.\n\n### Reboot Your Application\n\nIn conclusion, simply restart your application by clicking on the blue button. If you have followed all the steps correctly, your application should no longer encounter this error.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "ngei0Mc6m4kH": {
      "id": "ngei0Mc6m4kH",
      "path": "faqs/troubleshooting/INVALID_DEPENDENCY",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Solving INVALID_DEPENDENCY",
        "description": "Learn how to resolve the Solving INVALID_DEPENDENCY issue in your application.",
        "slug": "solving-invaliddependency"
      },
      "created_at": "2025-06-25T20:06:44.000Z",
      "updated_at": "2025-06-25T20:06:44.000Z",
      "content": "## When does it occur?\n\nThis issue occurs when your dependency file could not be located in the root of your application.\n\n## Why does it occur?\n\nThis issue occurs when your dependency file could not be located in the root of your application. This can happen when your dependency file does not exist or its nominated with an extra `.txt`.\n\n## How to fix\n\n### For Node.js (package.json)\n\n1. **Navigate to the root directory of your project:**\n   Ensure that you are in the main directory of your application.\n\n2. **Check for the presence of `package.json`:**\n   Verify whether the `package.json` file exists in the root directory. If it is not present, create one using the following command:\n   ```bash\n   npm init -y\n   ```\n   This command initializes a default `package.json` file.\n\n3. **Ensure correct naming:**\n   Confirm that the file is named exactly as `package.json` and does not have any additional extensions (e.g., `package.json.txt`). If there are any discrepancies, rename the file accordingly.\n\n### For Python (requirements.txt)\n\n1. **Navigate to the root directory of your project:**\n   Make sure you are in the main directory of your application.\n\n2. **Check for the presence of `requirements.txt`:**\n   Confirm whether the `requirements.txt` file exists in the root directory. If it is missing, create one.\n\n3. **Ensure correct naming:**\n   Verify that the file is named exactly as `requirements.txt` without any additional extensions (e.g., `requirements.txt.txt`). If the name is incorrect, rename the file accordingly.\n\n4. **Add dependencies to the file:**\n   Open the `requirements.txt` file and add the necessary dependencies for your Python project. For example:\n\n```plaintext requirements.txt\ndiscord.py\n```\n\n### Additional Tips:\n\n- **Double-check file extensions:**\n  Ensure that the file extensions are correct (e.g., `.json` for Node.js, `.txt` for Python). Incorrect extensions might lead to the `INVALID_DEPENDENCY` error.\n\n- **Review documentation and guides:**\n  Consult the documentation for your specific programming language ([Node.js](/articles/getting-started-with-nodejs)/[Python](/articles/getting-started-with-python)).\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "JtQte28kfkSi": {
      "id": "JtQte28kfkSi",
      "path": "faqs/troubleshooting/LACK_OF_CPU",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Solving LACK_OF_CPU",
        "description": "Learn how to resolve the LACK_OF_CPU issue in your application.",
        "slug": "solving-lackofcpu"
      },
      "created_at": "2025-06-25T20:06:44.000Z",
      "updated_at": "2025-06-25T20:06:44.000Z",
      "content": "## When does it occur?\n\nThis issue occurs when your application is using more CPU than is available.\n\n```bash\n[SQUARE-SHIELD] LACK_OF_CPU\n```\n\n## Why does it occur?\n\nThis issue occurs when your application is using more CPU than is available. This can happen when your application is under heavy load, or when your application is not optimized to use less CPU.\n\n## How to fix\n\nThe CPU allocated to your application is determined by your current plan. To address this, consider upgrading to a higher plan on the [plans page](https://squarecloud.app/plans). Alternatively, optimize your application to reduce CPU usage.\n\n### Resubmitting your application\n\nAfter upgrading your plan, it's important to remove your application and resubmit it to reflect the updated CPU allocation.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "Ro9RTISVKTvt": {
      "id": "Ro9RTISVKTvt",
      "path": "faqs/troubleshooting/LACK_OF_RAM",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Solving LACK_OF_RAM",
        "description": "Learn how to resolve the LACK_OF_RAM issue in your application.",
        "slug": "solving-lackofram"
      },
      "created_at": "2025-06-25T20:06:44.000Z",
      "updated_at": "2025-06-25T20:06:44.000Z",
      "content": "## When does it occur?\n\nThis issue occurs when your application is using more RAM than is available.\n\n```bash\n[SQUARE-SHIELD] LACK_OF_RAM\n```\n\n## Why does it occur?\n\nThis issue occurs when your application is using more RAM than is available. This can happen when your application is using more RAM than is available on your current plan.\n\n## How to fix\n\nNavigate to the file manager and locate the `squarecloud.app/config` file.\n\n1. Open the file and locate the `MEMORY` field.\n2. Increase the value of the `MEMORY` field. The value is in megabytes (MB).\n3. We recommend increasing the value by 50% of the current value. For example, if the current value is `512`, increase it to `768`.\n\nIf you are already using the maximum available RAM based on your current plan, consider upgrading to a higher plan by visiting the [plans page](https://squarecloud.app/plans).\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "ebR727IPQ8rc": {
      "id": "ebR727IPQ8rc",
      "path": "faqs/troubleshooting/MODULE_NOT_FOUND",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Solving MODULE_NOT_FOUND",
        "description": "Learn how to resolve the MODULE_NOT_FOUND issue in your application.",
        "slug": "solving-modulenotfound"
      },
      "created_at": "2025-06-25T20:06:44.000Z",
      "updated_at": "2025-06-25T20:06:44.000Z",
      "content": "## When does it occur?\n\nThis error occurs when your application tries to use a library that is not installed in the environment.\n\n```bash javascript\nError: Cannot find module 'discord.js'\n```\n\n```bash python\nModuleNotFoundError: No module named 'discord.py'\n```\n\n## Why does it occur?\n\nThis can happen when you try to use a library that is not installed by default in the environment. For example, the `discord.js` library is not installed by default in the JavaScript environment.\n\n## How to fix\n\nTo fix this, you need to add the missing library to your project's dependency files. These files list the libraries that will be installed in the environment. In the case of Python, this file is called `requirements.txt`, and for JavaScript, it is called `package.json`.\n\nHere is an example of the content of these files after adding the missing libraries:\n\n```json package.json \n{\n  \"name\": \"my-app\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"discord.js\": \"14.14.1\",\n    // other dependencies...\n  }\n}\n```\n\n```txt requirements.txt\ndiscord.py\n# other dependencies...\n```\n\n### Reboot Your Application\n\nAfter adding the necessary libraries to your project's dependency files, you should reboot your application. This allows your environment to recognize and install the newly added libraries.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "YGrRf0Gs9C5B": {
      "id": "YGrRf0Gs9C5B",
      "path": "faqs/troubleshooting/TOKEN_INVALID",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Solving TOKEN_INVALID",
        "description": "Learn how to resolve the TOKEN_INVALID code error and ensure smooth communication with the Discord API.",
        "slug": "solving-tokeninvalid"
      },
      "created_at": "2025-06-25T20:06:44.000Z",
      "updated_at": "2025-06-25T20:06:44.000Z",
      "content": "## When does it occur?\n\nThe authentication token for your Discord bot was not found or appears to be invalid. This might happen if the token is regenerated, revoked, or the bot's access to the server is restricted.\n\n```bash discord.js\nError [TOKEN_INVALID]: An invalid token was provided.\n```\n\n```bash discord.py\nLoginFailure: Improper token has been passed.\n```\n\n## Why does it occur?\n\nYou will encounter this error when your application attempts to authenticate with the Discord API using an invalid or outdated bot token.\n\n## How to fix\n\nEnsure that the token provided when creating the Discord.js client is accurate and up-to-date. If you suspect the token might be invalid, regenerate it on the Discord Developer Portal.\n\n### Regenerate the Token\n\nIf you have confirmed that the current token is invalid or compromised, generate a new one on the [Discord Developer Portal](https://discord.com/developers/applications).\n\n### Update the Token in Your Code\n\nIf you are using a `.env` file to store the token, make sure to update the file with the new token.\n\nGenerally, the token is stored in `.env` or `config,json` files. If you are using a different method to store the token, update the code accordingly.\n\n### Keep the library up to date\n\nEnsure you are using the latest version of your library. Developers regularly update the library to fix bugs and address compatibility issues.\n\n```bash Update discord.js\nnpm install discord.js@latest\n# or update in your package.json\n```\n\n```bash Update discord.py\npip install discord.py\n# or update in your requirements.txt\n```\n\n### Reboot Your Application\n\nAfter implementing the changes, restart your application to apply the updates. This ensures that the new token and any code modifications take effect.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "sMRA7xy6EsnP": {
      "id": "sMRA7xy6EsnP",
      "path": "faqs/troubleshooting/access-website",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Troubleshooting Access Issues on Website or API",
        "description": "Discover how to resolve issues when accessing your website or API.",
        "slug": "troubleshooting-access-issues-on-website-or-api"
      },
      "created_at": "2025-06-25T20:06:44.000Z",
      "updated_at": "2025-06-25T20:06:44.000Z",
      "content": "## Unauthorized\n\n- There are 2 situations that can result in this message when trying to access a website/API:\n\n1. The URL of the site you tried to access is not hosted on Square Cloud. Any subdomain of a site that is not hosted on Square Cloud and is attempted to be accessed will receive the message \"Unauthorized\". If you added the \"SUBDOMAIN\" field after deploying your application, this field will not be read, and the URL will not exist because this field is only read during the deployment. Therefore, you need to remove and redeploy your application with this field correctly configured.\n\n2. If you have recently hosted your site, please wait 1 minute. Square Cloud is finalizing the configurations for your site. After this period, try accessing it again.\n\n<Frame>\n  <img src=\"/images/articles/cloudflare/unauthorized-dns.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\n## Timeout\n\n- There are 4 situations that can result in this message when trying to access a website/API:\n\n1. Your website or API may have errors preventing it from responding properly.\n\n2. If the website or API is offline, you will also receive this message. It's important to check the logs to identify any potential errors.\n\n3. In Square Cloud, the default port for websites and APIs is port `80` for HTTP traffic. If your website or API is using a different port, you may encounter this error message.\n\n4. If you do not correctly configure the host as `0.0.0.0` when hosting your site, this can lead to access errors.\n\n<Frame>\n  <img src=\"/images/articles/cloudflare/timeout.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "vLqdFFMM0Bd0": {
      "id": "vLqdFFMM0Bd0",
      "path": "faqs/troubleshooting/lavalink-closed-abnormally",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Solving Lavalink Closed Abnormally issue",
        "description": "Due to recent Lavalink updates you may come across the following error: Lavalink Closed Abnormally. This article will help you solve this issue.",
        "slug": "solving-lavalink-closed-abnormally-issue"
      },
      "created_at": "2025-06-25T20:06:44.000Z",
      "updated_at": "2025-06-25T20:06:44.000Z",
      "content": "## When does it occur?\n\nWhen you are trying to connect your Lavalink server to your app hosted on Square Cloud, you may come across the following error:\n\n```\nError: Unexpected server response: 400\nError: WebSocket closed abnormally with code 1006.\n```\n\n## Why does it occur?\n\nYou will receive this error if you are using a Lavalink version that is not compatible with the library you are using.\nFor example, if you are using the Lavalink version 4.0.0, you will receive this error if you are using the Lavalink client version 3, as the Lavalink version 4 is entirely REST.\n\n## How to fix\n\nTo fix this error, you will need to update your Lavalink client to the latest version. Or use a Lavalink version that is compatible with your Lavalink client.\n\n### Bonus Tips:\n\n- Remember to open your Lavalink server in port 80.\n- Connect in your Lavalink server using port 443 and option `secure: true`.\n\nCongratulations! You have successfully solved the Lavalink Closed Abnormally issue. Now you can connect your Lavalink to your app hosted on Square Cloud.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    },
    "IhpjAX2I937L": {
      "id": "IhpjAX2I937L",
      "path": "faqs/troubleshooting/whitelist-mongodb",
      "author": {
        "name": "Square Cloud"
      },
      "metadata": {
        "title": "Configuring MongoDB Atlas Whitelist",
        "description": "Due to how Square works in a way that has a dynamic IP, by an exclusive technology, it is impossible to provide you with an IP, since every restart in the application, you receive a unique IP.",
        "slug": "configuring-mongodb-atlas-whitelist"
      },
      "created_at": "2025-06-25T20:06:44.000Z",
      "updated_at": "2025-06-25T20:06:44.000Z",
      "content": "**Square Cloud** stands out with its **dynamic IP allocation**, assigning a **unique address** with **each application restart**. Unlike static IPs, this dynamic approach enhances security by constantly changing the network footprint, **making it more resilient against potential threats**.\n\n## When does it occur?\n\nWhen you are trying to connect your MongoDB Atlas database to your app hosted on Square Cloud, you may come across the following error:\n\n```\nMongoNetworkError: connection 0 to shard-xxx-xxx.mongodb.net:27017 closed\n```\n\n## Why does it occur?\n\nYou will receive this error message if you have not included the MongoDB Atlas addresses, the IP where your app is hosted, on the whitelist.\n\n## How to fix\n\nTo fix this error, you need to whitelist the IP address, according to the [mongodb documentation](https://www.mongodb.com/docs/atlas/security/ip-access-list/), you need to whitelist 0.0.0.0/0 IP address.\n\n<Frame>\n  <img src=\"/images/troubleshooting/mongodb-whitelist.png\" style={{ borderRadius: '0.2rem' }} />\n</Frame>\n\nCongratulations! You have successfully whitelisted the IP address 0.0.0.0/0 for your MongoDB Atlas database. Now you can connect your database to your app hosted on Square Cloud.\n\nIf you continue to experience any issues, please don't hesitate to [contact our support team](/company/support).\n"
    }
  },
  "snippets": {
    "_snippets/requirements-txt": {
      "path": "_snippets/requirements-txt",
      "content": "#### 📝 Creating the requirements.txt File\n\nTo create your requirements.txt file, you need to list all your dependencies inside the file.\nHere’s how it would look with the Flask and waitress dependencies.\n\n```txt\nflask\nwaitress\n```\n\nNote that by listing this way, the package manager will install the latest version of each package.\nIf you want a specific version, use double equals followed by the corresponding version number.\n\n```txt\nflask==3.1.0\nwaitress==3.0.2\n```\n\nIf you use the pip freeze command, it will list not only your dependencies but also their dependencies.\nFor example, if you have discord-py installed, pip will also list aiohttp, which is a dependency of the\ndiscord-py library. This results in a larger file than necessary and, if used in the global environment, it may\ninclude unnecessary dependencies from other projects."
    }
  }
}