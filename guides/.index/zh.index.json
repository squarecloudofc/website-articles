{
  "articles": {
    "6bxI5kS3rBKK": {
      "id": "6bxI5kS3rBKK",
      "path": "deploys/discord-bot",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "discord"
        ]
      },
      "metadata": {
        "title": "在 Square Cloud 上托管 Discord 机器人",
        "description": "本文指导您在 Square Cloud 上创建并托管 Discord 机器人。",
        "slug": "在-square-cloud-上托管-discord-机器人"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## 介绍\n\n- 在开始编码之前，您需要在 Discord 上正确设置您的机器人。首先，您需要拥有一个 Discord 帐户。如果您还没有，可以访问 [Discord 官方网站](https://discord.com/) 创建一个。\n- 接下来，您需要在 Square Cloud 上创建一个帐户，可通过 [注册页面](https://squarecloud.app/signup) 完成。您可以使用电子邮件创建帐户。\n- 最后，您的帐户需要启用一个有效的付费计划。您可以在[此处](https://squarecloud.app/plans)查看我们的计划并根据需求购买。\n\n<AccordionGroup>\n  <Accordion title=\"入门\" icon=\"rocket\" iconType=\"solid\">\n    首先，转到[开发者门户](https://discord.com/developers/applications)，点击“New Application”。然后，为您的机器人选择一个名称并点击“Create”创建它。\n\n    <Frame>\n      <img src=\"/images/articles/discord/getting-started.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"获取令牌\" icon=\"key\" iconType=\"solid\">\n    创建机器人后，就该获取令牌了。为此，转到“Bot”选项卡，点击“Reset Token”生成令牌。最后，复制该令牌以便稍后在代码中使用。\n\n    <Frame>\n      <img src=\"/images/articles/discord/getting-the-token.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"启用特权意图\" icon=\"message\" iconType=\"solid\">\n    现在您已经拥有机器人的令牌，需要启用必要的意图。为此，请仍然在“Bot”选项卡中，向下滚动并查找“Privileged Gateway Intents”。在此处启用以下意图：\n\n    <Frame>\n      <img src=\"/images/articles/discord/intent.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n<Warning>请记住保密您的机器人令牌，因为它可以用来控制您的机器人。</Warning>\n\n# 使用封装库创建机器人\n\n<Tabs>\n  <Tab title=\"Discord.js\">\n    1. 确保您的系统已安装 Node.js。如果没有，请从 [Node.js 官方网站](https://nodejs.org/) 下载。\n    2. 使用 `npm init` 初始化一个新的 Node.js 项目。这将在您的项目中创建一个 `package.json` 文件：\n\n    ```bash\n    npm init -y\n    ```\n\n    3. 使用 npm 安装 discord.js 库：\n\n    ```bash\n    npm install discord.js\n    ```\n\n    4. 创建一个新的 JavaScript 文件（例如 `index.js`），并添加以下代码以创建一个基本的 Discord 机器人：\n\n    ```javascript index.js\n    const { Client, GatewayIntentBits } = require(\"discord.js\");\n\n    const client = new Client({\n      intents: [\n        GatewayIntentBits.Guilds,\n        GatewayIntentBits.GuildMessages,\n        GatewayIntentBits.MessageContent,\n      ],\n    });\n\n    client.on(\"ready\", () => {\n      console.log(`${client.user.tag}!`);\n    });\n\n    client.on(\"messageCreate\", (message) => {\n      if (message.content === \"!hello\") {\n        message.reply(\"Hello!\");\n      }\n    });\n\n    client.login(\"your token here\");\n    ```\n  </Tab>\n\n  <Tab title=\"Discord.py\">\n    1. 确保您的系统已安装 Python。如果没有，请从 [Python 官方网站](https://www.python.org/) 下载。\n    2. 使用 pip 安装 discord.py 库：\n\n    ```bash\n    pip install discord.py\n    ```\n\n    3. 创建一个新的 Python 文件（例如 `main.py`），并添加以下代码以创建一个基本的 Discord 机器人：\n\n    ```python main.py\n    import discord\n    from discord.ext import commands\n\n    intents = discord.Intents.default()\n    intents.message_content = True\n\n    client = commands.Bot(command_prefix='!', intents=intents)\n\n    @client.event\n    async def on_ready():\n        print(f'{client.user}')\n\n    @client.command()\n    async def hello(ctx):\n        await ctx.reply('Hello!')\n\n    client.run('your token here')\n    ```\n\n    4. 创建一个 `requirements.txt` 文件以列出项目所需的所有外部库：\n\n    ```txt requirements.txt\n    discord.py\n    ```\n  </Tab>\n</Tabs>\n\n## 创建 Square Cloud 配置文件\n\n<Card title=\"了解更多：如何制作 Square Cloud 配置文件。\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  `squarecloud.app` 文件是一个配置文件，用于配置您的应用；它将定义名称、描述、版本、主文件等。\n</Card>\n\n## 配置 START 字段\n\n<Warning>只有在您非常确定操作时才使用此字段。</Warning>\n\n在 Square Cloud 配置文件中，**START** 字段是可选的，仅在您使用自定义脚本启动机器人时才需要。在示例中，**START** 字段并非必需。\n\n## 将项目上传到 Square Cloud\n\n完成所有步骤后，将应用文件连同配置文件打包成 zip，然后在 [Upload](https://squarecloud.app/dashboard/upload) 上传您的机器人。记得包括 `requirements.txt` 或 `package.json`，但不要包含像 `__pycache__` 或 `node_modules` 这样的文件夹。有关不必要文件的更多信息，请参阅 [automatic-file-deletion-when-deploying-an-application-on-squarecloud](https://docs.squarecloud.app/faqs/automatic-file-deletion-when-deploying-an-application-on-squarecloud)。\n\n## 测试机器人\n\n如果一切设置正确，下一步是邀请您的机器人进行测试。为此，请执行以下步骤：\n\n1. 访问 [开发者门户](https://discord.com/developers/applications)。\n2. 选择您的机器人。\n3. 转到 “OAuth2” 选项卡。\n4. 进入 “OAuth2 URL Generator”。\n5. 勾选 “bot” 选项。\n6. 选择邀请机器人时需授予的权限。\n7. 在权限下方，将生成一个邀请链接，如下所示：\n\n   ```txt\n   https://discord.com/oauth2/authorize?client_id=00000000000000&permissions=8&scope=bot\n   ```\n\n请记住，将 URL 中的 `client_id` 替换为您的机器人实际 ID。根据所需权限，`permissions` 值也可能需要调整。\n\n现在，要测试一切是否正常，请在服务器上执行以下命令：`!hello`。\n\n<Frame>\n  <img src=\"/images/articles/discord/testing-bot.png\" style={{ borderRadius: \"0.2rem\" }} />\n</Frame>\n\n## 附加资源\n\n有关使用 discord.py 和 discord.js 创建机器人的更多信息，请访问 [discord.py 官方文档](https://discordpy.readthedocs.io/en/latest/) 和 [discord.js 官方指南](https://discordjs.guide/)。在那里，您将找到详细的指南、教程和 API 文档，帮助您充分利用这些库。\n\n如果您仍然遇到任何问题，请随时 [联系我们的支持团队](/company/support)。\n"
    },
    "s8otOA6S1DKJ": {
      "id": "s8otOA6S1DKJ",
      "path": "deploys/django-application",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "website"
        ]
      },
      "metadata": {
        "title": "在 Square Cloud 上托管 Django 应用",
        "description": "本文指导您在 Square Cloud 上创建并托管一个 Django 应用。",
        "slug": "在-square-cloud-上托管-django-应用"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## 创建新的 Django 项目\n\n- 在开始之前，请确保你的系统已安装 Python 和 pip。如果尚未安装，可从 [Python 官方网站](https://www.python.org/) 和 [Pip 官方网站](https://pypi.org/) 下载。\n- 接下来，你需要在 Square Cloud 创建一个账户，可通过 [注册页面](https://squarecloud.app/signup) 完成。你可以使用电子邮件创建账户。\n- 最后，你的账户需要拥有一个已激活的付费套餐。你可以在 [此处](https://squarecloud.app/plans) 查看并购买适合需求的套餐。\n\n安装好 Python 和 pip 后，你就可以创建新的 Django 项目。首先，使用 pip 安装 Django：\n\n\\`\\`\\`bash\npip install django\n\\`\\`\\`\n\n然后，创建一个新的 Python 文件（例如 \\`app.py\\`），并添加以下代码来创建一个基础 Django 应用：\n\n\\`\\`\\`python app.py\nfrom django.conf import settings\nfrom django.http import HttpResponse\nfrom django.urls import path\nfrom django.core.wsgi import get\\_wsgi\\_application\n\n# 基本的 Django 设置\n\nsettings.configure(\nDEBUG=False,  # 关闭调试模式\nSECRET\\_KEY='mysecretkey',  # 设置你的密钥\nALLOWED\\_HOSTS=\\['\\*'],  # 为简单起见允许所有主机\nROOT\\_URLCONF=**name**,  # 将根 URL 配置设置为此模块\nMIDDLEWARE\\_CLASSES=(),  # 使用空元组以禁用中间件\n)\n\n# 简单视图\n\ndef index(request):\nreturn HttpResponse(\"Hello world!\")  # 返回简单的 HTTP 响应\n\n# URL 配置\n\nurlpatterns = \\[\npath('', index),  # 将根 URL 映射到 index 视图\n]\n\n# WSGI 应用\n\napplication = get\\_wsgi\\_application()\n\n# WSGI 服务器\n\nif **name** == \"**main**\":\nfrom wsgiref.simple\\_server import make\\_server\nhttpd = make\\_server('', 80, application)  # 使用 WSGI 服务器在 80 端口提供应用\nprint(\"Django 服务器正在 80 端口运行...\")\nhttpd.serve\\_forever()  # 启动服务器\n\\`\\`\\`\n\n在上面的代码中，我们创建了一个基本路由，当访问时返回 “Hello, World!”。应用被配置为运行在 80 端口，即 HTTP 流量的默认端口。\n\n## 使用 requirements.txt 文件管理依赖\n\n\\`requirements.txt\\` 文件列出了项目所需的所有外部库。你应列出项目将使用的所有库，排除诸如 \\`random\\` 和 \\`datetime\\` 这类原生库。提交应用到 Square Cloud 时应包含此文件。\n\n\\`\\`\\`txt requirements.txt\ndjango\n\\`\\`\\`\n\n## 创建 squarecloud 配置文件\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  squarecloud.app 文件是用于配置应用的文件；它用于定义名称、描述、版本、主文件等信息。\n</Card>\n\n## 配置 START 字段\n\n在 Square Cloud 配置文件中，**START** 字段是可选的，仅当你使用自定义脚本启动网站时才需要。在提供的示例中，**START** 字段不是必需的。\n\n## 在上传项目之前购买套餐\n\n上传项目到 Square Cloud 之前，请先购买套餐。你选择的套餐类型将取决于应用所需的资源。你可以在 [此处](https://squarecloud.app/plans) 查看我们的套餐。\n\n<Note>**想知道托管 Django 应用需要多少 RAM 和 CPU 吗？** 别担心，我们会帮助你。Django 是一个高级 Python Web 框架，鼓励快速开发和简洁、实用的设计。它由经验丰富的开发人员构建，处理了大量 Web 开发的繁琐工作，让你专注于编写应用，而无需重复造轮子。我们的 **[Standard](https://squarecloud.app/pay/standard)** 套餐提供 **4GB** RAM 和 **4vCPU**，足以满足大多数 Django 应用需求。不过，如果你正在开发更大的项目并需要额外的稳定性，建议考虑 Pro 套餐。凭借更多资源，即使在高峰期也能保持稳定。如需购买，请点击 [这里](https://squarecloud.app/pay/pro)。</Note>\n\n## 将项目上传到 Square Cloud\n\n准备好项目文件后，你现在可以将其上传到 Square Cloud 并托管你的项目。\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    访问 [Square Cloud\n    控制台](https://squarecloud.app/dashboard/upload) 并上传你的项目文件。\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        首先，需要在环境中安装 CLI。如果尚未安装，请在终端运行以下命令：\n\n        \\`\\`\\`\n        npm install -g @squarecloud/cli\n        \\`\\`\\`\n\n        如果已安装，建议更新。在终端运行以下命令：\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            \\`\\`\\`bash\n            squarecloud update\n            \\`\\`\\`\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            \\`\\`\\`bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            \\`\\`\\`\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        现在，为了认证并使用其他 CLI 命令，你可以在 [这里](https://squarecloud.app/account) 点击 \"Request API Key\" 获取授权密钥。获得授权密钥后，运行以下命令：\n\n        \\`\\`\\`bash\n        squarecloud login\n        \\`\\`\\`\n      </Step>\n\n      <Step title=\"Third Step\">\n        最后，使用 CLI 将应用部署到 Square Cloud，需要执行以下命令，并传入 zip 文件的路径：\n\n        \\`\\`\\`bash\n        squarecloud upload zip\n        \\`\\`\\`\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## 故障排除\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    如果你想为在 Square Cloud 托管的应用使用自定义域，注意默认情况下 URL 将类似 \\`https://mysite.squareweb.app/\\`。子域由配置文件中的 SUBDOMAIN 字段决定。不过，如果你更喜欢使用自定义域，如 \\`mysite.com\\`，则需要购买 \\`Standard\\` 套餐或更高套餐。我们在文章 [如何设置自定义域](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain) 中详细说明了每一步。\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    托管网站或 API 所需的最小 RAM 为 512MB。然而，根据你的 Django 应用的大小和复杂性，建议使用更大的 RAM 以避免 [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) 错误。\n  </Accordion>\n\n  <Accordion title=\"Temporary Access Denied\" icon=\"ban\" iconType=\"solid\">\n    如果在访问网站时收到 “Your access has been temporarily denied.” 消息，请稍等一段时间。如果问题仍然存在，请随时在 https://squarecloud.app/dashboard/support 联系我们。\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    如果收到 “Website took too long to respond...” 消息，请确保已正确设置应用的 80 端口。如果问题仍然存在，请在 https://squarecloud.app/dashboard/support 与我们联系。\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## 其他资源\n\n欲了解更多关于 Django 及其工具的信息，请访问 [Django 官方文档](https://docs.djangoproject.com/en/5.0/)。在那里你可以找到详细指南、教程和 API 文档，以充分利用 Django。\n\n如果你仍然遇到任何问题，请不要犹豫， [联系技术支持团队](/company/support)。\n"
    },
    "9n7micjyDln3": {
      "id": "9n7micjyDln3",
      "path": "deploys/express-application",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "nodejs"
        ]
      },
      "metadata": {
        "title": "在 Square Cloud 上托管 Express 应用",
        "description": "本文指导您在 Square Cloud 上创建并托管一个 Express 应用",
        "slug": "在-square-cloud-上托管-express-应用"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## 介绍\n\n- 在开始之前，请确保您的系统已安装 Node.js 和 npm。如果尚未安装，您可以从 [Node.js 官方网站](https://nodejs.org/) 下载。\n- 接下来，您需要在 Square Cloud 上创建一个帐户，可通过 [注册页面](https://squarecloud.app/signup) 完成。您可以使用电子邮件创建帐户。\n- 最后，您的帐户需要启用一个有效的付费计划。您可以在[此处](https://squarecloud.app/plans)查看我们的计划并根据需求购买。\n\n### 设置 Express\n\n要使用 Express，需要先安装它。运行以下命令：\n\n```bash\nnpm install express\n```\n\n### 创建 Express 项目\n\n要创建一个新的 Express 项目，请创建一个文件并写入以下代码：\n\n```javascript app.js\n// 引入 Express 模块\nconst express = require('express');\n\n// 创建一个新的 Express 应用\nconst app = express();\n\n// 将端口设置为 80\n// 端口 80 是 HTTP 流量的默认端口。\nconst port = 80;\n\n// 定义 '/' 路由的处理函数\n// 访问时将返回 'Hello World!'。\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\n// 让 Express 应用监听端口 80\napp.listen(port, () => {\n  // 一旦服务器在端口 80 上监听，此代码块将运行\n  console.log(`Example app listening on port \\${port}`);\n});\n```\n\n## 创建 squarecloud.app 配置文件\n\n<Card title=\"了解更多：如何制作 Square Cloud 配置文件。\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  `squarecloud.app` 文件是一个配置文件，用于定义应用的名称、描述、版本、主文件等。\n</Card>\n\n## 配置 START 字段\n\n在 Square Cloud 配置文件中，**START** 字段是可选的，仅在您使用自定义脚本启动网站或 API 时才需要。在示例中，**START** 字段并非必需。\n\n## 上传项目前购买计划\n\n在将项目上传到 Square Cloud 之前，您需要购买计划。所需计划类型取决于应用的资源需求。您可以在[此处](https://squarecloud.app/plans)查看我们的计划。\n\n<Note>**想知道托管 Express 应用需要多少内存和 CPU？** 别担心，我们来帮您。Express.js 是 Node.js 的一个框架，提供构建 Web 服务器的最小功能。它易于学习、高度灵活，适用于各种应用。我们的 **[Standard](https://squarecloud.app/pay/standard)** 计划提供 **4GB** RAM 和 **4vCPU**，足以满足大多数 Express 应用。但如果您需要更高稳定性，建议选择 Pro 计划。更多资源可确保高峰期平稳运行。购买请点击 [这里](https://squarecloud.app/pay/pro)。</Note>\n\n## 将项目上传到 Square Cloud\n\n准备好项目文件后，即可将其上传到 Square Cloud 并托管。\n\n<Tabs>\n  <Tab title=\"通过控制台上传\">\n    访问 [Square Cloud 仪表板](https://squarecloud.app/dashboard/upload) 并上传项目文件。\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"通过 CLI 上传\">\n    <Steps>\n      <Step title=\"第一步\">\n        需要先安装 CLI。如果尚未安装，请运行：\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        如果已安装，建议更新：\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux、macOS 和 WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"第二步\">\n        获取授权密钥，请在 [帐户页面](https://squarecloud.app/account) 点击“Request API Key”，然后运行：\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"第三步\">\n        最后，通过 CLI 部署应用，传入 zip 文件路径：\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## 故障排除\n\n<AccordionGroup>\n  <Accordion title=\"自定义域名\" icon=\"globe\" iconType=\"solid\">\n    如果想使用自定义域名，默认 URL 会是 `https://mysite.squareweb.app/`。子域名由 SUBDOMAIN 字段决定。若要使用 `mysite.com`，需购买 Standard 或以上计划。详见：[如何设置自定义域名](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain)。\n  </Accordion>\n\n  <Accordion title=\"最低内存要求\" icon=\"memory\" iconType=\"solid\">\n    托管网站或 API 的最低内存为 512MB。但根据 Express 应用的规模，可考虑更多内存以避免 [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) 错误。\n  </Accordion>\n\n  <Accordion title=\"临时访问被拒\" icon=\"ban\" iconType=\"solid\">\n    如果收到“Your access has been temporarily denied.”，请稍等片刻。如问题持续，请联系 https://squarecloud.app/dashboard/support。\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"网站响应超时...\" icon=\"clock\" iconType=\"solid\">\n    如果收到“Website took too long to respond...”，请确认已正确设置端口 80。如仍有问题，请联系 https://squarecloud.app/dashboard/support。\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## 附加资源\n\n有关 Express 及其工具的更多信息，请访问 [Express 官方文档](https://expressjs.com/)。在那里，您将找到详细的指南、教程和 API 文档，以帮助您充分利用 Express。\n\n如果仍遇到问题，请随时 [联系支持团队](/company/support)。\n"
    },
    "mUz0Qm8wdgsu": {
      "id": "mUz0Qm8wdgsu",
      "path": "deploys/fastify-application",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "nodejs",
          "fastify"
        ]
      },
      "metadata": {
        "title": "在 Square Cloud 上托管 Fastify 应用",
        "description": "本文指导您在 Square Cloud 上创建并托管一个 Fastify 应用",
        "slug": "在-square-cloud-上托管-fastify-应用"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## 引言\n\n- 开始之前，请确保系统已安装 Node.js 和 npm。若无，请从 [Node.js 官网](https://nodejs.org/) 下载。\n- 接着，通过 [注册页面](https://squarecloud.app/signup) 使用邮箱创建 Square Cloud 账号。\n- 最后，需要拥有激活的付费套餐。可在 [此处](https://squarecloud.app/plans) 查看并购买。\n\n### 设置 Fastify\n\n使用命令安装 Fastify：\n\n```bash\nnpm install fastify\n```\n\n该命令安装 `fastify` 包，便于终端使用。\n\n### 创建 Fastify 项目\n\n新建文件并输入：\n\n```javascript app.js\n// 导入 Fastify 模块\nconst fastify = require('fastify')({ logger: true });\n\n// 为 '/' 路由定义处理器\n// 访问时返回 'Hello, World!'\nfastify.get('/', async (request, reply) => {\n  return 'Hello World!';\n});\n\n// 让应用监听 80 端口\nfastify.listen({ port: 80 })\n  .then((address) => {\n    // 服务器开始监听 80 端口时执行\n    fastify.log.info(`Example app listening at \\${address}`);\n  })\n  .catch((err) => {\n    // 监听 80 端口出错时执行\n    fastify.log.error(err);\n    process.exit(1);\n  });\n```\n\n## 创建 squarecloud 配置文件\n\n<Card title=\"了解：如何为 Square Cloud 创建配置文件。\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  squarecloud.app 文件用于配置应用；定义名称、描述、版本、主文件等。\n</Card>\n\n## 配置 START 字段\n\n在配置文件中，**START** 字段可选，仅在使用自定义脚本启动站点或 API 时需要。本示例不需要。\n\n## 上传项目前需购买套餐\n\n上传前，请根据应用所需资源购买合适套餐。查看套餐 [此处](https://squarecloud.app/plans)。\n\n<Note>**想知道 Fastify 需要多少 RAM 和 CPU？** Fastify 拥有低开销、高度插件化并提供优秀开发体验，易学、灵活且适合生产环境。我们的 **[Standard](https://squarecloud.app/pay/standard)** 套餐提供 **4GB** RAM 和 **4vCPU**，足以满足大多数 Fastify 应用。若项目更大或需更高稳定性，请考虑 Pro 套餐。购买 [这里](https://squarecloud.app/pay/pro)。</Note>\n\n## 将项目上传到 Square Cloud\n\n准备好文件后，即可上传并托管项目。\n\n<Tabs>\n  <Tab title=\"仪表盘上传\">\n    访问 [Square Cloud 仪表盘](https://squarecloud.app/dashboard/upload) 上传文件。\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI 上传\">\n    <Steps>\n      <Step title=\"第一步\">\n        安装 CLI（若未安装）：\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        已安装则更新：\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux、macOS 与 WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"第二步\">\n        在 [此处](https://squarecloud.app/account) 点击 “Request API Key” 获取授权键，然后执行：\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"第三步\">\n        使用 CLI 部署，传入 zip 路径：\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## 故障排除\n\n<AccordionGroup>\n  <Accordion title=\"自定义域名\" icon=\"globe\" iconType=\"solid\">\n    默认 URL 为 `https://mysite.squareweb.app/`，由 SUBDOMAIN 决定。如需 `mysite.com`，需购买 `Standard` 或更高套餐。步骤详见：[如何设置自定义域名](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain)。\n  </Accordion>\n\n  <Accordion title=\"最低 RAM 要求\" icon=\"memory\" iconType=\"solid\">\n    最低 512MB。大型 Fastify 应用建议更多 RAM 以避免 [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) 错误。\n  </Accordion>\n\n  <Accordion title=\"访问暂被拒绝\" icon=\"ban\" iconType=\"solid\">\n    若出现 “Your access has been temporarily denied.”，请稍候。如持续，请联系 https://squarecloud.app/dashboard/support。\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"网站响应过慢...\" icon=\"clock\" iconType=\"solid\">\n    确认已设置 80 端口。如持续，请联系 https://squarecloud.app/dashboard/support。\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## 其他资源\n\n更多信息见 [Fastify 官方文档](https://fastify.dev/)。\n\n如仍有问题，请 [联系支持团队](/company/support)。\n"
    },
    "4eI5mGTgNL7Z": {
      "id": "4eI5mGTgNL7Z",
      "path": "deploys/flask-application",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "python",
          "flask"
        ]
      },
      "metadata": {
        "title": "在 Square Cloud 上托管 Flask 应用",
        "description": "本文指导您在 Square Cloud 上创建并托管一个 Flask 应用。",
        "slug": "在-square-cloud-上托管-flask-应用"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## 创建新的 Flask 项目\n\n- 在开始之前，请确保系统已安装 Python 和 pip。如未安装，可在 [Python 官网](https://www.python.org/) 和 [Pip 官网](https://pypi.org/) 下载。\n- 接着，通过 [注册页面](https://squarecloud.app/signup) 在 Square Cloud 创建账号，可使用电子邮件注册。\n- 最后，确保帐户拥有有效的付费套餐。可在 [此处](https://squarecloud.app/plans) 查看并购买适合需求的套餐。\n\n安装完成后，可创建新的 Flask 项目。首先使用 pip 安装 Flask 和 Waitress：\n\n```bash\npip install flask\npip install waitress\n```\n\n然后创建 Python 文件（如 `app.py`），并添加以下代码以构建基本 Flask 应用：\n\n```python\n# 从 flask 模块导入 Flask 类\nfrom flask import Flask\n\n# 创建 Flask 实例\napp = Flask(__name__)\n\n# 定义根路径 (/) 的路由，返回 'Hello, World!'\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n# 判断脚本是否被直接执行\nif __name__ == '__main__':\n    # 在 0.0.0.0 主机、80 端口运行\n    app.run(host='0.0.0.0', port=80)\n```\n\n## 使用 Waitress 配置生产环境\n\n```python\nfrom flask import Flask\n\n# 创建 Flask 应用实例\napp = Flask(__name__)\n\n# 定义根路径 (/) 的路由\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n# 若脚本被直接执行\nif __name__ == '__main__':\n    from waitress import serve  # 引入 Waitress 的 serve\n    \n    # 使用 Waitress 在 0.0.0.0 主机、80 端口提供服务\n    serve(app, host='0.0.0.0', port=80)\n    \n    # 打印成功启动信息\n    print(\"服务器已成功在端口 80 启动。\")\n```\n\n以上代码创建了访问返回 “Hello, World!” 的基本路由。应用配置为监听 80 端口，此为 HTTP 默认端口。\n\n## 使用 requirements.txt 管理依赖\n\n`requirements.txt` 列出项目所需的所有外部库。列出项目使用的库，但不包括如 `random`、`datetime` 等内置库。提交到 Square Cloud 时需包含此文件。\n\n```txt requirements.txt\nflask\n```\n\n## 创建 squarecloud 配置文件\n\n<Card title=\"了解如何创建 Square Cloud 配置文件。\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  `squarecloud.app` 文件用于配置应用的名称、描述、版本、主文件等信息。\n</Card>\n\n## 配置 START 字段\n\n**START** 字段可选，仅在使用自定义启动脚本时需要。本示例无需设置。\n\n## 上传项目前需购买套餐\n\n在上传项目之前，需要购买合适套餐，满足应用所需资源。套餐信息见 [此处](https://squarecloud.app/plans)。\n\n<Note>**不确定托管 Flask 应用需要多少 RAM 与 CPU？** Flask 高效轻量，适合小型项目。**[Standard](https://squarecloud.app/pay/standard)** 套餐提供 **4 GB RAM** 与 **4 vCPU**，足以满足多数需求。若项目较大或需更高稳定性，可考虑 Pro 套餐 [此处](https://squarecloud.app/pay/pro)。</Note>\n\n## 将项目上传到 Square Cloud\n\n<Tabs>\n  <Tab title=\"仪表板上传\">\n    访问 [Square Cloud 仪表板](https://squarecloud.app/dashboard/upload) 并上传项目文件。\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI 上传\">\n    <Steps>\n      <Step title=\"第一步\">\n        全局安装 CLI：\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        或更新：\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux、macOS 与 WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"第二步\">\n        在 [account](https://squarecloud.app/account) 获取 API Key，并登录：\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"第三步\">\n        指定 zip 路径部署：\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## 故障排除\n\n<AccordionGroup>\n  <Accordion title=\"自定义域名\" icon=\"globe\" iconType=\"solid\">\n    默认 URL 为 `https://mysite.squareweb.app/`。若要使用 `mysite.com`，需购买至少 Standard 套餐。请参考 [自定义域名教程](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain)。\n  </Accordion>\n\n  <Accordion title=\"最低 RAM 要求\" icon=\"memory\" iconType=\"solid\">\n    最低 RAM 为 512 MB。取决于 Flask 应用规模，可能需要更多以避免 [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) 错误。\n  </Accordion>\n\n  <Accordion title=\"访问暂时被拒绝\" icon=\"ban\" iconType=\"solid\">\n    若出现 “Your access has been temporarily denied.”，请稍等。如持续出现，请联系 https://squarecloud.app/dashboard/support。\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"网站响应超时\" icon=\"clock\" iconType=\"solid\">\n    请确认已正确设置 80 端口。如问题仍未解决，请联系 https://squarecloud.app/dashboard/support。\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## 其他资源\n\n更多 Flask 资料请参考 [官方文档](https://flask.palletsprojects.com/en/3.0.x/)。\n\n如需帮助，请 [联系客服](/company/support)。\n"
    },
    "L5I0YzAVVaYa": {
      "id": "L5I0YzAVVaYa",
      "path": "deploys/lavalink-server",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "lavalink",
          "java"
        ]
      },
      "metadata": {
        "title": "如何创建您的 Lavalink 服务器",
        "description": "了解如何托管您的 Lavalink 服务器并向 Discord 机器人高质量地流式传输音乐。",
        "slug": "如何创建您的-lavalink-服务器"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## 介绍 🚀\n\n- 按照以下教程，即刻托管你的 **Lavalink** 服务器，操作非常简单！如需帮助，请通过官方支持渠道联系我们。\n- 接着，在 [注册页面](https://squarecloud.app/signup) 创建 Square Cloud 账户，可使用邮箱注册。\n- 最后，确保账户拥有有效的付费套餐。可在 [此处](https://squarecloud.app/plans) 查看并购买适合需求的套餐。\n\n## 选择版本\n\n点击 [此处](https://github.com/freyacodes/Lavalink/releases/) 选择所需 **Lavalink** 版本，建议使用最新版本以获得最佳体验。\n\n## 创建 squarecloud 配置文件\n\n<Card title=\"了解如何创建 Square Cloud 配置文件。\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  `squarecloud.app` 文件用于配置应用名称、描述、版本、主文件等。\n</Card>\n\n## 创建 application.yml\n\n为 Lavalink 服务器创建配置文件。示例文件见 [此处](https://github.com/freyacodes/Lavalink/blob/master/LavalinkServer/application.yml.example)。\n\n<Warning>请将 `application.yml` 中的 `port` 字段设置为 `80`。</Warning>\n\n## 增强安全性\n\n强烈建议在 `application.yml` 的 `password` 字段设置安全密码，长度至少 32 个字符。\n\n<Note>连接 Lavalink 时需使用 443 端口（SSL），并将 `secure` 设为 `true`。</Note>\n\n## 将项目上传到 Square Cloud\n\n将 `Lavalink.jar` 与 `application.yml` 打包为 `.zip`，然后上传至 Square Cloud。\n\n<Tabs>\n  <Tab title=\"仪表板上传\">\n    访问 [Square Cloud 仪表板](https://squarecloud.app/dashboard/upload) 上传文件。\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI 上传\">\n    <Steps>\n      <Step title=\"第一步\">\n        安装 CLI：\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        更新 CLI：\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux、macOS 与 WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"第二步\">\n        在 [account](https://squarecloud.app/account) 获取 API Key 并登录：\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"第三步\">\n        指定 zip 路径部署：\n\n        ```bash\n        squarecloud upload server.zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n如仍有问题，请 [联系支持团队](/company/support)。\n"
    },
    "w1gmUmjmk3bD": {
      "id": "w1gmUmjmk3bD",
      "path": "deploys/nestjs-application",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "nodejs",
          "nest"
        ]
      },
      "metadata": {
        "title": "在 Square Cloud 上托管 Nestjs 应用",
        "description": "本文指导您在 Square Cloud 上创建并托管一个 Nestjs 应用",
        "slug": "在-square-cloud-上托管-nestjs-应用"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## 介绍\n\n- 开始之前，请确保已安装 Node.js 与 npm。可在 [Node.js 官网](https://nodejs.org/) 下载。\n- 然后，通过 [注册页面](https://squarecloud.app/signup) 创建 Square Cloud 账户。\n- 最后，确保账户拥有有效付费套餐。套餐信息见 [此处](https://squarecloud.app/plans)。\n\n### 安装 NestJS CLI\n\n全局安装 CLI：\n\n```bash\nnpm install -g @nestjs/cli\n```\n\n### 创建 NestJS 项目\n\n```bash\nnest new my-app\n```\n\n## 配置 80 端口\n\n编辑 `src/main.ts`：\n\n```typescript\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(80);\n}\nbootstrap();\n```\n\n## 构建应用\n\n```bash\nnpm run build\n```\n\n## 创建 squarecloud 配置文件\n\n<Card title=\"了解如何创建 Square Cloud 配置文件。\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  `squarecloud.app` 文件用于配置应用名称、描述、版本、主文件等。\n</Card>\n\n## 配置 MAIN 字段\n\n```app squarecloud.app\nMAIN=dist/main.js\n```\n\n## 上传前购买套餐\n\n<Note>**需要多少 RAM/CPU？** **[Standard](https://squarecloud.app/pay/standard)** 套餐（4 GB RAM，4 vCPU）满足多数 NestJS 应用。大型项目可考虑 Pro 套餐 [此处](https://squarecloud.app/pay/pro)。</Note>\n\n\\[其余部分与原文相同，已转义反引号。]\n"
    },
    "veHHIeGEZwPG": {
      "id": "veHHIeGEZwPG",
      "path": "deploys/next-website",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "nodejs",
          "next"
        ]
      },
      "metadata": {
        "title": "在 Square Cloud 上托管 Next.js 网站",
        "description": "本文指导您在 Square Cloud 上创建并托管一个 Next.js 网站。",
        "slug": "在-square-cloud-上托管-nextjs-网站"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## 介绍\n\n- 在开始之前，请确保你的系统已安装 Node.js 和 npm。如未安装，可从 [Node.js 官方网站](https://nodejs.org/) 下载。\n- 然后，需在 Square Cloud 创建账户，可通过 [注册页面](https://squarecloud.app/signup) 完成，使用邮箱即可注册。\n- 最后，账户需有一项付费计划。可在此查看并购买合适的计划：[点击查看](https://squarecloud.app/plans)。\n\n### 创建 Next.js 项目\n\n运行以下命令创建新项目：\n\n```bash\nnpx create-next-app@latest my-app\n```\n\n其中 `my-app` 为项目名，可替换为任意名称。`npx` 是随 `npm` 提供的工具，用于执行本地或远程 npm 包。\n\n`create-next-app` 为 npm 上的包，用于初始化 Next.js 项目：创建目录、安装依赖并配置基础文件。\n\n`@latest` 指定使用最新版本，确保获取最新功能。\n\n## 配置 80 端口\n\n80 端口是 HTTP 默认端口。要在 Square Cloud 托管 Next.js 网站，必须使用 80 端口。在 Next.js 中，可在启动脚本添加 `-p 80` 参数。\n\n## 创建 squarecloud 配置文件\n\n<Card title=\"了解：如何创建 Square Cloud 配置文件。\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  `squarecloud.app` 配置文件用于定义应用名称、描述、版本、主文件等信息。\n</Card>\n\n## 配置 START 字段\n\n在 Square Cloud 配置文件中，`START` 字段用于自定义启动命令。如需在 Square Cloud 上构建并启动网站，配置如下：\n\n```app squarecloud.app\nSTART=npm run build && npm run start\n```\n\n该命令会执行 `package.json` 中的 “build” 和 “start” 脚本：\n\n```json package.json\n{\n  \"name\": \"my-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start -p 80\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"next\": \"14.1.0\"\n  },\n  \"devDependencies\": {\n    \"autoprefixer\": \"^10.0.1\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.3.0\",\n    \"eslint\": \"^8\",\n    \"eslint-config-next\": \"14.1.0\"\n  }\n}\n```\n\n## 购买计划后再上传项目\n\n在上传项目前，需要先购买计划，具体取决于应用资源需求。查看计划：[点击此处](https://squarecloud.app/plans)。\n\n<Note>**不确定托管 Next.js 需要多少 RAM 和 CPU？** 我们的 **[Standard 计划](https://squarecloud.app/pay/standard)** 提供 **4 GB** RAM 和 **4 vCPU**，足以支持大多数 Next.js 网站。若项目更大或需更高稳定性，可考虑 Pro 计划。购买请点击 [这里](https://squarecloud.app/pay/pro)。</Note>\n\n## 上传项目到 Square Cloud\n\n准备好文件后，可将其上传至 Square Cloud 并托管。\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    访问 [Square Cloud 控制台](https://squarecloud.app/dashboard/upload) 上传文件。\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"第一步\">\n        安装 CLI：\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        若已安装，建议更新：\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux、macOS 与 WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"第二步\">\n        在 [此处](https://squarecloud.app/account) 点击 “Request API Key” 获取授权密钥后，运行：\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"第三步\">\n        通过 CLI 部署，指定 zip 路径：\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## 故障排除\n\n<AccordionGroup>\n  <Accordion title=\"自定义域名\" icon=\"globe\" iconType=\"solid\">\n    默认 URL 为 `https://mysite.squareweb.app/`，子域名由配置文件中的 SUBDOMAIN 决定。若需使用自定义域名（如 `mysite.com.br`），须购买 Standard 计划或更高。详见：[如何设置域名](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain)。\n  </Accordion>\n\n  <Accordion title=\"最低 RAM 要求\" icon=\"memory\" iconType=\"solid\">\n    托管网站的最低 RAM 为 512 MB。但在 Square 上直接构建时，建议更高 RAM，以免出现 [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) 错误。\n  </Accordion>\n\n  <Accordion title=\"访问被暂时拒绝\" icon=\"ban\" iconType=\"solid\">\n    若出现 “Your access has been temporarily denied.”，请稍后再试。如仍无法访问，请联系 https://squarecloud.app/dashboard/support。\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"网站响应过慢…\" icon=\"clock\" iconType=\"solid\">\n    若出现 “Website took too long to respond...”，请确认已正确设置 80 端口。如问题持续，联系 https://squarecloud.app/dashboard/support。\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## 其他资源\n\n更多 Next.js 相关信息，请查看 [官方文档](https://nextjs.org/docs)。\n\n如仍遇到问题，请[联系我们的支持团队](/company/support)。\n"
    },
    "fN9PfluMWrbs": {
      "id": "fN9PfluMWrbs",
      "path": "deploys/react-website",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "website",
          "react"
        ]
      },
      "metadata": {
        "title": "在 Square Cloud 上托管 React 应用",
        "description": "本文指导您在 Square Cloud 上创建并托管一个 React 网站。",
        "slug": "在-square-cloud-上托管-react-应用"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## 介绍\n\n- 在开始之前，请确保您的系统已安装 Node.js 和 npm。如果还未安装，可从 [Node.js 官方网站](https://nodejs.org/) 下载。\n- 接下来，您需要在 Square Cloud 上创建一个帐户，可通过 [注册页面](https://squarecloud.app/signup) 完成。您可以使用电子邮件创建帐户。\n- 最后，您的帐户需要有一个有效的付费计划。您可以在此处查看我们的计划并根据需要购买 [点击这里](https://squarecloud.app/plans)。\n\n### 创建 React 项目\n\n要创建一个新的 React 项目，请运行以下命令：\n\n```bash\nnpx create-react-app my-react-app\n```\n\n上述命令中，`my-react-app` 是您新项目的名称。您可以将 `my-react-app` 替换为任何想要的名称。\n\n`create-react-app` 是 npm 注册表中提供的一个包，用于为您设置新的 React 项目。它会处理所有初始设置，例如创建项目目录、安装必要依赖并配置基本文件。\n\n## 使用 Serve 配置生产环境\n\n在创建并配置好 React 项目后，就该为生产环境做准备了。为此，我们将使用名为 `serve` 的库。该库是一个静态服务器，可以在项目构建完成后为其提供服务。\n\n### 安装 Serve 库\n\n要安装 `serve` 库，请在终端中进入项目目录并运行以下命令：\n\n```bash\nnpm install serve@14.2.3\n```\n\n此命令安装版本为 `14.2.3` 的 `serve` 库。如果想安装最新版本，可省略 `@14.2.3`。\n\n### 配置启动脚本\n\n安装 `serve` 库后，需要配置项目的启动脚本以使用 `serve`。为此，打开项目的 `package.json` 文件，并添加一个名为 `start:prod` 的新脚本：\n\n```json\n\"scripts\": {\n  \"start\": \"react-scripts start\",\n  \"start:prod\": \"serve -s build -l 80\",\n  ...\n}\n```\n\n在 `start:prod` 脚本中，`serve -s build -l 80` 包含以下含义：\n\n- `serve`：启动 `serve` 服务器的命令。\n- `-s build`：`-s` 选项以单页应用模式提供 `build` 目录。这意味着所有未找到的请求都会重定向到 `index.html`。`build` 目录在运行 `npm run build` 时创建。\n- `-l 80`：`-l` 后跟 `80` 表示 `serve` 在 80 端口监听。80 端口是 HTTP 流量的默认端口。\n\n现在，当您想以生产模式启动项目时，可以运行 `npm run start:prod`。此命令会先构建 React 项目，然后使用 `serve` 在 80 端口提供已构建的文件。\n\n## 创建 squarecloud.app 配置文件\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  squarecloud.app 文件是一个配置文件，用于配置应用；它定义了名称、描述、版本、主文件等信息。\n</Card>\n\n## 配置 START 字段\n\n在 Square Cloud 配置文件中，`START` 字段用于自定义启动命令。要在 Square Cloud 上构建并启动应用，请按以下方式配置 `START` 字段：\n\n```app squarecloud.app\nSTART=npm run build && npm run start:prod\n```\n\n此命令将执行 `package.json` 中定义的 “build” 和 “start:prod” 脚本：\n\n```json package.json\n{\n  \"name\": \"my-react-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@testing-library/jest-dom\": \"^5.17.0\",\n    \"@testing-library/react\": \"^13.4.0\",\n    \"@testing-library/user-event\": \"^13.5.0\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-scripts\": \"5.0.1\",\n    \"serve\": \"^14.2.3\",\n    \"web-vitals\": \"^2.1.4\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"start:prod\": \"serve -s build -l 80\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n```\n\n## 购买计划以上传项目\n\n在将项目上传到 Square Cloud 之前，需先购买计划。所选计划取决于应用所需资源。您可以在此查看我们的计划。\n\n<Note>**想知道 React 网站需要多少 RAM 和 CPU？** 别担心，我们来帮您。React 是一个以速度和灵活性著称的 JavaScript 框架。它允许开发者构建大型 Web 应用，并能高效响应数据变化进行更新和渲染。它也相对容易上手，适合初学者。我们的 **[Standard](https://squarecloud.app/pay/standard)** 计划提供 **4GB** RAM 和 **4vCPU**，足以满足大多数 React 网站需求。但如若项目更大或需更高稳定性，建议考虑 Pro 计划。更多资源可确保在高并发下保持流畅表现。购买请点击 [此处](https://squarecloud.app/pay/pro)。</Note>\n\n## 上传项目到 Square Cloud\n\n准备好项目文件后，即可将其上传到 Square Cloud 并托管项目。\n\n<Tabs>\n  <Tab title=\"仪表板上传\">\n    访问 [Square Cloud 仪表板](https://squarecloud.app/dashboard/upload) 并上传项目文件。\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI 上传\">\n    <Steps>\n      <Step title=\"第一步\">\n        首先，需要在您的环境中安装 CLI。如果尚未安装，请运行：\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        如果已安装，建议更新，运行：\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS 和 WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"第二步\">\n        接下来，要进行身份验证并使用其他 CLI 命令，请在 [此处](https://squarecloud.app/account) 单击“Request API Key”获取授权密钥。获取后，运行：\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"第三步\">\n        最后，要使用 CLI 将应用部署到 Square Cloud，请运行：\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## 故障排除\n\n<AccordionGroup>\n  <Accordion title=\"自定义域名\" icon=\"globe\" iconType=\"solid\">\n    如果希望为托管在 Square Cloud 上的应用使用自定义域名，默认情况下 URL 类似 `https://mysite.squareweb.app/`。子域名由配置文件中的 SUBDOMAIN 字段确定。但若要使用自定义域名如 `mysite.com.br`，需购买 **Standard** 计划或更高计划。详情请参阅我们的文章：[如何设置自定义域名](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain)。\n  </Accordion>\n\n  <Accordion title=\"最低 RAM 要求\" icon=\"memory\" iconType=\"solid\">\n    托管网站的最低 RAM 要求为 512MB，但若直接在 Square 上构建，建议使用更高 RAM，否则可能遇到 [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) 错误。\n  </Accordion>\n\n  <Accordion title=\"临时访问被拒\" icon=\"ban\" iconType=\"solid\">\n    若尝试访问网站时收到“Your access has been temporarily denied.”消息，请稍候再试。如问题持续，请联系 https://squarecloud.app/dashboard/support。\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"网站响应超时...\" icon=\"clock\" iconType=\"solid\">\n    若收到“Website took too long to respond...”消息，请确保已正确配置网站的 80 端口。如问题持续，请联系 https://squarecloud.app/dashboard/support。\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## 其他资源\n\n有关 React 及其工具的更多信息，请访问 [React 官方文档](https://reactjs.org/docs)。在那里，您会找到详细指南、教程和 API 文档，以帮助您充分利用 React。\n\n如果您仍遇到任何问题，请随时 [联系支持团队](/company/support)。\n"
    },
    "6Ks4IlL4H9Kc": {
      "id": "6Ks4IlL4H9Kc",
      "path": "deploys/telegram-bot",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "bot",
          "telegram"
        ]
      },
      "metadata": {
        "title": "在 Square Cloud 上托管 Telegram 机器人",
        "description": "本文指导您在 Square Cloud 上创建并托管一个 Telegram 机器人。",
        "slug": "在-square-cloud-上托管-telegram-机器人"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## 引言\n\n- 在开始编码之前，您需要先在 Telegram 上正确设置您的机器人。首先，必须拥有一个 Telegram 账户。如果尚未注册，可访问 [Telegram 官方网站](https://telegram.org/) 创建账户。\n\n<AccordionGroup>\n  <Accordion title=\"入门\" icon=\"rocket\" iconType=\"solid\">\n    首先，访问 [Telegram](https://web.telegram.org/a/)，搜索名为 “BotFather” 的机器人。\n\n    <Frame>\n      <img src=\"/images/articles/telegram/getting-started.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"获取令牌\" icon=\"key\" iconType=\"solid\">\n    点击 BotFather 开启对话并输入 “start”。发送后，选择 “/newbot” 选项。随后按提示输入您希望的机器人名称，最后将生成一个令牌。\n\n    <Frame>\n      <img src=\"/images/articles/telegram/getting-the-token.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n<Warning>请务必保管好机器人的令牌，因为任何人持有该令牌都可控制您的机器人。</Warning>\n\n- 接着，需在 Square Cloud 创建账户，可通过 [注册页面](https://squarecloud.app/signup) 使用电子邮件完成注册。\n- 最后，账户中需有已激活的付费方案。您可在 [此处](https://squarecloud.app/plans) 查看并购买所需方案。\n\n# 使用封装库创建机器人\n\n<Tabs>\n  <Tab title=\"node-telegram-bot-api\">\n    1. 确保系统已安装 Node.js。若未安装，可从 [Node.js 官网](https://nodejs.org/) 下载。\n    2. 使用 `npm init` 初始化新的 Node.js 项目，这将创建 `package.json` 文件：\n\n    ```bash\n    npm init -y\n    ```\n\n    3. 通过 npm 安装 node-telegram-bot-api 库：\n\n    ```bash\n    npm install node-telegram-bot-api\n    ```\n\n    4. 新建 JavaScript 文件（如 `index.js`），加入以下代码以创建基础的 Telegram 机器人：\n\n    ```javascript index.js\n    // 导入 node-telegram-bot-api 库\n    const TelegramBot = require(\"node-telegram-bot-api\");\n\n    // 配置 API 密钥\n    const token = \"your token here\";\n\n    // 初始化机器人\n    const bot = new TelegramBot(token, { polling: true });\n\n    // 获取机器人信息\n    bot.getMe().then((botInfo) => {\n      // 获取机器人名称\n      const botName = botInfo.username;\n\n      // 定义非指令消息的处理\n      bot.on(\"message\", (msg) => {\n        // 获取聊天 ID\n        const chatId = msg.chat.id;\n        // 获取用户消息\n        const userMsg = msg.text;\n        // 构建发送的消息\n        const responseMsg = `\\${botName} Says: \\${userMsg}`;\n        // 发送消息\n        bot.sendMessage(chatId, responseMsg);\n      });\n\n      // 打印机器人名称\n      console.log(botName);\n    });\n    ```\n  </Tab>\n\n  <Tab title=\"telebot\">\n    1. 确保系统已安装 Python 及 Pip（Python 的包管理器）。若未安装，可从 [Python 官网](https://www.python.org/) 与 [Pip 官网](https://pypi.org/) 下载。\n    2. 使用 pip 安装 telebot 库：\n\n    ```bash\n    pip install telebot\n    ```\n\n    3. 新建 Python 文件（如 `main.py`），加入以下代码以创建基础 Telegram 机器人：\n\n    ```python main.py\n    # 导入 telebot_router 库\n    from telebot_router import TeleBot\n\n    # 初始化机器人\n    app = TeleBot(__name__)\n\n    # 定义非指令消息的处理\n    @app.route('(?!/).+')\n    def parrot(message):\n        # 获取聊天 ID\n        chat_dest = message['chat']['id']\n        # 获取用户消息\n        user_msg = message['text']\n        # 获取机器人信息\n        bot_info = app.get_me()['result']\n        # 获取机器人名称\n        bot_name = bot_info['username']\n        # 构建发送的消息\n        msg = \"{} Says: {}\".format(bot_name, user_msg)\n        # 发送消息\n        app.send_message(chat_dest, msg)\n        \n    # 主函数\n    if __name__ == '__main__':\n        # 配置 API 密钥\n        app.config['api_key'] = 'your token here'\n        # 获取机器人信息\n        bot_info = app.get_me()['result']\n        # 获取机器人名称\n        bot_name = bot_info['username']\n        # 打印机器人名称\n        print(f\"{bot_name}\") \n        # 启动机器人\n        app.poll(debug=True)\n    ```\n\n    4. 创建 `requirements.txt` 文件，列出项目所需的外部库：\n\n    ```txt requirements.txt\n    telebot\n    ```\n  </Tab>\n</Tabs>\n\n## 创建 squarecloud 配置文件\n\n<Card title=\"了解：如何创建 Square Cloud 配置文件。\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  squarecloud.app 文件用于配置您的应用；它将定义名称、描述、版本、主文件等信息。\n</Card>\n\n## 配置 START 字段\n\n<Warning>仅在您非常确定需要时才使用该字段。</Warning>\n\n在 Square Cloud 配置文件中，**START** 字段为可选项，仅在您使用自定义脚本启动机器人时才需要。本示例中无需使用 **START** 字段。\n\n## 将项目上传至 Square Cloud\n\n准备好项目文件后，即可上传并托管您的项目。\n\n<Tabs>\n  <Tab title=\"Dashboard 上传\">\n    访问 [Square Cloud Dashboard](https://squarecloud.app/dashboard/upload) 并上传项目文件。\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI 上传\">\n    <Steps>\n      <Step title=\"第一步\">\n        首先确保环境已安装 CLI。若未安装，请在终端执行：\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        若已安装，建议更新。在终端执行：\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux、macOS 与 WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"第二步\">\n        要进行身份验证及使用其他 CLI 命令，可在 [此处](https://squarecloud.app/account) 点击 “Request API Key” 获取授权键，然后执行：\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"第三步\">\n        最后，使用 CLI 将应用部署到 Square Cloud，并传入 zip 文件路径：\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## 测试机器人\n\n若操作无误，只需在 Telegram 搜索您的机器人并发送消息，即可收到回声回复。\n\n<Frame>\n  <img src=\"/images/articles/telegram/testing-bot.png\" style={{ borderRadius: \"0.2rem\" }} />\n</Frame>\n\n## 其他资源\n\n要了解更多关于 telebot 创建机器人的信息，请访问 [telebot 官方文档](https://pypi.org/project/telebot/)。其中包含详细指南、教程和 API 文档，帮助您充分利用这些库。\n\n如仍遇问题，请 [联系支持团队](/company/support)。\n"
    },
    "k6CQUbg64Fdl": {
      "id": "k6CQUbg64Fdl",
      "path": "deploys/vite-website",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "website",
          "vite"
        ]
      },
      "metadata": {
        "title": "在 Square Cloud 上托管 Vite 应用",
        "description": "本文指导您在 Square Cloud 上创建并托管一个 Vite 应用",
        "slug": "在-square-cloud-上托管-vite-应用"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## 介绍\n\n- 在开始之前，请确保您的系统已安装 Node.js 和 npm。如果还没有，您可以从 [Node.js 官方网站](https://nodejs.org/) 下载。\n- 接下来，您需要在 Square Cloud 上创建一个帐户，这可以通过 [注册页面](https://squarecloud.app/signup) 完成。您可以使用电子邮件创建帐户。\n- 最后，您的帐户需要有一个有效的付费计划。您可以在此查看我们的计划并根据需求购买 [这里](https://squarecloud.app/plans)。\n\n### 创建 Vite 项目\n\n要创建一个新的 Vite 项目，请运行以下命令：\n\n```bash\nnpm create vite@latest my-vite-app\n```\n\n在上述命令中，`my-vite-app` 是您新项目的名称。请将其替换为您希望使用的名称。默认情况下，此命令会使用 JavaScript 设置一个 Vite 项目。\n\n### 选择特定模板\n\nVite 允许为您的项目选择不同的模板。在创建新项目时，您可以使用 `--template` 选项指定所需的模板。以下是一些示例：\n\n选择以下模板之一：`react`、`vue` 与 `lit`。\n\n```bash\n# npm 7+, extra double-dash is needed:\nnpm create vite@latest my-vite-app -- --template [template]\n```\n\n选择最适合您需求的模板，并根据需要调整项目名称。\n\n### 理解 JavaScript 与 TypeScript 之间的区别\n\n当您选择 JavaScript 时，Vite 会使用默认的 JavaScript 设置来配置项目。另一方面，选择 TypeScript 时，Vite 会使用 TypeScript 设置来配置项目，并生成 `tsconfig.json` 文件。\n\n## 配置端口 80\n\n端口 80 是 HTTP 流量的默认端口。要在 Square Cloud 上托管 Vite 应用，请在启动脚本中设置 `--port 80` 参数，以确保应用在该端口上正确运行。\n\n## 配置 Host 为 0.0.0.0\n\n`--host 0.0.0.0` 选项用于将 Vite 服务器绑定到所有可用的网络接口。这使得您的应用不仅可以在 `localhost` 上访问，还可以通过同一网络中的其他设备（如其他计算机或移动设备）访问。默认情况下，Vite 绑定到 `localhost`，这限制了对运行该服务器的机器的访问。将 host 设置为 `0.0.0.0` 可以让服务器监听来自任何 IP 地址的请求。\n\n## 创建 squarecloud.app 配置文件\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  squarecloud.app 文件是一个配置文件，用于配置您的应用；它将用于定义名称、描述、版本、主文件等信息。\n</Card>\n\n## 配置 START 字段\n\n在 Square Cloud 的配置文件中，`START` 字段用于自定义启动命令。如果您想要在 Square Cloud 上构建并启动 Vite 应用，请按以下方式配置 `START` 字段：\n\n```app squarecloud.app\nSTART=npm run build && npm run preview\n```\n\n该命令将执行 `package.json` 中定义的 “build” 和 “preview” 脚本：\n\n```json package.json\n{\n  \"name\": \"my-vite-app\",\n  \"private\": true,\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview --host 0.0.0.0 --port 80\"\n  },\n  \"devDependencies\": {\n    \"vite\": \"^5.1.4\"\n  }\n}\n```\n\n## 在上传项目之前购买计划\n\n在将项目上传到 Square Cloud 之前，您需要先购买计划。所选计划类型将取决于应用所需的资源。您可以在此查看我们的计划 [这里](https://squarecloud.app/plans)。\n\n<Note>**您是否想知道托管 Vite 网站需要多少 RAM 和 CPU？** 别担心，我们来帮您。Vite 是一个现代前端构建工具，为现代 Web 项目提供更快速、更精简的开发体验。它设计为开箱即用地支持 ES 模块，实现即时的服务器启动和模块热替换。我们的 **[Standard](https://squarecloud.app/pay/standard)** 计划提供 **4GB** RAM 和 **4vCPU**，对于大多数 Vite 网站而言已经足够。但是，如果您正在开发更大型的项目或需要更高的稳定性，我们建议您考虑 Pro 计划。通过额外的资源，您可以确保在高负载情况下依然保持流畅的性能。购买请点击 [此处](https://squarecloud.app/pay/pro)。</Note>\n\n## 上传项目到 Square Cloud\n\n准备好项目文件后，您可以将它们上传到 Square Cloud 并托管您的项目。\n\n<Tabs>\n  <Tab title=\"仪表板上传\">\n    访问 [Square Cloud 仪表板](https://squarecloud.app/dashboard/upload)，并上传项目文件。\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI 上传\">\n    <Steps>\n      <Step title=\"第一步\">\n        首先，您需要在环境中安装 CLI。如果尚未安装，请在终端中运行以下命令：\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        如果已经安装，建议更新。为此，请运行以下命令：\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux、macOS 和 WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"第二步\">\n        接下来，要进行身份验证并使用其他 CLI 命令，请在 [此处](https://squarecloud.app/account) 点击“Request API Key”获取授权密钥。获取后，运行下列命令：\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"第三步\">\n        最后，要使用 CLI 将应用部署到 Square Cloud，请运行以下命令，并提供 zip 文件的路径：\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## 故障排除\n\n<AccordionGroup>\n  <Accordion title=\"自定义域名\" icon=\"globe\" iconType=\"solid\">\n    如果您希望为托管在 Square Cloud 上的应用使用自定义域名，请注意，默认情况下 URL 将类似于 `https://mysite.squareweb.app/`。子域名由配置文件中的 SUBDOMAIN 字段决定。若要使用自定义域名，例如 `mysite.com`，您需要购买 **Standard** 计划或更高级别的计划。我们在文章中详细说明了设置自定义域名的每个步骤：[如何设置自定义域名](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain)。\n  </Accordion>\n\n  <Accordion title=\"最低 RAM 要求\" icon=\"memory\" iconType=\"solid\">\n    托管网站或 API 的最低 RAM 要求为 512MB，但在 Square 上直接构建时，建议使用更高的内存，否则可能遇到 [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) 错误。\n  </Accordion>\n\n  <Accordion title=\"临时访问被拒\" icon=\"ban\" iconType=\"solid\">\n    如果尝试访问网站时收到“Your access has been temporarily denied.”消息，请稍候再试。如问题持续存在，请随时通过 https://squarecloud.app/dashboard/support 联系我们。\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"网站响应超时...\" icon=\"clock\" iconType=\"solid\">\n    如果收到“Website took too long to respond...”消息，请确保在您的网站上正确配置了 80 端口。如问题持续存在，请随时通过 https://squarecloud.app/dashboard/support 联系我们。\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## 其他资源\n\n有关 Vite 及其工具的更多信息，请访问 [Vite 官方文档](https://vitejs.dev/guide/)。在那里，您会找到详细的指南、教程和 API 文档，帮助您充分利用 Vite。\n\n如果您继续遇到任何问题，请随时 [联系支持团队](/company/support)。\n"
    },
    "6T1BB3ROntV8": {
      "id": "6T1BB3ROntV8",
      "path": "deploys/vue-website",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "vue",
          "website"
        ]
      },
      "metadata": {
        "title": "在 Square Cloud 上托管 Vue 应用",
        "description": "本文指导您在 Square Cloud 上创建并托管一个 Vue 应用",
        "slug": "在-square-cloud-上托管-vue-应用"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## 介绍\n\n- 在开始之前，请确保您的系统已安装 Node.js 和 npm。如果还未安装，您可以从 [Node.js 官方网站](https://nodejs.org/) 下载。\n- 接下来，您需要在 Square Cloud 上创建一个帐户，可通过 [注册页面](https://squarecloud.app/signup) 完成。您可以使用电子邮件创建帐户。\n- 最后，您的帐户需要有一个有效的付费计划。您可以在此查看并购买计划 [这里](https://squarecloud.app/plans)。\n\n### 创建 Vue 项目\n\n要创建新的 Vue 项目，请运行以下命令：\n\n```bash\nnpm create vue@latest\n```\n\n此命令使用最新版 Vue 初始化新的 Vue 项目。`npm create` 是随 npm（Node.js 包管理器）提供的工具，用于初始化新的或已有的 npm 包。\n\n`vue@latest` 是 npm 注册表中的一个包，用于为您生成 Vue 项目，负责创建项目目录、安装依赖并配置基础文件。\n\n`@latest` 标签确保您使用的是 `vue` 包的最新版本，以便获得最新功能。\n\n## 配置端口 80\n\n端口 80 是 HTTP 流量的默认端口。要在 Square Cloud 上托管 Vite 应用，请在启动脚本中添加 `--port 80` 参数，以确保应用监听此端口。\n\n## 创建 squarecloud.app 配置文件\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  squarecloud.app 文件用于配置您的应用；定义名称、描述、版本、主文件等信息。\n</Card>\n\n## 配置 START 字段\n\n在 Square Cloud 配置文件中，`START` 字段用于自定义启动命令。要在 Square Cloud 上构建并启动 Vue 应用，请设置：\n\n```app squarecloud.app\nSTART=npm run build && npm run serve\n```\n\n该命令会执行 `package.json` 中的 “build” 和 “serve” 脚本：\n\n```json package.json\n{\n  \"name\": \"vue-project\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"serve\": \"vite preview --port 80\"\n  },\n  \"dependencies\": {\n    \"vue\": \"^3.4.21\"\n  },\n  \"devDependencies\": {\n    \"@vitejs/plugin-vue\": \"^5.0.4\",\n    \"vite\": \"^5.2.8\"\n  }\n}\n```\n\n## 在上传项目前购买计划\n\n在将项目上传到 Square Cloud 之前，您需要先购买计划。所需计划类型取决于应用资源需求。您可在此查看我们的计划 [这里](https://squarecloud.app/plans)。\n\n<Note>**想知道托管 Vue.js 网站需要多少 RAM 和 CPU？** Vue.js 是一个渐进式框架，以适应性和简洁著称。它支持增量采用、声明式渲染和组件化开发。我们的 **[Standard](https://squarecloud.app/pay/standard)** 计划提供 **4GB** RAM 和 **4vCPU**，适用于大多数 Vue.js 网站。如需更高性能或稳定性，请考虑 Pro 计划。购买请点击 [此处](https://squarecloud.app/pay/pro)。</Note>\n\n## 上传项目到 Square Cloud\n\n准备好项目文件后，将它们上传以托管您的应用：\n\n<Tabs>\n  <Tab title=\"仪表板上传\">\n    访问 [Square Cloud 仪表板](https://squarecloud.app/dashboard/upload) 并上传项目文件。\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI 上传\">\n    <Steps>\n      <Step title=\"第一步\">\n        安装 CLI：\n\n        ```bash\n        npm install -g @squarecloud/cli\n        ```\n\n        或更新：\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS & WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"第二步\">\n        在 [Account](https://squarecloud.app/account) 点击“Request API Key”获取授权，然后运行：\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"第三步\">\n        运行以下命令部署应用（传入 zip 文件路径）：\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## 故障排除\n\n<AccordionGroup>\n  <Accordion title=\"自定义域名\" icon=\"globe\" iconType=\"solid\">\n    默认 URL 为 `https://mysite.squareweb.app/`。若要使用自定义域名 `mysite.com`，需购买 **Standard** 或更高计划。详情见：[如何设置自定义域名](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain)。\n  </Accordion>\n\n  <Accordion title=\"最低 RAM 要求\" icon=\"memory\" iconType=\"solid\">\n    托管网站或 API 最低需 512MB RAM，建议更多以避免 [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) 错误。\n  </Accordion>\n\n  <Accordion title=\"临时访问被拒\" icon=\"ban\" iconType=\"solid\">\n    若出现“Your access has been temporarily denied.”消息，请稍后再试。如仍有问题，请通过 https://squarecloud.app/dashboard/support 联系我们。\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"网站响应超时...\" icon=\"clock\" iconType=\"solid\">\n    若出现“Website took too long to respond...”消息，请检查端口 80 配置。如问题持续，请通过 https://squarecloud.app/dashboard/support 联系我们。\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## 附加资源\n\n有关 Vue 及其工具的更多信息，请访问 [Vue 官方文档](https://vuejs.org/)。您将找到详细指南、教程和 API 文档。\n\n如遇问题，请随时 [联系支持团队](/company/support)。\n"
    },
    "7x3Iy9P6E1uc": {
      "id": "7x3Iy9P6E1uc",
      "path": "deploys/website",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "website"
        ]
      },
      "metadata": {
        "title": "在 Square Cloud 上托管您的网站/API",
        "description": "了解如何使用 squarecloud.app 配置文件在 Square Cloud 上托管您的网站或 API。",
        "slug": "在-square-cloud-上托管您的网站api"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## 介绍\n\n- 在 Square Cloud 上创建一个帐户，可通过 [注册页面](https://squarecloud.app/signup) 完成。您可以使用电子邮件创建帐户。\n- 确保您的帐户有一个有效的付费计划。您可以在此查看并购买计划 [这里](https://squarecloud.app/plans)。\n\n## 创建 squarecloud.app 配置文件\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  squarecloud.app 文件是用于配置您的应用程序的配置文件；它将用于定义名称、描述、版本、主文件等信息。\n</Card>\n\n### 重要的网站参数\n\n**网站端口** 必须是 **80**；如果您使用静态网站，则无需设置 `START` 参数。\n\n在 squarecloud.app 配置文件中：\n\n- `SUBDOMAIN`：如果您正在托管网站，请将此参数设置为所需的子域名。\n- `START`：自定义启动命令（如有需要）。\n\n<Note>网站 URL 将为：`my-subdomain-parameter`.squareweb.app</Note>\n\n```systemd This example host a website without custom startup command\nMAIN=index.html\nMEMORY=512\nVERSION=recommended\nDISPLAY_NAME=我的简单静态网站！\nSUBDOMAIN=my-simple-static-website\n```\n\n```systemd This example use all parameters and custom startup command in a website\nMAIN=index.js\nMEMORY=512\nVERSION=recommended\nDISPLAY_NAME=我的简单 Next.js 网站！\nSUBDOMAIN=my-nextjs-website\nSTART=npm run build && npm run start\n```\n\n# 多技术支持\n\n<CardGroup cols={2}>\n  <Card title=\"React\" icon=\"react\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-react-website\">\n    了解如何在 Square Cloud 上托管您的 React 网站。\n  </Card>\n\n  <Card title=\"Next.js\" icon=\"node-js\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-next-website\">\n    了解如何在 Square Cloud 上托管您的 Next.js 网站。\n  </Card>\n\n  <Card title=\"NestJs\" icon=\"js\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-nestjs-application\">\n    了解如何在 Square Cloud 上托管您的 NestJs 应用。\n  </Card>\n\n  <Card title=\"Vite\" icon=\"rocket\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-vite-website\">\n    了解如何在 Square Cloud 上托管您的 Vite 网站。\n  </Card>\n\n  <Card title=\"Vue\" icon=\"vuejs\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-vue-website\">\n    了解如何在 Square Cloud 上托管您的 Vue 网站。\n  </Card>\n\n  <Card title=\"Flask\" icon=\"flask\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-flask-application\">\n    了解如何在 Square Cloud 上托管您的 Flask 应用。\n  </Card>\n\n  <Card title=\"Django\" icon=\"python\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-django-application\">\n    了解如何在 Square Cloud 上托管您的 Django 应用。\n  </Card>\n\n  <Card title=\"Lavalink\" icon=\"java\" href=\"https://docs.squarecloud.app/tutorials/how-to-create-your-lavalink-server\">\n    了解如何托管您的 Lavalink 服务器，并向您的 Discord 机器人流式传输高质量音乐。\n  </Card>\n</CardGroup>\n\n按照这些步骤，您的网站或 API 即可在 Square Cloud 上平稳运行。如遇任何问题或需要进一步帮助，请随时联系我们的 [支持团队](../company/support)。\n"
    },
    "HXeR7IXfcx96": {
      "id": "HXeR7IXfcx96",
      "path": "deploys/whatsapp-bot",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "bot",
          "whatsapp"
        ]
      },
      "metadata": {
        "title": "在 Square Cloud 上托管 Whatsapp 机器人",
        "description": "本文指导您在 Square Cloud 上创建并托管一个 Whatsapp 机器人。",
        "slug": "在-square-cloud-上托管-whatsapp-机器人"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## 介绍\n\n- 在开始编码之前，需要正确设置您的 WhatsApp 机器人。首先，您需要在手机上下载 WhatsApp。如果您还没有它，可以访问 [WhatsApp 官方网站](https://www.whatsapp.com/coronavirus/get-started?lang=en)。安装并配置 WhatsApp 后，您就可以开始编写机器人程序。\n- 接下来，您需要在 Square Cloud 上创建一个帐户，可以通过 [注册页面](https://squarecloud.app/signup) 完成。您可以使用电子邮件创建帐户。\n- 最后，您的帐户需要有一个有效的付费计划。您可以在 [此处](https://squarecloud.app/plans) 查看我们的计划并根据需要购买。\n\n<AccordionGroup>\n  <Accordion title=\"WhatsApp Web 版本的远程路径\" icon=\"file\" iconType=\"solid\">\n    如果您的代码需要访问 WhatsApp Web 版本的远程路径，操作方式如下。\n    您可以访问 [wa-version](https://github.com/wppconnect-team/wa-version/tree/main/html)，选择所需版本（始终推荐使用最新版本），然后点击“Raw”。页面打开后，只需复制 URL，稍后将使用它。示例 URL：\n    \"https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2412.54.html\"\n\n    <Frame>\n      <img src=\"/images/articles/whatsapp/remote-path.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n# 启动项目\n\n1. 确保您的系统已安装 Node.js。如果没有，可以从 [Node.js 官方网站](https://nodejs.org/) 下载。\n2. 使用 `npm init` 初始化一个新的 Node.js 项目。这将为您的项目创建一个新的 `package.json` 文件：\n\n```bash\nnpm init -y\n```\n\n3. 使用 npm 安装 whatsapp-web.js 和 qrcode 库：\n\n```bash\nnpm install whatsapp-web.js qrcode\n```\n\n4. 创建一个新的 JavaScript 文件（例如 `index.js`），并添加以下代码以创建一个基本的 WhatsApp 机器人：\n\n```javascript index.js\n// 导入必要的模块\nconst { Client } = require(\"whatsapp-web.js\");\nconst qrcode = require(\"qrcode\");\n\n// 创建客户端的新实例\nconst client = new Client({\n  puppeteer: {\n    // 以无头模式（无 UI）运行 Chrome。\n    headless: true,\n    args: [\n      // 禁用 Chrome 的沙盒功能。在某些环境（如 Docker 容器）中运行 Puppeteer 时需要此项。\n      \"--no-sandbox\",\n      // 禁用 setuid 沙盒的附加标志。\n      \"--disable-setuid-sandbox\",\n    ],\n  },\n  // 设置 webVersionCache 选项\n  webVersionCache: {\n    // 设置类型为 \"remote\"，表示 WhatsApp Web 版本将从远程 URL 获取\n    type: \"remote\",\n    // 设置 WhatsApp Web 版本的远程路径\n    remotePath: \"URL PATH HERE\",\n  },\n});\n\n// 当 whatsapp-web.js 生成新的 QR 码时触发此事件\nclient.on(\"qr\", async (qr) => {\n  // 在此我们使用 qrcode 库生成二维码并保存为文件\n  try {\n    await qrcode.toFile(\"./qrcode.png\", qr);\n    console.log(\"QR 码已保存为 qrcode.png\");\n  } catch (err) {\n    console.error(err);\n  }\n});\n\n// 当 client 准备就绪时触发此事件\nclient.on(\"ready\", () => {\n  // 当客户端准备就绪时（即二维码扫描成功并启动 WhatsApp Web 会话后），将在控制台显示此日志\n  console.log(\"客户端已就绪！\");\n});\n\n// 当创建消息时触发此事件\nclient.on(\"message_create\", (msg) => {\n  // 在此我们将消息正文记录到控制台\n  console.log(msg.body);\n  // 如果消息为 \"!ping\"\n  if (msg.body == \"!ping\") {\n    // 回复 \"pong\"\n    msg.reply(\"pong\");\n  }\n});\n\n// 初始化 client\nclient.initialize();\n```\n\n## 创建 squarecloud 配置文件\n\n<Card title=\"了解更多：如何为 Square Cloud 创建配置文件。\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  squarecloud.app 文件是一个配置文件，用于配置您的应用；它将用于定义名称、描述、版本、主文件等信息。\n</Card>\n\n## 配置 START 字段\n\n<Warning>只有在您非常确定自己在做什么时才使用此字段。</Warning>\n\n在 Square Cloud 配置文件中，**START** 字段是可选的，仅在您使用自定义脚本启动机器人时需要。在提供的示例中，**START** 字段不是必需的。\n\n## 将项目上传到 Square Cloud\n\n准备好项目文件后，您现在可以将它们上传到 Square Cloud 并托管您的项目。\n\n<Tabs>\n  <Tab title=\"通过仪表板上传\">\n    访问 [Square Cloud 仪表板](https://squarecloud.app/dashboard/upload) 并上传您的项目文件。\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"通过 CLI 上传\">\n    <Steps>\n      <Step title=\"第一步\">\n        首先，您需要在环境中安装 CLI。如果尚未安装，请在终端运行以下命令：\n\n        ```bash\n        npm install -g @squarecloud/cli\n        ```\n\n        如果已安装，我们建议您更新它。为此，请在终端运行以下命令：\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS 和 WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"第二步\">\n        现在，要进行身份验证并使用其他 CLI 命令，您可以在 [此处](https://squarecloud.app/account) 单击“Request API Key”以查找您的授权密钥。获取授权密钥后，运行以下命令：\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"第三步\">\n        最后，要使用 CLI 将应用部署到 Square Cloud，您需要执行以下命令，并传递 zip 文件的路径：\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## 附加资源\n\n有关使用 whatsapp-web.js 创建机器人的更多信息，请访问 [whatsapp-web.js 官方文档](https://wwebjs.dev/)。在那里，您将找到详细指南、教程和 API 文档，帮助您充分利用这些库。\n\n如果您继续遇到任何问题，请随时 [联系我们的支持团队](/company/support)。\n"
    }
  },
  "snippets": {
    "_snippets/requirements-txt": {
      "path": "_snippets/requirements-txt",
      "content": "#### 📝 创建 requirements.txt 文件\n\n要创建 requirements.txt 文件，您需要在文件中列出所有依赖项。\n以下是包含 Flask 和 waitress 依赖项的示例。\n\n```txt\nflask\nwaitress\n```\n\n请注意，直接这样列出，包管理器将安装每个包的最新版本。\n如果您需要特定的版本，请使用两个等号加上对应的版本号。\n\n```txt\nflask==3.1.0\nwaitress==3.0.2\n```\n\n如果您使用 pip freeze 命令，它不仅会列出您的直接依赖，还会列出它们的依赖项。\n例如，如果您安装了 discord-py，pip 也会列出 aiohttp，这是 discord-py 的一个依赖。\n这会导致生成的文件比实际需要的大，并且如果在全局环境中使用，可能会包含来自其他项目的不必要依赖。\n"
    }
  }
}