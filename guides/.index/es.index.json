{
  "articles": {
    "6bxI5kS3rBKK": {
      "id": "6bxI5kS3rBKK",
      "path": "deploys/discord-bot",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "discord"
        ]
      },
      "metadata": {
        "title": "Alojando un Bot de Discord en Square Cloud",
        "description": "Este artículo te guía a través de la creación y el alojamiento de un bot de Discord en Square Cloud.",
        "slug": "alojando-un-bot-de-discord-en-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introducción\n\n- Antes de comenzar a programar, debes configurar correctamente tu bot en Discord. Primero, es necesario tener una cuenta de Discord. Si aún no tienes una, puedes crearla visitando el [sitio oficial de Discord](https://discord.com/).\n- A continuación, deberás crear una cuenta en Square Cloud, lo cual puedes hacer a través de la [página de registro](https://squarecloud.app/signup). Puedes usar tu correo electrónico para crear una cuenta.\n- Finalmente, necesitas tener un plan pago activo en tu cuenta. Puedes ver nuestros planes y adquirir uno según tus necesidades [aquí](https://squarecloud.app/plans).\n\n<AccordionGroup>\n  <Accordion title=\"Primeros pasos\" icon=\"rocket\" iconType=\"solid\">\n    Primero, ingresa al [Developer Portal](https://discord.com/developers/applications) y haz clic en \"New Application\". Luego, elige un nombre para tu bot y haz clic en \"Create\" para crearlo.\n\n    <Frame>\n      <img src=\"/images/articles/discord/getting-started.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Obtener el Token\" icon=\"key\" iconType=\"solid\">\n    Después de crear tu bot, es hora de obtener el token. Para ello, ve a la pestaña \"Bot\" y haz clic en \"Reset Token\", generando así tu token. Finalmente, cópialo para usarlo en tu código más adelante.\n\n    <Frame>\n      <img src=\"/images/articles/discord/getting-the-token.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Activar Intenciones Privilegiadas\" icon=\"message\" iconType=\"solid\">\n    Ahora que ya tienes el token de tu bot, necesitas activar las intenciones necesarias. Para ello, permanece en la pestaña \"Bot\", desplázate hacia abajo y busca \"Privileged Gateway Intents\". Aquí, activa las siguientes intenciones:\n\n    <Frame>\n      <img src=\"/images/articles/discord/intent.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n<Warning>Recuerda mantener el token de tu bot en secreto, ya que puede ser usado para controlar tu bot.</Warning>\n\n# Usando bibliotecas para la creación de bots\n\n<Tabs>\n  <Tab title=\"Discord.js\">\n    1. Asegúrate de tener Node.js instalado en tu sistema. Si no lo tienes, descárgalo desde el [sitio oficial de Node.js](https://nodejs.org/).\n    2. Inicializa un nuevo proyecto de Node.js usando `npm init`. Esto creará un archivo `package.json` para tu proyecto:\n\n    ```bash\n    npm init -y\n    ```\n\n    3. Instala la biblioteca discord.js usando npm:\n\n    ```bash\n    npm install discord.js\n    ```\n\n    4. Crea un nuevo archivo JavaScript (por ejemplo, `index.js`) y agrega el siguiente código para crear un bot básico:\n\n    ```javascript index.js\n    const { Client, GatewayIntentBits } = require(\"discord.js\");\n\n    const client = new Client({\n      intents: [\n        GatewayIntentBits.Guilds,\n        GatewayIntentBits.GuildMessages,\n        GatewayIntentBits.MessageContent,\n      ],\n    });\n\n    client.on(\"ready\", () => {\n      console.log(`${client.user.tag}!`);\n    });\n\n    client.on(\"messageCreate\", (message) => {\n      if (message.content === \"!hello\") {\n        message.reply(\"Hello!\");\n      }\n    });\n\n    client.login(\"your token here\");\n    ```\n  </Tab>\n\n  <Tab title=\"Discord.py\">\n    1. Asegúrate de tener Python instalado en tu sistema. Si no lo tienes, descárgalo desde el [sitio oficial de Python](https://www.python.org/).\n    2. Instala la biblioteca discord.py usando pip:\n\n    ```bash\n    pip install discord.py\n    ```\n\n    3. Crea un nuevo archivo Python (por ejemplo, `main.py`) y agrega el siguiente código para crear un bot básico:\n\n    ```python main.py\n    import discord\n    from discord.ext import commands\n\n    intents = discord.Intents.default()\n    intents.message_content = True\n\n    client = commands.Bot(command_prefix='!', intents=intents)\n\n    @client.event\n    async def on_ready():\n        print(f'{client.user}')\n\n    @client.command()\n    async def hello(ctx):\n        await ctx.reply('Hello!')\n\n    client.run('your token here')\n    ```\n\n    4. Crea un archivo `requirements.txt` para listar todas las bibliotecas externas necesarias para tu proyecto:\n\n    ```txt requirements.txt\n    discord.py\n    ```\n  </Tab>\n</Tabs>\n\n## Creando el archivo de configuración de Square Cloud\n\n<Card title=\"Aprende más: cómo crear el archivo de configuración para Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  El archivo `squarecloud.app` es un archivo de configuración que se usará para configurar tu aplicación; define el nombre, descripción, versión, archivo principal, entre otros.\n</Card>\n\n## Configuración del campo START\n\n<Warning>Usa este campo solo si estás seguro de lo que estás haciendo.</Warning>\n\nEn el archivo de configuración de Square Cloud, el **START** es opcional y solo es necesario si utilizas un script personalizado para iniciar el bot. En el ejemplo proporcionado, el **START** no es necesario.\n\n## Subiendo tu proyecto a Square Cloud\n\nDespués de seguir todos los pasos, comprime los archivos de tu aplicación en un archivo zip donde esté el archivo de configuración y sube el bot en [Upload](https://squarecloud.app/dashboard/upload). Recuerda incluir el `requirements.txt` o `package.json`, pero no incluyas carpetas como `__pycache__` o `node_modules`. Puedes obtener más información sobre archivos innecesarios al alojar en [automatic-file-deletion-when-deploying-an-application-on-squarecloud](https://docs.squarecloud.app/faqs/automatic-file-deletion-when-deploying-an-application-on-squarecloud).\n\n## Probando el Bot\n\nSi todo está configurado correctamente, el siguiente paso es invitar a tu bot para pruebas. Para ello, sigue estos pasos:\n\n1. Accede al [Developer Portal](https://discord.com/developers/applications).\n2. Selecciona tu bot.\n3. Navega hasta la pestaña \"OAuth2\".\n4. Ve a \"OAuth2 URL Generator\".\n5. Marca la opción \"bot\".\n6. Elige los permisos que tendrá tu bot al ser invitado.\n7. Debajo de los permisos, se generará un enlace de invitación para tu bot. Debería ser algo como:\n\n   ```txt\n   https://discord.com/oauth2/authorize?client_id=00000000000000&permissions=8&scope=bot\n   ```\n\nRecuerda, el `client_id` en la URL debe reemplazarse por el ID real de tu bot. El valor de `permissions` también puede necesitar ajustes según los permisos deseados.\n\nAhora, para probar si todo funciona, ejecuta el siguiente comando en tu servidor: `!hello`.\n\n<Frame>\n  <img src=\"/images/articles/discord/testing-bot.png\" style={{ borderRadius: \"0.2rem\" }} />\n</Frame>\n\n## Recursos Adicionales\n\nPara más información sobre la creación de bots con discord.py y discord.js, visita la [documentación oficial de discord.py](https://discordpy.readthedocs.io/en/latest/) y la [guía oficial de discord.js](https://discordjs.guide/). Allí encontrarás guías detalladas, tutoriales y documentación de la API para ayudarte a aprovechar al máximo estas bibliotecas.\n\nSi sigues teniendo problemas, no dudes en [contactar a nuestro time de soporte](/company/support).\n"
    },
    "s8otOA6S1DKJ": {
      "id": "s8otOA6S1DKJ",
      "path": "deploys/django-application",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "website"
        ]
      },
      "metadata": {
        "title": "Alojando una Aplicación Django en Square Cloud",
        "description": "Este artículo te guía en la creación y el alojamiento de una aplicación Django en Square Cloud.",
        "slug": "alojando-una-aplicacion-django-en-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Creación de un Nuevo Proyecto Django\n\n- Antes de comenzar, asegúrate de tener Python y pip instalados en tu sistema. Si aún no los tienes, puedes descargarlos desde el [sitio oficial de Python](https://www.python.org/) y el [sitio oficial de Pip](https://pypi.org/).\n- A continuación, necesitarás crear una cuenta en Square Cloud, lo que puede hacerse a través de la [página de registro](https://squarecloud.app/signup). Puedes usar tu correo electrónico para crear la cuenta.\n- Por último, debes tener un plan pago activo en tu cuenta. Puedes ver nuestros planes y adquirir uno según tus necesidades [aquí](https://squarecloud.app/plans).\n\nCon Python y pip instalados, puedes crear un nuevo proyecto Django. Primero, instala Django usando pip:\n\n\\`\\`\\`bash\npip install django\n\\`\\`\\`\n\nLuego, crea un nuevo archivo Python (por ejemplo, \\`app.py\\`) y añade el siguiente código para crear una aplicación Django básica:\n\n\\`\\`\\`python app.py\nfrom django.conf import settings\nfrom django.http import HttpResponse\nfrom django.urls import path\nfrom django.core.wsgi import get\\_wsgi\\_application\n\n# Configuración básica de Django\n\nsettings.configure(\nDEBUG=False,  # Desactiva el modo de depuración\nSECRET\\_KEY='mysecretkey',  # Establece tu clave secreta\nALLOWED\\_HOSTS=\\['\\*'],  # Permite todos los hosts por simplicidad\nROOT\\_URLCONF=**name**,  # Define la configuración de URL raíz para este módulo\nMIDDLEWARE\\_CLASSES=(),  # Usa una tupla vacía para desactivar middleware\n)\n\n# Vista simple\n\ndef index(request):\nreturn HttpResponse(\"Hello world!\")  # Devuelve una respuesta HTTP simple\n\n# Configuración de URLs\n\nurlpatterns = \\[\npath('', index),  # Mapea la URL raíz a la vista index\n]\n\n# Aplicación WSGI\n\napplication = get\\_wsgi\\_application()\n\n# Servidor WSGI\n\nif **name** == \"**main**\":\nfrom wsgiref.simple\\_server import make\\_server\nhttpd = make\\_server('', 80, application)  # Sirve la aplicación usando el servidor WSGI en el puerto 80\nprint(\"Servidor Django ejecutándose en el puerto 80...\")\nhttpd.serve\\_forever()  # Inicia el servidor\n\\`\\`\\`\n\nEn el código anterior, creamos una ruta básica que devuelve \"Hello, World!\" cuando se accede a ella. La aplicación está configurada para ejecutarse en el puerto 80, que es el puerto predeterminado para el tráfico HTTP.\n\n## Gestión de Dependencias con el archivo requirements.txt\n\nEl archivo \\`requirements.txt\\` es un archivo que lista todas las bibliotecas externas necesarias para tu proyecto. Debes listar todas las bibliotecas que use tu proyecto, excluyendo bibliotecas nativas como \\`random\\` y \\`datetime\\`. Este archivo debe incluirse al enviar tu aplicación a Square Cloud.\n\n\\`\\`\\`txt requirements.txt\ndjango\n\\`\\`\\`\n\n## Creación del archivo de configuración squarecloud\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  El archivo squarecloud.app es un archivo de configuración que se usará para configurar tu aplicación; se utilizará para definir el nombre, descripción, versión, archivo principal, entre otras cosas.\n</Card>\n\n## Configuración del Campo START\n\nEn el archivo de configuración de Square Cloud, el campo **START** es opcional y solo es necesario si utilizas un script personalizado para iniciar el sitio web. En el ejemplo proporcionado, el campo **START** no es necesario.\n\n## Compra de un Plan Antes de Subir tu Proyecto\n\nAntes de poder subir tu proyecto a Square Cloud, es importante entender que necesitas adquirir un plan. El tipo de plan que elijas dependerá de los recursos que requiera tu aplicación. Puedes ver nuestros planes [aquí](https://squarecloud.app/plans).\n\n<Note>**¿Te preguntas cuánta RAM y CPU necesita tu plan para alojar una aplicación Django?** No te preocupes, estamos aquí para ayudar. Django es un framework web de Python de alto nivel que fomenta el desarrollo rápido y un diseño limpio y pragmático. Está creado por desarrolladores experimentados y se encarga de gran parte del trabajo pesado del desarrollo web, para que puedas concentrarte en escribir tu aplicación sin necesidad de reinventar la rueda. Nuestro plan **[Standard](https://squarecloud.app/pay/standard)** ofrece **4GB** de RAM y **4vCPU**, lo que debería ser suficiente para la mayoría de las aplicaciones Django. Sin embargo, si trabajas en un proyecto más grande y buscas mayor estabilidad, te recomendamos considerar nuestro plan Pro. Con recursos adicionales, podrás mantener la estabilidad incluso durante picos de demanda. Para comprarlo, simplemente haz clic [aquí](https://squarecloud.app/pay/pro).</Note>\n\n## Subiendo el Proyecto a Square Cloud\n\nDespués de preparar los archivos de tu proyecto, ahora puedes subirlos a Square Cloud y alojar tu proyecto.\n\n<Tabs>\n  <Tab title=\"Dashboard Upload\">\n    Accede al [Panel de Square Cloud](https://squarecloud.app/dashboard/upload) y sube los archivos de tu proyecto.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"CLI Upload\">\n    <Steps>\n      <Step title=\"First Step\">\n        Primero, debes tener instalada la CLI en tu entorno. Si aún no la tienes, ejecuta el siguiente comando en tu terminal:\n\n        \\`\\`\\`\n        npm install -g @squarecloud/cli\n        \\`\\`\\`\n\n        Si ya la tienes, te recomendamos actualizarla. Para ello, ejecuta el siguiente comando en tu terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            \\`\\`\\`bash\n            squarecloud update\n            \\`\\`\\`\n          </Tab>\n\n          <Tab title=\"Linux, macOS, and WSL\">\n            \\`\\`\\`bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            \\`\\`\\`\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Second Step\">\n        Ahora, para autenticarte y usar otros comandos de la CLI, encontrarás tu clave de autorización [aquí](https://squarecloud.app/account) haciendo clic en \"Request API Key\". Después de obtener tu clave de autorización, ejecuta el siguiente comando:\n\n        \\`\\`\\`bash\n        squarecloud login\n        \\`\\`\\`\n      </Step>\n\n      <Step title=\"Third Step\">\n        Finalmente, para desplegar tu aplicación en Square Cloud usando la CLI, debes ejecutar el siguiente comando, pasando la ruta de tu archivo zip:\n\n        \\`\\`\\`bash\n        squarecloud upload zip\n        \\`\\`\\`\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Solución de Problemas\n\n<AccordionGroup>\n  <Accordion title=\"Custom Domain\" icon=\"globe\" iconType=\"solid\">\n    Si deseas usar un dominio personalizado para tu aplicación alojada en Square Cloud, ten en cuenta que, por defecto, la URL será algo como \\`https://mysite.squareweb.app/\\`. El subdominio se determina por el campo SUBDOMAIN en el archivo de configuración. Sin embargo, si prefieres usar un dominio personalizado, como \\`mysite.com\\`, necesitarás adquirir el plan \\`Standard\\` o superior. Detallamos cada paso para configurar tu dominio personalizado en nuestro artículo: [Cómo Configurar tu Dominio Personalizado](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Minimum RAM Requirements\" icon=\"memory\" iconType=\"solid\">\n    La cantidad mínima de RAM necesaria para alojar un sitio web o API es de 512MB. Sin embargo, dependiendo del tamaño y la complejidad de tu aplicación Django, puede ser aconsejable usar una mayor cantidad de RAM para evitar el error [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM).\n  </Accordion>\n\n  <Accordion title=\"Temporary Access Denied\" icon=\"ban\" iconType=\"solid\">\n    Si recibes el mensaje \"Your access has been temporarily denied.\" al intentar acceder al sitio, espera un tiempo. Si el problema persiste, no dudes en contactarnos en https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Website took too long to respond...\" icon=\"clock\" iconType=\"solid\">\n    Si recibes el mensaje \"Website took too long to respond...\" asegúrate de haber configurado correctamente el puerto 80 en tu aplicación. Si el problema persiste, no dudes en contactarnos en https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Recursos Adicionales\n\nPara obtener más información sobre Django y sus herramientas, visita la [documentación oficial de Django](https://docs.djangoproject.com/en/5.0/). Allí encontrarás guías detalladas, tutoriales y documentación de la API para ayudarte a aprovechar al máximo Django.\n\nSi continúas experimentando problemas, no dudes en [contactar a nuestro equipo de soporte](/company/support).\n"
    },
    "9n7micjyDln3": {
      "id": "9n7micjyDln3",
      "path": "deploys/express-application",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "nodejs"
        ]
      },
      "metadata": {
        "title": "Alojando una Aplicación Express en Square Cloud",
        "description": "Este artículo te guía en la creación y alojamiento de una aplicación Express en Square Cloud",
        "slug": "alojando-una-aplicacion-express-en-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introducción\n\n- Antes de comenzar, asegúrate de tener Node.js y npm instalados en tu sistema. Si aún no los tienes, puedes descargarlos desde el [sitio oficial de Node.js](https://nodejs.org/).\n- Luego, necesitarás crear una cuenta en Square Cloud, lo cual puedes hacer desde la [página de registro](https://squarecloud.app/signup). Puedes usar tu correo electrónico para crear la cuenta.\n- Finalmente, debes tener un plan de pago activo en tu cuenta. Puedes ver nuestros planes y adquirir uno según tus necesidades [aquí](https://squarecloud.app/plans).\n\n### Configuración de Express\n\nPara usar Express, instálalo en tu sistema. Ejecuta el siguiente comando:\n\n```bash\nnpm install express\n```\n\n### Creando un Proyecto Express\n\nPara crear un nuevo proyecto Express, crea un archivo y escribe el siguiente código:\n\n```javascript app.js\n// Importando el módulo Express\nconst express = require('express');\n\n// Creando una nueva aplicación Express\nconst app = express();\n\n// Definiendo el puerto 80\n// El puerto 80 es el puerto predeterminado para tráfico HTTP.\nconst port = 80;\n\n// Definiendo un manejador para la ruta '/'\n// Este manejador envía 'Hello World!' al acceder.\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\n// Haciendo que nuestra aplicación Express escuche en el puerto 80\napp.listen(port, () => {\n  // Este bloque se ejecuta una vez que el servidor está escuchando en el puerto 80\n  console.log(`Example app listening on port \\${port}`);\n});\n```\n\n## Creando el archivo de configuración squarecloud.app\n\n<Card title=\"Aprende más: cómo crear el archivo de configuración para Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  El archivo `squarecloud.app` es un archivo de configuración que define el nombre, descripción, versión, archivo principal, entre otros detalles de tu aplicación.\n</Card>\n\n## Configuración del campo START\n\nEn el archivo de configuración de Square Cloud, el campo **START** es opcional y solo es necesario si usas un script personalizado para iniciar el sitio o la API. En el ejemplo proporcionado, el campo **START** no es necesario.\n\n## Comprar un Plan Antes de Subir Tu Proyecto\n\nAntes de subir tu proyecto a Square Cloud, necesitas adquirir un plan. El tipo de plan dependerá de los recursos que requiera tu aplicación. Puedes ver nuestros planes [aquí](https://squarecloud.app/plans).\n\n<Note>**¿Te preguntas cuánta RAM y CPU necesita tu plan para alojar una aplicación Express?** No te preocupes, estamos aquí para ayudar. Express.js es un framework para Node.js que ofrece funciones mínimas para construir servidores web. Es fácil de aprender, muy flexible y adecuado para una amplia gama de aplicaciones. Nuestro plan **[Standard](https://squarecloud.app/pay/standard)** ofrece **4GB** de RAM y **4vCPU**, suficientes para la mayoría de aplicaciones Express. Sin embargo, si trabajas en un proyecto más grande o necesitas más estabilidad, te recomendamos el plan Pro. Con recursos adicionales, puedes garantizar un rendimiento fluido incluso bajo alta demanda. Para adquirirlo, haz clic [aquí](https://squarecloud.app/pay/pro).</Note>\n\n## Subiendo el Proyecto a Square Cloud\n\nDespués de preparar tus archivos, puedes subirlos a Square Cloud y alojar tu proyecto.\n\n<Tabs>\n  <Tab title=\"Subida por Dashboard\">\n    Accede al [Dashboard de Square Cloud](https://squarecloud.app/dashboard/upload) y sube tus archivos.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Subida por CLI\">\n    <Steps>\n      <Step title=\"Primer Paso\">\n        Primero, instala el CLI. Si no lo tienes, ejecuta:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        Si ya lo tienes, te recomendamos actualizarlo con:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS y WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo Paso\">\n        Para autenticarte y usar otros comandos del CLI, obtén tu clave [aquí](https://squarecloud.app/account) haciendo clic en “Request API Key”. Luego ejecuta:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Tercer Paso\">\n        Finalmente, para desplegar tu aplicación vía CLI, ejecuta pasando la ruta de tu zip:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Solución de Problemas\n\n<AccordionGroup>\n  <Accordion title=\"Dominio Personalizado\" icon=\"globe\" iconType=\"solid\">\n    Si quieres usar un dominio personalizado, por defecto la URL será `https://mysite.squareweb.app/`. El subdominio se define con el campo SUBDOMAIN. Para usar `mysite.com`, necesitas el plan Standard o superior. Consulta: [Cómo configurar dominio personalizado](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Requisitos Mínimos de RAM\" icon=\"memory\" iconType=\"solid\">\n    El mínimo de RAM para alojar un sitio o API es 512MB. Sin embargo, según tu aplicación Express, puede convenir más RAM para evitar el error [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM).\n  </Accordion>\n\n  <Accordion title=\"Acceso Temporalmente Denegado\" icon=\"ban\" iconType=\"solid\">\n    Si recibes “Your access has been temporarily denied.”, espera un momento. Si persiste, contáctanos en https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"El sitio tardó demasiado en responder...\" icon=\"clock\" iconType=\"solid\">\n    Si recibes “Website took too long to respond...”, asegúrate de configurar correctamente el puerto 80. Si persiste, contáctanos en https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Recursos Adicionales\n\nPara más información sobre Express, visita la [documentación oficial de Express](https://expressjs.com/). Allí encontrarás guías detallados, tutoriales y documentación de API.\n\nSi sigues teniendo problemas, no dudes en [contactar a nuestro equipo de soporte](/company/support).\n"
    },
    "mUz0Qm8wdgsu": {
      "id": "mUz0Qm8wdgsu",
      "path": "deploys/fastify-application",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "nodejs",
          "fastify"
        ]
      },
      "metadata": {
        "title": "Alojando una Aplicación Fastify en Square Cloud",
        "description": "Este artículo te guía en la creación y alojamiento de una aplicación Fastify en Square Cloud",
        "slug": "alojando-una-aplicacion-fastify-en-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introducción\n\n- Antes de empezar, asegúrate de tener Node.js y npm instalados. Si no, descárgalos desde la [página oficial de Node.js](https://nodejs.org/).\n- Luego, crea una cuenta en Square Cloud desde la [página de registro](https://squarecloud.app/signup) usando tu correo electrónico.\n- Finalmente, necesitas un plan de pago activo. Consulta y adquiere un plan según tus necesidades [aquí](https://squarecloud.app/plans).\n\n### Configuración de Fastify\n\nInstala Fastify:\n\n```bash\nnpm install fastify\n```\n\n### Creación de un proyecto Fastify\n\nCrea un archivo y agrega:\n\n```javascript app.js\n// Importando el módulo Fastify\nconst fastify = require('fastify')({ logger: true });\n\n// Manejador para la ruta '/'\nfastify.get('/', async (request, reply) => {\n  return 'Hello World!';\n});\n\n// Iniciando Fastify en el puerto 80\nfastify.listen({ port: 80 })\n  .then((address) => {\n    fastify.log.info(`Example app listening at \\${address}`);\n  })\n  .catch((err) => {\n    fastify.log.error(err);\n    process.exit(1);\n  });\n```\n\n## Creación del archivo de configuración squarecloud\n\n<Card title=\"Aprende a crear el archivo de configuración para Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  El archivo `squarecloud.app` configura nombre, descripción, versión, archivo principal y más.\n</Card>\n\n## Configuración del campo START\n\nEl campo **START** es opcional y solo necesario si utilizas un script personalizado de inicio.\n\n## Compra de un plan antes de subir\n\nDebes comprar un plan acorde a los recursos de tu aplicación. Revisa los planes [aquí](https://squarecloud.app/plans).\n\n<Note>**¿Cuánta RAM y CPU necesitas?** El plan **[Standard](https://squarecloud.app/pay/standard)** ofrece **4 GB de RAM** y **4 vCPU**, suficiente para la mayoría de los proyectos. Para aplicaciones grandes, considera el plan Pro [aquí](https://squarecloud.app/pay/pro).</Note>\n\n## Subida del proyecto a Square Cloud\n\n<Tabs>\n  <Tab title=\"Subida desde el panel\">\n    Ve al [Dashboard de Square Cloud](https://squarecloud.app/dashboard/upload) y sube tus archivos.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Subida por CLI\">\n    <Steps>\n      <Step title=\"Primer paso\">\n        Instala la CLI:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        O actualízala:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS y WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo paso\">\n        Obtén tu clave API [aquí](https://squarecloud.app/account) y autentícate:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Tercer paso\">\n        Despliega con:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Solución de problemas\n\n<AccordionGroup>\n  <Accordion title=\"Dominio personalizado\" icon=\"globe\" iconType=\"solid\">\n    Por defecto, la URL es `https://mysite.squareweb.app/`. Para usar `mysite.com`, compra al menos el plan Standard y sigue [estos pasos](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"RAM mínima necesaria\" icon=\"memory\" iconType=\"solid\">\n    La RAM mínima es 512 MB. Para evitar [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM) pueden requerirse más.\n  </Accordion>\n\n  <Accordion title=\"Acceso temporalmente denegado\" icon=\"ban\" iconType=\"solid\">\n    Si ves “Your access has been temporarily denied.”, espera. Si continúa, contacta https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"El sitio tardó demasiado en responder\" icon=\"clock\" iconType=\"solid\">\n    Verifica el puerto 80. Si persiste, contacta https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Recursos adicionales\n\nPara más información sobre Fastify, visita la [documentación oficial](https://fastify.dev/).\n\n¿Necesitas ayuda? [Contacta al soporte](/company/support).\n"
    },
    "4eI5mGTgNL7Z": {
      "id": "4eI5mGTgNL7Z",
      "path": "deploys/flask-application",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "python",
          "flask"
        ]
      },
      "metadata": {
        "title": "Alojando una Aplicación Flask en Square Cloud",
        "description": "Este artículo te guía en la creación y alojamiento de una aplicación Flask en Square Cloud.",
        "slug": "alojando-una-aplicacion-flask-en-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Creación de un nuevo proyecto Flask\n\n- Antes de comenzar, asegúrate de tener Python y pip instalados. Si no, descárgalos desde el [sitio oficial de Python](https://www.python.org/) y el [sitio oficial de Pip](https://pypi.org/).\n- Luego, crea una cuenta en Square Cloud a través de la [página de registro](https://squarecloud.app/signup) usando tu correo electrónico.\n- Finalmente, necesitas un plan de pago activo. Consulta y adquiere un plan según tus necesidades [aquí](https://squarecloud.app/plans).\n\nCon Python y pip instalados, crea un nuevo proyecto Flask. Primero, instala Flask y Waitress con pip:\n\n```bash\npip install flask\npip install waitress\n```\n\nDespués, crea un archivo Python (por ejemplo, `app.py`) y agrega el siguiente código para una aplicación Flask básica:\n\n```python\n# Importar la clase Flask del módulo flask\nfrom flask import Flask\n\n# Crear una instancia de Flask\napp = Flask(__name__)\n\n# Definir una ruta para la URL raíz (/) que devuelve 'Hello, World!'\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n# Verificar si este script se ejecuta directamente\nif __name__ == '__main__':\n    # Ejecutar la aplicación Flask en el host 0.0.0.0 y puerto 80\n    app.run(host='0.0.0.0', port=80)\n```\n\n## Configuración del entorno de producción con Waitress\n\n```python\nfrom flask import Flask\n\n# Crear la instancia de la aplicación Flask\napp = Flask(__name__)\n\n# Definir una ruta para la URL raíz (/) que devuelve 'Hello, World!'\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\n# Si este script se ejecuta directamente\nif __name__ == '__main__':\n    from waitress import serve  # Importar la función serve de Waitress\n    \n    # Servir la aplicación Flask con Waitress en el host 0.0.0.0 y puerto 80\n    serve(app, host='0.0.0.0', port=80)\n    \n    # Imprimir mensaje de inicio exitoso\n    print(\"Servidor iniciado correctamente en el puerto 80.\")\n```\n\nEn el código anterior creamos una ruta básica que devuelve “Hello, World!”. La aplicación se ejecuta en el puerto 80, puerto por defecto para HTTP.\n\n## Gestión de dependencias con requirements.txt\n\nEl archivo `requirements.txt` lista todas las librerías externas necesarias. Incluye las librerías usadas, excluyendo las nativas como `random` y `datetime`. Debe incluirse al enviar la aplicación a Square Cloud.\n\n```txt requirements.txt\nflask\n```\n\n## Creación del archivo de configuración squarecloud\n\n<Card title=\"Aprende a crear el archivo de configuración para Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  El archivo `squarecloud.app` configura nombre, descripción, versión, archivo principal, entre otros.\n</Card>\n\n## Configuración del campo START\n\nEl campo **START** es opcional y solo necesario si utilizas un script personalizado. En este ejemplo no es necesario.\n\n## Compra de un plan antes de subir el proyecto\n\nDebes comprar un plan acorde a los recursos que requiere tu aplicación. Revisa los planes [aquí](https://squarecloud.app/plans).\n\n<Note>**¿Cuánta RAM y CPU necesitas para hospedar una aplicación Flask?** Flask es eficiente, ideal para proyectos pequeños. El plan **[Standard](https://squarecloud.app/pay/standard)** ofrece **4 GB de RAM** y **4 vCPU**, suficiente para la mayoría. Para proyectos grandes, considera el plan Pro [aquí](https://squarecloud.app/pay/pro).</Note>\n\n## Subida del proyecto a Square Cloud\n\n<Tabs>\n  <Tab title=\"Subida desde el panel\">\n    Accede al [Dashboard de Square Cloud](https://squarecloud.app/dashboard/upload) y sube tus archivos.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Subida por CLI\">\n    <Steps>\n      <Step title=\"Primer paso\">\n        Instala la CLI:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        O actualízala:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS y WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo paso\">\n        Obtén tu clave API [aquí](https://squarecloud.app/account) y autentícate:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Tercer paso\">\n        Despliega la aplicación indicando la ruta del zip:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Solución de problemas\n\n<AccordionGroup>\n  <Accordion title=\"Dominio personalizado\" icon=\"globe\" iconType=\"solid\">\n    Por defecto, la URL será `https://mysite.squareweb.app/`. Para usar `mysite.com`, compra al menos el plan Standard. Sigue [esta guía](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"RAM mínima requerida\" icon=\"memory\" iconType=\"solid\">\n    La RAM mínima es 512 MB. Según el tamaño del proyecto Flask, podría necesitar más para evitar el error [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM).\n  </Accordion>\n\n  <Accordion title=\"Acceso temporalmente denegado\" icon=\"ban\" iconType=\"solid\">\n    Si aparece “Your access has been temporarily denied.” espera un momento. Si persiste, contacta https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"El sitio tardó demasiado en responder\" icon=\"clock\" iconType=\"solid\">\n    Verifica la configuración del puerto 80. Si persiste, contacta https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Recursos adicionales\n\nPara más información sobre Flask, visita la [documentación oficial](https://flask.palletsprojects.com/en/3.0.x/).\n\n¿Necesitas ayuda? [Contacta al soporte](/company/support).\n"
    },
    "L5I0YzAVVaYa": {
      "id": "L5I0YzAVVaYa",
      "path": "deploys/lavalink-server",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "lavalink",
          "java"
        ]
      },
      "metadata": {
        "title": "Cómo crear tu Servidor Lavalink",
        "description": "Aprende cómo alojar tu servidor Lavalink y transmitir música de alta calidad a tu bot de Discord.",
        "slug": "como-crear-tu-servidor-lavalink"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introducción 🚀\n\n- Sigue el tutorial y hospeda tu servidor **Lavalink** hoy mismo; ¡es muy sencillo! Si necesitas ayuda, contáctanos por los canales oficiales de soporte.\n- Luego, crea una cuenta en Square Cloud en la [página de registro](https://squarecloud.app/signup) con tu correo electrónico.\n- Finalmente, asegúrate de tener un plan de pago activo. Consulta y adquiere un plan según tus necesidades [aquí](https://squarecloud.app/plans).\n\n## Elegir la versión\n\nSelecciona la versión deseada de **Lavalink** haciendo clic [aquí](https://github.com/freyacodes/Lavalink/releases/). Recomendamos la versión más reciente.\n\n## Creación del archivo de configuración squarecloud\n\n<Card title=\"Aprende a crear el archivo de configuración para Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  El archivo `squarecloud.app` configura nombre, descripción, versión, archivo principal y más.\n</Card>\n\n## Creación de application.yml\n\nCrea el archivo de configuración de tu servidor Lavalink. Puedes ver un ejemplo [aquí](https://github.com/freyacodes/Lavalink/blob/master/LavalinkServer/application.yml.example).\n\n<Warning>Configura el campo `port` en tu `application.yml` a: `80`.</Warning>\n\n## Mejorando la seguridad\n\nSe recomienda usar una contraseña segura en el campo `password` de `application.yml`. Usa al menos 32 caracteres.\n\n<Note>Recuerda usar el puerto 443 (SSL) y establecer `secure` en `true` para conectar a Lavalink.</Note>\n\n## Subida del proyecto a Square Cloud\n\nCrea un archivo `.zip` con `Lavalink.jar` y `application.yml` y súbelo a Square Cloud.\n\n<Tabs>\n  <Tab title=\"Subida desde el panel\">\n    Accede al [Dashboard de Square Cloud](https://squarecloud.app/dashboard/upload) y sube tus archivos.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Subida por CLI\">\n    <Steps>\n      <Step title=\"Primer paso\">\n        Instala la CLI:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        Para actualizar:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS y WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo paso\">\n        Obtén tu API Key [aquí](https://squarecloud.app/account) y haz login:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Tercer paso\">\n        Despliega indicando la ruta del zip:\n\n        ```bash\n        squarecloud upload server.zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\nSi aún tienes problemas, [contacta al equipo de soporte](/company/support).\n"
    },
    "w1gmUmjmk3bD": {
      "id": "w1gmUmjmk3bD",
      "path": "deploys/nestjs-application",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "nodejs",
          "nest"
        ]
      },
      "metadata": {
        "title": "Alojando una Aplicación Nestjs en Square Cloud",
        "description": "Este artículo te guía en la creación y alojamiento de una aplicación Nestjs en Square Cloud",
        "slug": "alojando-una-aplicacion-nestjs-en-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introducción\n\n- Antes de empezar, asegúrate de tener Node.js y npm instalados. Si no, descárgalos desde el [sitio oficial de Node.js](https://nodejs.org/).\n- Luego, crea una cuenta en Square Cloud en la [página de registro](https://squarecloud.app/signup).\n- Finalmente, ten un plan de pago activo. Consulta los planes [aquí](https://squarecloud.app/plans).\n\n### Configurar el CLI de NestJS\n\nInstala el CLI globalmente:\n\n```bash\nnpm install -g @nestjs/cli\n```\n\n### Crear un proyecto NestJS\n\n```bash\nnest new my-app\n```\n\n## Configurar el puerto 80\n\nEdita `src/main.ts`:\n\n```typescript\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(80);\n}\nbootstrap();\n```\n\n## Compilar la aplicación\n\n```bash\nnpm run build\n```\n\n## Crear el archivo de configuración squarecloud\n\n<Card title=\"Aprende a crear el archivo de configuración de Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  El archivo `squarecloud.app` define nombre, descripción, versión, archivo principal y más.\n</Card>\n\n## Configurar el campo MAIN\n\n```app squarecloud.app\nMAIN=dist/main.js\n```\n\n## Comprar un plan antes de subir\n\n<Note>**¿Cuánta RAM/CPU necesitas?** El plan **[Standard](https://squarecloud.app/pay/standard)** (4 GB RAM, 4 vCPU) es suficiente para la mayoría de apps NestJS. Para proyectos grandes, considera el plan Pro [aquí](https://squarecloud.app/pay/pro).</Note>\n\n\\[Secciones restantes idénticas al original con backticks escapados.]\n"
    },
    "veHHIeGEZwPG": {
      "id": "veHHIeGEZwPG",
      "path": "deploys/next-website",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "nodejs",
          "next"
        ]
      },
      "metadata": {
        "title": "Alojando un Sitio Web Next.js en Square Cloud",
        "description": "Este artículo te guía en la creación y alojamiento de un sitio web Next.js en Square Cloud.",
        "slug": "alojando-un-sitio-web-nextjs-en-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introducción\n\n- Antes de comenzar, asegúrate de que tienes Node.js y npm instalados en tu sistema. Si aún no los tienes, puedes descargarlos desde el [sitio oficial de Node.js](https://nodejs.org/).\n- A continuación, deberás crear una cuenta en Square Cloud, lo cual puede hacerse a través de la [página de registro](https://squarecloud.app/signup). Puedes usar tu correo electrónico para crear la cuenta.\n- Finalmente, necesitas tener un plan de pago activo en tu cuenta. Puedes ver nuestros planes y adquirir uno según tus necesidades [aquí](https://squarecloud.app/plans).\n\n### Creando un Proyecto Next.js\n\nPara crear un nuevo proyecto Next.js, ejecuta el siguiente comando:\n\n```bash\nnpx create-next-app@latest my-app\n```\n\nEn este comando, `my-app` es el nombre de tu nuevo proyecto. Puedes reemplazar `my-app` con cualquier nombre que desees para tu proyecto. El comando `npx` es una herramienta que viene con `npm`, el gestor de paquetes de Node.js. Se utiliza para ejecutar paquetes de Node.js instalados localmente en tu proyecto o disponibles de forma remota en el registro npm.\n\n`create-next-app` es un paquete disponible en el registro npm que configura un nuevo proyecto Next.js por ti. Se encarga de toda la configuración inicial, como crear el directorio del proyecto, instalar las dependencias necesarias y configurar archivos básicos.\n\n`@latest` es una etiqueta que especifica que deseas usar la versión más reciente del paquete `create-next-app`. Esto garantiza que siempre estés usando la versión más actualizada y, en consecuencia, tengas acceso a las últimas funcionalidades.\n\n## Configurando el Puerto 80\n\nEl puerto 80 es el puerto predeterminado para el tráfico HTTP. Para alojar un sitio Next.js en Square Cloud, es crucial configurar el uso del puerto 80. En Next.js, puedes establecer el parámetro `-p 80` en el script de inicio para garantizar que tu sitio se ejecute correctamente en este puerto.\n\n## Creando el archivo de configuración squarecloud\n\n<Card title=\"Aprende sobre: cómo crear el archivo de configuración para Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  El archivo `squarecloud.app` es un archivo de configuración que se utilizará para configurar tu aplicación; se usará para definir el nombre, descripción, versión, archivo principal, entre otras cosas.\n</Card>\n\n## Configurando el Campo START\n\nEn el archivo de configuración de Square Cloud, el campo `START` es esencial para personalizar el comando de inicio. Si deseas compilar e iniciar tu sitio en Square Cloud, configura el campo `START` de la siguiente manera:\n\n```app squarecloud.app\nSTART=npm run build && npm run start\n```\n\nEste comando ejecutará los scripts \"build\" y \"start\" definidos en tu `package.json`:\n\n```json package.json\n{\n  \"name\": \"my-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start -p 80\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"next\": \"14.1.0\"\n  },\n  \"devDependencies\": {\n    \"autoprefixer\": \"^10.0.1\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.3.0\",\n    \"eslint\": \"^8\",\n    \"eslint-config-next\": \"14.1.0\"\n  }\n}\n```\n\n## Adquiriendo un Plan Antes de Subir Tu Proyecto\n\nAntes de poder subir tu proyecto a Square Cloud, es importante entender que necesitas adquirir un plan. El tipo de plan que elijas dependerá de los recursos requeridos por tu aplicación. Puedes ver nuestros planes [aquí](https://squarecloud.app/plans).\n\n<Note>**¿Te preguntas cuánta RAM y CPU necesita tu plan para alojar un sitio Next.js?** No te preocupes, estamos aquí para ayudar. Next.js es un framework de React conocido por sus capacidades de renderizado del lado del servidor y generación de sitios estáticos. Está diseñado para proporcionar una experiencia de desarrollador óptima a través de características como cero-configuración, soporte automático de TypeScript, enrutamiento basado en el sistema de archivos y soporte integrado de CSS. Nuestro **[plan Standard](https://squarecloud.app/pay/standard)** ofrece **4 GB** de RAM y **4 vCPU**, lo cual debería ser suficiente para la mayoría de los sitios Next.js. Sin embargo, si estás trabajando en un proyecto más grande o necesitas más estabilidad, recomendamos considerar nuestro plan Pro. Con recursos adicionales, puedes garantizar un rendimiento fluido incluso bajo alta demanda. Para adquirirlo, simplemente haz clic [aquí](https://squarecloud.app/pay/pro). </Note>\n\n## Subiendo el Proyecto a Square Cloud\n\nDespués de preparar tus archivos de proyecto, ahora puedes subirlos a Square Cloud y alojar tu proyecto.\n\n<Tabs>\n  <Tab title=\"Carga vía Dashboard\">\n    Accede al [Dashboard de Square Cloud](https://squarecloud.app/dashboard/upload) y carga tus archivos de proyecto.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Carga vía CLI\">\n    <Steps>\n      <Step title=\"Primer Paso\">\n        Primero, necesitas tener el CLI instalado en tu entorno. Si aún no lo tienes, ejecuta el siguiente comando en tu terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        Si ya lo tienes, recomendamos actualizarlo. Para ello, ejecuta el siguiente comando en tu terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS y WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo Paso\">\n        Ahora, para autenticar y usar otros comandos del CLI, encontrarás tu clave de autorización [aquí](https://squarecloud.app/account) haciendo clic en \"Request API Key\". Tras obtener tu clave de autorización, ejecuta el siguiente comando:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Tercer Paso\">\n        Finalmente, para desplegar tu aplicación en Square Cloud usando el CLI, debes ejecutar el siguiente comando, pasando la ruta de tu archivo zip:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Solución de Problemas\n\n<AccordionGroup>\n  <Accordion title=\"Dominio Personalizado\" icon=\"globe\" iconType=\"solid\">\n    Si deseas usar un dominio personalizado para tu sitio alojado en Square Cloud, ten en cuenta que, por defecto, la URL será algo como `https://mysite.squareweb.app/`. El subdominio se determina por el campo SUBDOMAIN en el archivo de configuración. Sin embargo, si prefieres usar un dominio personalizado, como `mysite.com.br`, necesitarás adquirir el plan Standard o superior. Detallamos cada paso para configurar tu dominio personalizado en nuestro artículo: [Cómo configurar tu dominio](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Requisito Mínimo de RAM\" icon=\"memory\" iconType=\"solid\">\n    La cantidad mínima de RAM requerida para alojar un sitio es de 512 MB; sin embargo, al construir tu sitio directamente en Square, es aconsejable usar una cantidad mayor, o podrías encontrar el error [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM).\n  </Accordion>\n\n  <Accordion title=\"Acceso Temporalmente Denegado\" icon=\"ban\" iconType=\"solid\">\n    Si recibes el mensaje \"Your access has been temporarily denied.\" al intentar acceder al sitio, espera un tiempo. Si el problema persiste, no dudes en contactarnos en https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"El sitio tardó demasiado en responder...\" icon=\"clock\" iconType=\"solid\">\n    Si recibes el mensaje \"Website took too long to respond...\" asegúrate de haber configurado correctamente el puerto 80 en tu sitio. Si el problema persiste, no dudes en contactarnos en https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Recursos Adicionales\n\nPara más información sobre Next.js y sus herramientas, visita la [documentación oficial de Next.js](https://nextjs.org/docs). Allí encontrarás guías detalladas, tutoriales y documentación de la API para ayudarte a aprovechar al máximo Next.js.\n\nSi continúas experimentando problemas, no dudes en [contactar a nuestro equipo de soporte](/company/support).\n"
    },
    "fN9PfluMWrbs": {
      "id": "fN9PfluMWrbs",
      "path": "deploys/react-website",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "website",
          "react"
        ]
      },
      "metadata": {
        "title": "Alojando una Aplicación React en Square Cloud",
        "description": "Este artículo te guía en la creación y alojamiento de un sitio web React en Square Cloud.",
        "slug": "alojando-una-aplicacion-react-en-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introducción\n\n- Antes de comenzar, asegúrate de tener Node.js y npm instalados en tu sistema. Si aún no los tienes, puedes descargarlos desde el [sitio oficial de Node.js](https://nodejs.org/).\n- A continuación, necesitarás crear una cuenta en Square Cloud, lo cual puedes hacer a través de la [página de registro](https://squarecloud.app/signup). Puedes usar tu correo electrónico para crear la cuenta.\n- Finalmente, necesitas tener un plan de pago activo en tu cuenta. Puedes ver nuestros planes y adquirir uno según tus necesidades [aquí](https://squarecloud.app/plans).\n\n### Creando un Proyecto React\n\nPara crear un nuevo proyecto React, ejecuta el siguiente comando:\n\n```bash\nnpx create-react-app my-react-app\n```\n\nEn el comando anterior, `my-react-app` es el nombre de tu nuevo proyecto. Puedes reemplazar `my-react-app` por cualquier nombre deseado.\n\n`create-react-app` es un paquete disponible en el registro npm que configura un nuevo proyecto React para ti. Se encarga de toda la configuración inicial, como crear el directorio del proyecto, instalar las dependencias necesarias y configurar archivos básicos.\n\n## Configurando el Entorno de Producción con Serve\n\nDespués de haber creado y configurado tu proyecto React, es hora de prepararlo para producción. Para esto, usaremos una biblioteca llamada `serve`. Esta biblioteca es un servidor estático que puede servir tu proyecto React después de que haya sido compilado.\n\n### Instalando la Biblioteca Serve\n\nPara instalar la biblioteca `serve`, navega al directorio de tu proyecto en la terminal y ejecuta el siguiente comando:\n\n```bash\nnpm install serve@14.2.3\n```\n\nEste comando instala la versión `14.2.3` de la biblioteca `serve`. Si deseas instalar la versión más reciente, puedes omitir el `@14.2.3`.\n\n### Configurando el Script de Inicio\n\nDespués de instalar la biblioteca `serve`, necesitas configurar el script de inicio de tu proyecto para usar `serve`. Para ello, abre el archivo `package.json` de tu proyecto y añade un nuevo script llamado `start:prod`:\n\n```json\n\"scripts\": {\n  \"start\": \"react-scripts start\",\n  \"start:prod\": \"serve -s build -l 80\",\n  ...\n}\n```\n\nEn el script `start:prod`, el comando `serve -s build -l 80` hace lo siguiente:\n\n- `serve`: inicia el servidor `serve`.\n- `-s build`: la opción `-s` sirve el directorio `build` en modo de aplicación de página única. Esto significa que todas las solicitudes no encontradas se redirigirán a `index.html`. El directorio `build` se crea al ejecutar `npm run build`.\n- `-l 80`: la opción `-l` seguida de `80` indica a `serve` que escuche en el puerto 80. El puerto 80 es el predeterminado para tráfico HTTP.\n\nAhora, cuando quieras iniciar tu proyecto en modo producción, ejecuta el comando `npm run start:prod`. Este comando primero compila tu proyecto React y luego sirve los archivos compilados usando `serve` en el puerto 80.\n\n## Creando el archivo de configuración squarecloud.app\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  El archivo squarecloud.app es un archivo de configuración que se utilizará para configurar tu aplicación; define el nombre, descripción, versión, archivo principal, entre otras cosas.\n</Card>\n\n## Configurando el Campo START\n\nEn el archivo de configuración de Square Cloud, el campo `START` es esencial para personalizar el comando de inicio. Si deseas compilar e iniciar tu aplicación en Square Cloud, configura el campo `START` de la siguiente manera:\n\n```app squarecloud.app\nSTART=npm run build && npm run start:prod\n```\n\nEste comando ejecutará los scripts \"build\" y \"start:prod\" definidos en tu `package.json`:\n\n```json package.json\n{\n  \"name\": \"my-react-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@testing-library/jest-dom\": \"^5.17.0\",\n    \"@testing-library/react\": \"^13.4.0\",\n    \"@testing-library/user-event\": \"^13.5.0\",\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-scripts\": \"5.0.1\",\n    \"serve\": \"^14.2.3\",\n    \"web-vitals\": \"^2.1.4\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"start:prod\": \"serve -s build -l 80\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n```\n\n## Adquiriendo un Plan Antes de Subir Tu Proyecto\n\nAntes de poder subir tu proyecto a Square Cloud, es importante entender que necesitas adquirir un plan. El tipo de plan que elijas dependerá de los recursos que requiera tu aplicación. Puedes ver nuestros planes aquí.\n\n<Note>**¿Te preguntas cuánta RAM y CPU necesita tu plan para alojar un sitio React?** No te preocupes, estamos aquí para ayudar. React es un framework de JavaScript conocido por su velocidad y flexibilidad. Permite a los desarrolladores construir grandes aplicaciones web que se actualizan de manera eficiente en respuesta a cambios de datos. También es relativamente fácil de aprender, haciéndolo accesible para principiantes. Nuestro plan **[Standard](https://squarecloud.app/pay/standard)** ofrece **4GB** de RAM y **4vCPU**, lo cual debería ser suficiente para la mayoría de los sitios React. Sin embargo, si estás trabajando en un proyecto mayor o necesitas más estabilidad, recomendamos considerar el plan Pro. Con recursos adicionales, puedes asegurar un rendimiento fluido incluso bajo alta demanda. Para adquirirlo, simplemente haz clic [aquí](https://squarecloud.app/pay/pro).</Note>\n\n## Subiendo el Proyecto a Square Cloud\n\nDespués de preparar los archivos de tu proyecto, ahora puedes subirlos a Square Cloud y alojar tu proyecto.\n\n<Tabs>\n  <Tab title=\"Carga por Dashboard\">\n    Accede al [Dashboard de Square Cloud](https://squarecloud.app/dashboard/upload) y sube los archivos de tu proyecto.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Carga por CLI\">\n    <Steps>\n      <Step title=\"Primer Paso\">\n        Primero, necesitas tener la CLI instalada en tu entorno. Si aún no la tienes, ejecuta:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        Si ya la tienes, recomendamos actualizarla. Para ello:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS y WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo Paso\">\n        Ahora, para autenticar y usar otros comandos de la CLI, encuentra tu clave de autorización [aquí](https://squarecloud.app/account) haciendo clic en \"Request API Key\". Después de obtenerla, ejecuta:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Tercer Paso\">\n        Finalmente, para desplegar tu aplicación en Square Cloud usando la CLI, ejecuta:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Resolución de Problemas\n\n<AccordionGroup>\n  <Accordion title=\"Dominio Personalizado\" icon=\"globe\" iconType=\"solid\">\n    Si deseas usar un dominio personalizado para tu aplicación alojada en Square Cloud, ten en cuenta que, por defecto, la URL será algo como `https://mysite.squareweb.app/`. El subdominio se determina por el campo SUBDOMAIN en el archivo de configuración. Sin embargo, para usar un dominio personalizado como `mysite.com.br`, necesitas adquirir el plan **Standard** o superior. Detallamos cada paso en nuestro artículo: [Cómo configurar tu dominio personalizado](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Requisito Mínimo de RAM\" icon=\"memory\" iconType=\"solid\">\n    La cantidad mínima de RAM necesaria para alojar un sitio es de 512MB, pero al compilar tu sitio directamente en Square, es aconsejable usar más RAM, o podrías encontrarte con el error [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM).\n  </Accordion>\n\n  <Accordion title=\"Acceso Temporalmente Denegado\" icon=\"ban\" iconType=\"solid\">\n    Si recibes el mensaje \"Your access has been temporarily denied.\" al intentar acceder al sitio, espera un momento. Si el problema persiste, contáctanos en https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"El Sitio Tardó Demasiado en Responder...\" icon=\"clock\" iconType=\"solid\">\n    Si recibes el mensaje \"Website took too long to respond...\" asegúrate de haber configurado correctamente el puerto 80 en tu sitio. Si el problema persiste, contáctanos en https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Recursos Adicionales\n\nPara más información sobre React y sus herramientas, visita la [documentación oficial de React](https://reactjs.org/docs). Allí encontrarás guías detalladas, tutoriales y documentación de la API para ayudarte a aprovechar al máximo React.\n\nSi continúas teniendo problemas, no dudes en [contactar a nuestro equipo de soporte](/company/support).\n"
    },
    "6Ks4IlL4H9Kc": {
      "id": "6Ks4IlL4H9Kc",
      "path": "deploys/telegram-bot",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "bot",
          "telegram"
        ]
      },
      "metadata": {
        "title": "Alojando un Bot de Telegram en Square Cloud",
        "description": "Este artículo te guía en la creación y alojamiento de un bot de Telegram en Square Cloud.",
        "slug": "alojando-un-bot-de-telegram-en-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introducción\n\n- Antes de empezar a programar, debes configurar correctamente tu bot en Telegram. Primero, es necesario tener una cuenta de Telegram. Si aún no la tienes, puedes crearla visitando el [sitio web oficial de Telegram](https://telegram.org/).\n\n<AccordionGroup>\n  <Accordion title=\"Primeros Pasos\" icon=\"rocket\" iconType=\"solid\">\n    Primero, debes acceder a [Telegram](https://web.telegram.org/a/) y buscar un bot llamado \"BotFather\".\n\n    <Frame>\n      <img src=\"/images/articles/telegram/getting-started.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Obtener el Token\" icon=\"key\" iconType=\"solid\">\n    Haz clic para iniciar una conversación y escribe \"start\". Cuando envíe el mensaje, elige la opción \"/newbot\". Después te pedirá el nombre que quieres para tu bot y, finalmente, cuando elijas el nombre, generará el token.\n\n    <Frame>\n      <img src=\"/images/articles/telegram/getting-the-token.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n<Warning>Recuerda mantener el token de tu bot en secreto, ya que puede usarse para controlar tu bot.</Warning>\n\n- A continuación, necesitarás crear una cuenta en Square Cloud, lo cual se puede hacer a través de la [página de registro](https://squarecloud.app/signup). Puedes usar tu correo electrónico para crear una cuenta.\n- Por último, necesitas tener un plan de pago activo en tu cuenta. Puedes ver nuestros planes y comprar uno según tus necesidades [aquí](https://squarecloud.app/plans).\n\n# Uso de wrappers para la creación de bots\n\n<Tabs>\n  <Tab title=\"node-telegram-bot-api\">\n    1. Asegúrate de tener Node.js instalado en tu sistema. Si no lo tienes, puedes descargarlo desde el [sitio oficial de Node.js](https://nodejs.org/).\n    2. Inicializa un nuevo proyecto Node.js usando `npm init`. Esto creará un nuevo archivo `package.json` para tu proyecto:\n\n    ```bash\n    npm init -y\n    ```\n\n    3. Instala la biblioteca node-telegram-bot-api usando npm:\n\n    ```bash\n    npm install node-telegram-bot-api\n    ```\n\n    4. Crea un nuevo archivo JavaScript (por ejemplo, `index.js`) y agrega el siguiente código para crear un bot básico de Telegram:\n\n    ```javascript index.js\n    // Importing the node-telegram-bot-api library\n    const TelegramBot = require(\"node-telegram-bot-api\");\n\n    // Configuring the API key\n    const token = \"your token here\";\n\n    // Initializing the bot\n    const bot = new TelegramBot(token, { polling: true });\n\n    // Getting bot information\n    bot.getMe().then((botInfo) => {\n      // Getting the bot's name\n      const botName = botInfo.username;\n\n      // Defining a route for messages that are not commands\n      bot.on(\"message\", (msg) => {\n        // Getting the chat ID\n        const chatId = msg.chat.id;\n        // Getting the user's message\n        const userMsg = msg.text;\n        // Formatting the message to be sent\n        const responseMsg = `\\${botName} Says: \\${userMsg}`;\n        // Sending the message\n        bot.sendMessage(chatId, responseMsg);\n      });\n\n      // Printing the bot's name\n      console.log(botName);\n    });\n    ```\n  </Tab>\n\n  <Tab title=\"telebot\">\n    1. Asegúrate de tener Python y Pip (un gestor de paquetes para Python) instalados en tu sistema. Si no los tienes, puedes descargarlos desde el [sitio oficial de Python](https://www.python.org/) y el [sitio oficial de Pip](https://pypi.org/).\n    2. Instala la biblioteca telebot usando pip:\n\n    ```bash\n    pip install telebot\n    ```\n\n    3. Crea un nuevo archivo Python (por ejemplo, `main.py`) y agrega el siguiente código para crear un bot básico de Telegram:\n\n    ```python main.py\n    # Importing the telebot_router library\n    from telebot_router import TeleBot\n\n    # Initializing the bot\n    app = TeleBot(__name__)\n\n    # Defining a route for messages that are not commands\n    @app.route('(?!/).+')\n    def parrot(message):\n        # Getting the chat ID\n        chat_dest = message['chat']['id']\n        # Getting the user's message\n        user_msg = message['text']\n        # Getting bot information\n        bot_info = app.get_me()['result']\n        # Getting the bot's name\n        bot_name = bot_info['username']\n        # Formatting the message to be sent\n        msg = \"{} Says: {}\".format(bot_name, user_msg)\n        # Sending the message\n        app.send_message(chat_dest, msg)\n        \n    # Defining the main function\n    if __name__ == '__main__':\n        # Configuring the API key\n        app.config['api_key'] = 'your token here'\n        # Getting bot information\n        bot_info = app.get_me()['result']\n        # Getting the bot's name\n        bot_name = bot_info['username']\n        # Printing the bot's name\n        print(f\"{bot_name}\") \n        # Starting the bot\n        app.poll(debug=True)\n    ```\n\n    4. Crea un archivo `requirements.txt` para listar todas las bibliotecas externas necesarias para tu proyecto:\n\n    ```txt requirements.txt\n    telebot\n    ```\n  </Tab>\n</Tabs>\n\n## Creación del archivo de configuración de Square Cloud\n\n<Card title=\"Más información: cómo crear el archivo de configuración para Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  El archivo squarecloud.app es un archivo de configuración que se usará para configurar tu aplicación; definirá el nombre, la descripción, la versión, el archivo principal, entre otras cosas.\n</Card>\n\n## Configuración del campo START\n\n<Warning>Utiliza este campo solo si realmente sabes lo que haces.</Warning>\n\nEn el archivo de configuración de Square Cloud, el campo **START** es opcional y solo es necesario si utilizas un script personalizado para iniciar el bot. En el ejemplo proporcionado, el campo **START** no es necesario.\n\n## Subir el proyecto a Square Cloud\n\nDespués de preparar los archivos de tu proyecto, ahora puedes subirlos a Square Cloud y alojar tu proyecto.\n\n<Tabs>\n  <Tab title=\"Subida desde el panel\">\n    Accede al [Panel de Square Cloud](https://squarecloud.app/dashboard/upload) y sube los archivos de tu proyecto.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Subida mediante CLI\">\n    <Steps>\n      <Step title=\"Primer Paso\">\n        Primero, necesitas tener la CLI instalada en tu entorno. Si aún no la tienes, ejecuta el siguiente comando en tu terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        Si ya la tienes, te recomendamos actualizarla. Para ello, ejecuta:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS y WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo Paso\">\n        Para autenticarte y usar otros comandos de la CLI, encontrarás tu clave de autorización [aquí](https://squarecloud.app/account) haciendo clic en \"Request API Key\". Tras obtener la clave, ejecuta:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Tercer Paso\">\n        Finalmente, para desplegar tu aplicación en Square Cloud usando la CLI, ejecuta:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Probar el bot\n\nSi has hecho todo correctamente, simplemente busca tu bot en Telegram y envía un mensaje; te lo devolverá como eco.\n\n<Frame>\n  <img src=\"/images/articles/telegram/testing-bot.png\" style={{ borderRadius: \"0.2rem\" }} />\n</Frame>\n\n## Recursos adicionales\n\nPara más información sobre la creación de bots con telebot, visita la [documentación oficial de telebot](https://pypi.org/project/telebot/). Allí encontrarás guías detalladas, tutoriales y documentación de la API para sacar el máximo partido a estas bibliotecas.\n\nSi sigues teniendo problemas, no dudes en [contactar con nuestro equipo de soporte](/company/support).\n"
    },
    "k6CQUbg64Fdl": {
      "id": "k6CQUbg64Fdl",
      "path": "deploys/vite-website",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "website",
          "vite"
        ]
      },
      "metadata": {
        "title": "Alojando una Aplicación Vite en Square Cloud",
        "description": "Este artículo te guía en la creación y alojamiento de una aplicación Vite en Square Cloud",
        "slug": "alojando-una-aplicacion-vite-en-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introducción\n\n- Antes de comenzar, asegúrate de tener Node.js y npm instalados en tu sistema. Si aún no los tienes, puedes descargarlos desde el [sitio oficial de Node.js](https://nodejs.org/).\n- A continuación, necesitarás crear una cuenta en Square Cloud, lo cual puedes hacer a través de la [página de registro](https://squarecloud.app/signup). Puedes usar tu correo electrónico para crear la cuenta.\n- Finalmente, necesitas tener un plan de pago activo en tu cuenta. Puedes ver nuestros planes y adquirir uno según tus necesidades [aquí](https://squarecloud.app/plans).\n\n### Creando un Proyecto Vite\n\nPara crear un nuevo proyecto Vite, ejecuta el siguiente comando:\n\n```bash\nnpm create vite@latest my-vite-app\n```\n\nEn el comando anterior, `my-vite-app` es el nombre de tu nuevo proyecto. Reemplázalo por cualquier nombre deseado. Por defecto, este comando configura el proyecto Vite con JavaScript.\n\n### Elección de un Template Específico\n\nVite permite elegir diferentes templates para tu proyecto. Al crear un nuevo proyecto, puedes especificar el template deseado usando la opción `--template`. Aquí tienes algunos ejemplos:\n\nSelecciona un template entre: `react`, `vue` y `lit`.\n\n```bash\n# npm 7+, extra double-dash is needed:\nnpm create vite@latest my-vite-app -- --template [template]\n```\n\nElige el template que mejor se adapte a tus necesidades y ajusta el nombre del proyecto según sea necesario.\n\n### Entendiendo la Diferencia entre JavaScript y TypeScript\n\nCuando eliges JavaScript, Vite configura el proyecto con la configuración predeterminada de JavaScript. Por otro lado, al elegir TypeScript, Vite configura el proyecto con la configuración de TypeScript, incluida la generación de un archivo `tsconfig.json`.\n\n## Configurando el Puerto 80\n\nEl puerto 80 es el puerto predeterminado para tráfico HTTP. Para hospedar una app Vite en Square Cloud, configura el uso del puerto 80. En Vite, puedes establecer el parámetro `--port 80` en el script de inicio para asegurar que tu app se ejecute correctamente en este puerto.\n\n## Configurando el Host 0.0.0.0\n\nLa opción `--host 0.0.0.0` se utiliza para vincular el servidor Vite a todas las interfaces de red disponibles. Esto hace que tu aplicación sea accesible no solo en `localhost`, sino también en dispositivos externos dentro de la misma red, como otros ordenadores o dispositivos móviles. Por defecto, Vite se vincula a `localhost`, lo que restringe el acceso a la máquina donde se está ejecutando. Establecer el host en `0.0.0.0` permite al servidor escuchar solicitudes desde cualquier dirección IP.\n\n## Creando el archivo de configuración squarecloud.app\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  El archivo squarecloud.app es un archivo de configuración que se usa para configurar tu aplicación; se utiliza para definir el nombre, descripción, versión, archivo principal, entre otras cosas.\n</Card>\n\n## Configurando el Campo START\n\nEn el archivo de configuración de Square Cloud, el campo `START` es esencial para personalizar el comando de inicio. Si quieres compilar e iniciar tu app Vite en Square Cloud, configura el campo `START` de la siguiente manera:\n\n```app squarecloud.app\nSTART=npm run build && npm run preview\n```\n\nEste comando ejecutará los scripts \"build\" y \"preview\" definidos en tu `package.json`:\n\n```json package.json\n{\n  \"name\": \"my-vite-app\",\n  \"private\": true,\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview --host 0.0.0.0 --port 80\"\n  },\n  \"devDependencies\": {\n    \"vite\": \"^5.1.4\"\n  }\n}\n```\n\n## Adquiriendo un Plan Antes de Subir Tu Proyecto\n\nAntes de poder subir tu proyecto a Square Cloud, es importante entender que necesitas adquirir un plan. El tipo de plan que elijas dependerá de los recursos que requiera tu aplicación. Puedes ver nuestros planes [aquí](https://squarecloud.app/plans).\n\n<Note>**¿Te preguntas cuánta RAM y CPU necesita tu plan para alojar un sitio Vite?** No te preocupes, estamos aquí para ayudar. Vite es una herramienta moderna de build front-end que ofrece una experiencia de desarrollo más rápida y ligera para proyectos web modernos. Está diseñado para proporcionar soporte inmediato para módulos ES, permitiendo inicio instantáneo del servidor y reemplazo de módulos en caliente. Nuestro plan **[Standard](https://squarecloud.app/pay/standard)** ofrece **4GB** de RAM y **4vCPU**, lo cual debería ser suficiente para la mayoría de los sitios Vite. Sin embargo, si estás trabajando en un proyecto más grande o necesitas más estabilidad, recomendamos considerar nuestro plan Pro. Con recursos adicionales, puedes asegurar un rendimiento fluido incluso bajo alta demanda. Para adquirirlo, simplemente haz clic [aquí](https://squarecloud.app/pay/pro).</Note>\n\n## Subiendo el Proyecto a Square Cloud\n\nDespués de preparar los archivos de tu proyecto, ahora puedes subirlos a Square Cloud y alojar tu proyecto.\n\n<Tabs>\n  <Tab title=\"Carga por Dashboard\">\n    Accede al [Dashboard de Square Cloud](https://squarecloud.app/dashboard/upload) y sube los archivos de tu proyecto.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Carga por CLI\">\n    <Steps>\n      <Step title=\"Primer Paso\">\n        Primero, necesitas tener la CLI instalada en tu entorno. Si aún no la tienes, ejecuta el siguiente comando en tu terminal:\n\n        ```\n        npm install -g @squarecloud/cli\n        ```\n\n        Si ya la tienes, recomendamos actualizarla. Para ello, ejecuta el siguiente comando en tu terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS y WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo Paso\">\n        Ahora, para autenticarte y usar otros comandos de la CLI, encontrarás tu clave de autorización [aquí](https://squarecloud.app/account) haciendo clic en \"Request API Key\". Después de obtenerla, ejecuta:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Tercer Paso\">\n        Finalmente, para desplegar tu aplicación en Square Cloud usando la CLI, debes ejecutar el siguiente comando, pasando la ruta de tu archivo zip:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Resolución de Problemas\n\n<AccordionGroup>\n  <Accordion title=\"Dominio Personalizado\" icon=\"globe\" iconType=\"solid\">\n    Si deseas usar un dominio personalizado para tu app alojado en Square Cloud, ten en cuenta que, por defecto, la URL será algo como `https://mysite.squareweb.app/`. El subdominio se determina por el campo SUBDOMAIN en el archivo de configuración. Sin embargo, para usar un dominio personalizado como `mysite.com`, necesitas adquirir el plan **Standard** o superior. Detallamos cada paso en nuestro artículo: [Cómo configurar tu dominio personalizado](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"Requisitos Mínimos de RAM\" icon=\"memory\" iconType=\"solid\">\n    La cantidad mínima de RAM necesaria para alojar un sitio o API es de 512MB, pero al construir tu sitio directamente en Square, es aconsejable usar más RAM, o podrías encontrar el error [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM).\n  </Accordion>\n\n  <Accordion title=\"Acceso Temporalmente Denegado\" icon=\"ban\" iconType=\"solid\">\n    Si recibes el mensaje \"Your access has been temporarily denied.\" al intentar acceder al sitio, espera un momento. Si el problema persiste, contáctanos en https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"El sitio tardó demasiado en responder...\" icon=\"clock\" iconType=\"solid\">\n    Si recibes el mensaje \"Website took too long to respond...\", asegúrate de haber configurado correctamente el puerto 80 en tu sitio. Si el problema persiste, contáctanos en https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Recursos Adicionales\n\nPara más información sobre Vite y sus herramientas, visita la [documentación oficial de Vite](https://vitejs.dev/guide/). Allí encontrarás guías detalladas, tutoriales y documentación de la API para aprovechar al máximo Vite.\n\nSi continúas experimentando problemas, no dudes en [contactar con nuestro equipo de soporte](/company/support).\n"
    },
    "6T1BB3ROntV8": {
      "id": "6T1BB3ROntV8",
      "path": "deploys/vue-website",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "vue",
          "website"
        ]
      },
      "metadata": {
        "title": "Alojando una Aplicación Vue en Square Cloud",
        "description": "Este artículo te guía en la creación y alojamiento de una aplicación Vue en Square Cloud",
        "slug": "alojando-una-aplicacion-vue-en-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introducción\n\n- Antes de comenzar, asegúrate de tener Node.js y npm instalados en tu sistema. Si aún no los tienes, puedes descargarlos desde el [sitio oficial de Node.js](https://nodejs.org/).\n- A continuación, necesitarás crear una cuenta en Square Cloud, lo cual puedes hacer a través de la [página de registro](https://squarecloud.app/signup). Puedes usar tu correo electrónico para crear la cuenta.\n- Finalmente, necesitas tener un plan de pago activo en tu cuenta. Puedes ver nuestros planes y adquirir uno según tus necesidades [aquí](https://squarecloud.app/plans).\n\n### Creando un Proyecto Vue\n\nPara crear un nuevo proyecto Vue, ejecuta el siguiente comando:\n\n```bash\nnpm create vue@latest\n```\n\nEn este comando, `npm create vue@latest` configura un nuevo proyecto Vue con la versión más reciente. El comando `npm create` forma parte de `npm`, el gestor de paquetes de Node.js, y sirve para inicializar un paquete npm nuevo o existente.\n\n`vue@latest` es un paquete en el registro npm que genera un proyecto Vue para ti, encargándose de la configuración inicial como la creación de directorios, instalación de dependencias y configuración de archivos básicos.\n\n`@latest` es la etiqueta que garantiza que uses la versión más actualizada del paquete `vue`, brindándote acceso a las últimas funcionalidades.\n\n## Configuración del Puerto 80\n\nEl puerto 80 es el predeterminado para tráfico HTTP. Para alojar una app Vite en Square Cloud, añade la opción `--port 80` en tu script de inicio para que tu app escuche en el puerto 80.\n\n## Creando el archivo squarecloud.app\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  El archivo squarecloud.app se utiliza para configurar tu aplicación; define nombre, descripción, versión, archivo principal y más.\n</Card>\n\n## Configuración del Campo START\n\nEn el archivo de configuración de Square Cloud, el campo `START` permite personalizar el comando de inicio. Para compilar e iniciar tu app Vue en Square Cloud, usa:\n\n```app squarecloud.app\nSTART=npm run build && npm run serve\n```\n\nEsto ejecuta los scripts “build” y “serve” de tu `package.json`:\n\n```json package.json\n{\n  \"name\": \"vue-project\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"serve\": \"vite preview --port 80\"\n  },\n  \"dependencies\": {\n    \"vue\": \"^3.4.21\"\n  },\n  \"devDependencies\": {\n    \"@vitejs/plugin-vue\": \"^5.0.4\",\n    \"vite\": \"^5.2.8\"\n  }\n}\n```\n\n## Adquirir un Plan Antes de Subir\n\nAntes de subir tu proyecto, debes adquirir un plan. La elección depende de los recursos que tu app requiera. Consulta nuestros planes [aquí](https://squarecloud.app/plans).\n\n<Note>**¿Te preguntas cuánta RAM y CPU necesitas para alojar un sitio Vue.js?** Vue.js es un framework progresivo conocido por su adaptabilidad y sencillez. Permite adopción incremental, renderizado declarativo y un enfoque basado en componentes. Nuestro plan **[Standard](https://squarecloud.app/pay/standard)** ofrece **4GB** de RAM y **4vCPU**, suficiente para la mayoría de sitios Vue.js. Para proyectos más grandes o mayor estabilidad, considera Pro. Para comprar, haz clic [aquí](https://squarecloud.app/pay/pro).</Note>\n\n## Subiendo el Proyecto a Square Cloud\n\nUna vez listos los archivos, súbelos:\n\n<Tabs>\n  <Tab title=\"Upload por Dashboard\">\n    Ve al [Dashboard de Square Cloud](https://squarecloud.app/dashboard/upload) y carga tus archivos.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Upload por CLI\">\n    <Steps>\n      <Step title=\"Primer Paso\">\n        Instala la CLI:\n\n        ```bash\n        npm install -g @squarecloud/cli\n        ```\n\n        O actualízala:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS & WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo Paso\">\n        Obtén tu clave de [Account](https://squarecloud.app/account) (“Request API Key”) y ejecuta:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Tercer Paso\">\n        Despliega tu app con:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Solución de Problemas\n\n<AccordionGroup>\n  <Accordion title=\"Dominio Personalizado\" icon=\"globe\" iconType=\"solid\">\n    Por defecto la URL es `https://mysite.squareweb.app/`. Para usar `mysite.com`, necesitas el plan **Standard** o superior. Ver [Cómo configurar tu dominio personalizado](https://docs.squarecloud.app/tutorials/how-to-set-up-your-domain).\n  </Accordion>\n\n  <Accordion title=\"RAM Mínima Requerida\" icon=\"memory\" iconType=\"solid\">\n    Se requieren 512MB RAM mínimo, pero se recomienda más al construir en Square para evitar [LACK\\_OF\\_RAM](https://docs.squarecloud.app/faqs/troubleshooting/LACK_OF_RAM).\n  </Accordion>\n\n  <Accordion title=\"Acceso Temporalmente Denegado\" icon=\"ban\" iconType=\"solid\">\n    Si ves “Your access has been temporarily denied.”, espera un momento. Si persiste, contacta soporte en https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/temporarily-denied-access.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n\n  <Accordion title=\"Tiempo de Respuesta Excedido...\" icon=\"clock\" iconType=\"solid\">\n    Si ves “Website took too long to respond...”, asegura la configuración del puerto 80. Si persiste, contacta soporte en https://squarecloud.app/dashboard/support.\n\n    <Frame>\n      <img src=\"/images/articles/troubleshooting/website-took-too-long-to-respond.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n## Recursos Adicionales\n\nPara más información sobre Vue y sus herramientas, visita la [documentación oficial de Vue](https://vuejs.org/). Encontrarás guías, tutoriales y documentación de la API.\n\nSi encuentras problemas, [contacta a soporte](/company/support).\n"
    },
    "7x3Iy9P6E1uc": {
      "id": "7x3Iy9P6E1uc",
      "path": "deploys/website",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "website"
        ]
      },
      "metadata": {
        "title": "Alojando Tu Sitio Web/API en Square Cloud",
        "description": "Aprende cómo alojar tu sitio web o API en Square Cloud usando el archivo de configuración squarecloud.app.",
        "slug": "alojando-tu-sitio-webapi-en-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introducción\n\n- Crea una cuenta en Square Cloud, lo cual puede hacerse a través de la [página de registro](https://squarecloud.app/signup). Puedes usar tu correo electrónico para crear la cuenta.\n- Ten un plan pago activo en tu cuenta. Puedes ver nuestros planes y adquirir uno según tus necesidades [aquí](https://squarecloud.app/plans).\n\n## Creando el archivo de configuración squarecloud.app\n\n<Card title=\"Learn about: how to make the configuration file for Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  El archivo squarecloud.app es un archivo de configuración que se utilizará para\n  configurar tu aplicación; servirá para definir el nombre, descripción,\n  versión, archivo principal, entre otras cosas.\n</Card>\n\n### Parámetros importantes del sitio\n\nEl **puerto del sitio** debe ser **80**; si estás usando un sitio estático, no necesitas configurar el parámetro `START`.\n\nEn el archivo squarecloud.app de configuración:\n\n- `SUBDOMAIN`: Si estás alojando un sitio web, establece este parámetro con el subdominio deseado.\n- `START`: Un comando de inicio personalizado (si es necesario).\n\n<Note>La URL del sitio será: `mi-parametro-subdominio`.squareweb.app</Note>\n\n```systemd This example host a website without custom startup command\nMAIN=index.html\nMEMORY=512\nVERSION=recommended\nDISPLAY_NAME=Mi sitio estático sencillo!\nSUBDOMAIN=mi-sitio-estatico-sencillo\n```\n\n```systemd This example use all parameters and custom startup command in a website\nMAIN=index.js\nMEMORY=512\nVERSION=recommended\nDISPLAY_NAME=Mi sitio Next.js sencillo!\nSUBDOMAIN=mi-sitio-nextjs-sencillo\nSTART=npm run build && npm run start\n```\n\n# Soporte para múltiples tecnologías\n\n<CardGroup cols={2}>\n  <Card title=\"React\" icon=\"react\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-react-website\">\n    Aprende cómo alojar tu sitio React en Square Cloud.\n  </Card>\n\n  <Card title=\"Next.js\" icon=\"node-js\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-next-website\">\n    Aprende cómo alojar tu sitio Next.js en Square Cloud.\n  </Card>\n\n  <Card title=\"NestJs\" icon=\"js\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-nestjs-application\">\n    Aprende cómo alojar tu aplicación NestJs en Square Cloud.\n  </Card>\n\n  <Card title=\"Vite\" icon=\"rocket\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-vite-website\">\n    Aprende cómo alojar tu sitio Vite en Square Cloud.\n  </Card>\n\n  <Card title=\"Vue\" icon=\"vuejs\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-vue-website\">\n    Aprende cómo alojar tu sitio Vue en Square Cloud.\n  </Card>\n\n  <Card title=\"Flask\" icon=\"flask\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-flask-application\">\n    Aprende cómo alojar tu aplicación Flask en Square Cloud.\n  </Card>\n\n  <Card title=\"Django\" icon=\"python\" href=\"https://docs.squarecloud.app/tutorials/how-to-deploy-your-django-application\">\n    Aprende cómo alojar tu aplicación Django en Square Cloud.\n  </Card>\n\n  <Card title=\"Lavalink\" icon=\"java\" href=\"https://docs.squarecloud.app/tutorials/how-to-create-your-lavalink-server\">\n    Aprende cómo alojar tu servidor Lavalink y transmitir música de alta calidad a tu bot de Discord.\n  </Card>\n</CardGroup>\n\nAl seguir estos pasos, tendrás tu sitio o API en funcionamiento en Square Cloud. Si encuentras algún problema o necesitas asistencia adicional, no dudes en contactar a nuestro [equipo de soporte](../company/support).\n"
    },
    "HXeR7IXfcx96": {
      "id": "HXeR7IXfcx96",
      "path": "deploys/whatsapp-bot",
      "author": {
        "name": "Square Cloud"
      },
      "attributes": {
        "tags": [
          "deploy",
          "bot",
          "whatsapp"
        ]
      },
      "metadata": {
        "title": "Alojando un Bot de Whatsapp en Square Cloud",
        "description": "Este artículo te guía en la creación y alojamiento de un bot de Whatsapp en Square Cloud.",
        "slug": "alojando-un-bot-de-whatsapp-en-square-cloud"
      },
      "created_at": "2025-06-25T19:58:28.000Z",
      "updated_at": "2025-06-26T21:56:09.000Z",
      "content": "## Introducción\n\n- Antes de comenzar a programar es necesario configurar correctamente tu bot en WhatsApp. Primero, necesitas tener WhatsApp descargado en tu teléfono. Si aún no lo tienes, puedes visitar el [sitio oficial de WhatsApp](https://www.whatsapp.com/coronavirus/get-started?lang=en). Después de tener WhatsApp instalado y configurado, puedes comenzar a programar tu bot.\n- A continuación, necesitarás crear una cuenta en Square Cloud, lo cual se puede hacer a través de la [página de registro](https://squarecloud.app/signup). Puedes usar tu correo electrónico para crear una cuenta.\n- Finalmente, necesitas tener un plan de pago activo en tu cuenta. Puedes ver nuestros planes y adquirir uno de acuerdo con tus necesidades [aquí](https://squarecloud.app/plans).\n\n<AccordionGroup>\n  <Accordion title=\"Ruta remota a la versión web de WhatsApp\" icon=\"file\" iconType=\"solid\">\n    Si tu código requiere acceder a la ruta remota de la versión web de WhatsApp, aquí te mostramos cómo hacerlo.\n    Puedes acceder a [wa-version](https://github.com/wppconnect-team/wa-version/tree/main/html), elegir la versión deseada (siempre se recomienda la más reciente) y hacer clic en \"Raw\". Después de que se abra la página, simplemente copia la URL, que se usará más adelante. URL de ejemplo:\n    \"https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2412.54.html\"\n\n    <Frame>\n      <img src=\"/images/articles/whatsapp/remote-path.png\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Accordion>\n</AccordionGroup>\n\n# Iniciando el proyecto\n\n1. Asegúrate de tener Node.js instalado en tu sistema. Si no lo tienes, puedes descargarlo desde el [sitio oficial de Node.js](https://nodejs.org/).\n2. Inicializa un nuevo proyecto Node.js usando `npm init`. Esto creará un nuevo archivo `package.json` para tu proyecto:\n\n```bash\nnpm init -y\n```\n\n3. Instala las librerías whatsapp-web.js y qrcode usando npm:\n\n```bash\nnpm install whatsapp-web.js qrcode\n```\n\n4. Crea un nuevo archivo JavaScript (por ejemplo, `index.js`) y añade el siguiente código para crear un bot básico de WhatsApp:\n\n```javascript index.js\n// Importando los módulos necesarios\nconst { Client } = require(\"whatsapp-web.js\");\nconst qrcode = require(\"qrcode\");\n\n// Creando una nueva instancia del client\nconst client = new Client({\n  puppeteer: {\n    // Ejecuta Chrome en modo headless (sin interfaz gráfica).\n    headless: true,\n    args: [\n      // Desactiva las funciones de sandbox de Chrome. Esto es necesario al ejecutar\n      // Puppeteer en ciertos entornos, como contenedores Docker.\n      \"--no-sandbox\",\n      // Bandera adicional de sandbox para desactivar el setuid sandbox.\n      \"--disable-setuid-sandbox\",\n    ],\n  },\n  // Configurando la opción webVersionCache\n  webVersionCache: {\n    // Configura el tipo como \"remote\", lo que significa que la versión web de WhatsApp se obtendrá de una URL remota\n    type: \"remote\",\n    // Configurando la ruta remota para la versión web de WhatsApp\n    remotePath: \"URL PATH HERE\",\n  },\n});\n\n// Este evento se dispara cuando whatsapp-web.js genera un nuevo código QR\nclient.on(\"qr\", async (qr) => {\n  // Aquí usamos la librería qrcode para generar un código QR y guardarlo como archivo\n  try {\n    await qrcode.toFile(\"./qrcode.png\", qr);\n    console.log(\"QR Code guardado como qrcode.png\");\n  } catch (err) {\n    console.error(err);\n  }\n});\n\n// Este evento se dispara cuando el client está listo\nclient.on(\"ready\", () => {\n  // Este registro se mostrará en la consola cuando el client esté listo, es decir, después de que el código QR haya sido escaneado con éxito y la sesión de WhatsApp Web se haya iniciado\n  console.log(\"¡Client está listo!\");\n});\n\n// Este evento se dispara cuando se crea un mensaje\nclient.on(\"message_create\", (msg) => {\n  // Aquí registramos el cuerpo del mensaje en la consola\n  console.log(msg.body);\n  // Si el mensaje es \"!ping\"\n  if (msg.body == \"!ping\") {\n    // Responde con \"pong\"\n    msg.reply(\"pong\");\n  }\n});\n\n// Inicializando el client\nclient.initialize();\n```\n\n## Creando el archivo de configuración squarecloud\n\n<Card title=\"Aprende sobre: cómo crear el archivo de configuración para Square Cloud.\" icon=\"link\" href=\"https://docs.squarecloud.app/getting-started/config-file\">\n  El archivo squarecloud.app es un archivo de configuración que se usará para configurar tu aplicación; se usará para definir el nombre, descripción, versión, archivo principal, entre otras cosas.\n</Card>\n\n## Configurando el campo START\n\n<Warning>Solo usa este campo si realmente sabes lo que estás haciendo.</Warning>\n\nEn el archivo de configuración de Square Cloud, el **START** es opcional y solo se necesita si estás usando un script personalizado para iniciar el bot. En el ejemplo proporcionado, el **START** no es necesario.\n\n## Subiendo el proyecto a Square Cloud\n\nDespués de preparar los archivos de tu proyecto, ahora puedes subirlos a Square Cloud y alojar tu proyecto.\n\n<Tabs>\n  <Tab title=\"Carga desde el Panel\">\n    Accede al [Panel de Square Cloud](https://squarecloud.app/dashboard/upload) y sube tus archivos de proyecto.\n\n    <Frame>\n      <img src=\"/images/uploading.gif\" style={{ borderRadius: \"0.2rem\" }} />\n    </Frame>\n  </Tab>\n\n  <Tab title=\"Carga vía CLI\">\n    <Steps>\n      <Step title=\"Primer paso\">\n        Primero, necesitas tener la CLI instalada en tu entorno. Si aún no la tienes, ejecuta el siguiente comando en tu terminal:\n\n        ```bash\n        npm install -g @squarecloud/cli\n        ```\n\n        Si ya la tienes, recomendamos actualizarla. Para ello, ejecuta el siguiente comando en tu terminal:\n\n        <Tabs>\n          <Tab title=\"Windows\">\n            ```bash\n            squarecloud update\n            ```\n          </Tab>\n\n          <Tab title=\"Linux, macOS y WSL\">\n            ```bash\n            curl -fsSL https://cli.squarecloud.app/install | bash\n            ```\n          </Tab>\n        </Tabs>\n      </Step>\n\n      <Step title=\"Segundo paso\">\n        Ahora, para autenticarte y usar otros comandos de la CLI, encontrarás tu clave de autorización [aquí](https://squarecloud.app/account) haciendo clic en \"Request API Key\". Después de obtener tu clave de autorización, ejecuta el siguiente comando:\n\n        ```bash\n        squarecloud login\n        ```\n      </Step>\n\n      <Step title=\"Tercer paso\">\n        Finalmente, para desplegar tu aplicación en Square Cloud usando la CLI, necesitas ejecutar el siguiente comando, pasando la ruta de tu archivo zip:\n\n        ```bash\n        squarecloud upload zip\n        ```\n      </Step>\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Recursos adicionales\n\nPara más información sobre la creación de bots con whatsapp-web.js, visita la [documentación oficial de whatsapp-web.js](https://wwebjs.dev/). Allí encontrarás guías detalladas, tutoriales y documentación de la API para ayudarte a aprovechar al máximo estas bibliotecas.\n\nSi continúas experimentando problemas, no dudes en [contactar a nuestro equipo de soporte](/company/support).\n"
    }
  },
  "snippets": {
    "_snippets/requirements-txt": {
      "path": "_snippets/requirements-txt",
      "content": "#### 📝 Creando el archivo requirements.txt\n\nPara crear tu archivo requirements.txt, debes listar todas tus dependencias dentro del archivo.\nAsí es como se vería si tiene las dependencias Flask y waitress.\n\n```txt\nflask\nwaitress\n```\n\nTen en cuenta que al listarlas de esta manera, el gestor de paquetes instalará la versión más reciente del paquete.\nSi deseas una versión específica, usa dos signos de igual seguidos del número de la versión correspondiente.\n\n```txt\nflask==3.1.0\nwaitress==3.0.2\n```\n\nSi usas el comando pip freeze, se listarán no solo tus dependencias, sino también las dependencias de estas.\nPor ejemplo, si tienes discord-py instalado como dependencia, pip también listará aiohttp, que es una dependencia de la\nbiblioteca discord-py. Esto genera un archivo más extenso de lo necesario y, si se usa en el entorno global, puede incluir\ndependencias innecesarias de otros proyectos.\n"
    }
  }
}